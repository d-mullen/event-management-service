// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zenoss/zing/proto/event/event.proto

package event

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "github.com/zenoss/zing-proto/v11/go/cloud/common"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Severity int32

const (
	Severity_SEVERITY_DEFAULT  Severity = 0
	Severity_SEVERITY_DEBUG    Severity = 1
	Severity_SEVERITY_INFO     Severity = 2
	Severity_SEVERITY_WARNING  Severity = 3
	Severity_SEVERITY_ERROR    Severity = 4
	Severity_SEVERITY_CRITICAL Severity = 5
)

var Severity_name = map[int32]string{
	0: "SEVERITY_DEFAULT",
	1: "SEVERITY_DEBUG",
	2: "SEVERITY_INFO",
	3: "SEVERITY_WARNING",
	4: "SEVERITY_ERROR",
	5: "SEVERITY_CRITICAL",
}

var Severity_value = map[string]int32{
	"SEVERITY_DEFAULT":  0,
	"SEVERITY_DEBUG":    1,
	"SEVERITY_INFO":     2,
	"SEVERITY_WARNING":  3,
	"SEVERITY_ERROR":    4,
	"SEVERITY_CRITICAL": 5,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_60109942d2706896, []int{0}
}

type Status int32

const (
	Status_STATUS_DEFAULT    Status = 0
	Status_STATUS_OPEN       Status = 1
	Status_STATUS_SUPPRESSED Status = 2
	Status_STATUS_CLOSED     Status = 3
)

var Status_name = map[int32]string{
	0: "STATUS_DEFAULT",
	1: "STATUS_OPEN",
	2: "STATUS_SUPPRESSED",
	3: "STATUS_CLOSED",
}

var Status_value = map[string]int32{
	"STATUS_DEFAULT":    0,
	"STATUS_OPEN":       1,
	"STATUS_SUPPRESSED": 2,
	"STATUS_CLOSED":     3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_60109942d2706896, []int{1}
}

// Event struct.
type Event struct {
	// The event id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The tenant id
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// The time when event happened.
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Dimensions associated with this event.
	Dimensions map[string]*common.Scalar `protobuf:"bytes,7,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Fields associated with this event.
	Metadata map[string]*common.ScalarArray `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// type uniquely identifies the context-free type of event.
	//   - typically set the same as "name" for systems that have an event ID.
	//   - e.g. linkDown, fault-F0157
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// summary is a short (<128 character) summary of the event.
	//   - most commonly displayed per-event field
	//   - highly recommend to set this
	Summary string `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
	// body is a long (? character) further description of the event.
	//   - it is not necessary to repeat summary in the body
	Body string `protobuf:"bytes,11,opt,name=body,proto3" json:"body,omitempty"`
	// severity defines how severe the event is.
	//   - use SEVERITY_DEFAULT when not currently known
	//   - use SEVERITY_DEBUG when not severe enough to show by default
	//   - use SEVERITY_INFO when when no action is likely required
	//   - use SEVERITY_WARNING when delayed action may be required
	//   - use SEVERITY_ERROR when system is degraded, but not down
	//   - use SEVERITY_CRITICAL for system down
	Severity Severity `protobuf:"varint,12,opt,name=severity,proto3,enum=events.Severity" json:"severity,omitempty"`
	// status defines the event's disposition from the system perspective.
	//   - use STATUS_DEFAULT when not currently known
	//   - use STATUS_OPEN when event is known to be actively ongoing
	//   - use STATUS_SUPPRESSED when event should be suppressed
	//   - use STATUS_CLOSED when the event is known to have subsided
	Status Status `protobuf:"varint,13,opt,name=status,proto3,enum=events.Status" json:"status,omitempty"`
	// acknowledged explicitly sets the events acknowledged state.
	Acknowledged         *wrappers.BoolValue `protobuf:"bytes,14,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_60109942d2706896, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetDimensions() map[string]*common.Scalar {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Event) GetMetadata() map[string]*common.ScalarArray {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Event) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Event) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_SEVERITY_DEFAULT
}

func (m *Event) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_DEFAULT
}

func (m *Event) GetAcknowledged() *wrappers.BoolValue {
	if m != nil {
		return m.Acknowledged
	}
	return nil
}

func init() {
	proto.RegisterEnum("events.Severity", Severity_name, Severity_value)
	proto.RegisterEnum("events.Status", Status_name, Status_value)
	proto.RegisterType((*Event)(nil), "events.Event")
	proto.RegisterMapType((map[string]*common.Scalar)(nil), "events.Event.DimensionsEntry")
	proto.RegisterMapType((map[string]*common.ScalarArray)(nil), "events.Event.MetadataEntry")
}

func init() {
	proto.RegisterFile("zenoss/zing/proto/event/event.proto", fileDescriptor_60109942d2706896)
}

var fileDescriptor_60109942d2706896 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x6d, 0x6f, 0xd3, 0x30,
	0x10, 0x26, 0x7d, 0xc9, 0xba, 0xeb, 0xd6, 0x79, 0xd6, 0x40, 0xa6, 0x03, 0x54, 0x01, 0x42, 0x65,
	0x82, 0x44, 0x2b, 0x1f, 0x40, 0x48, 0x20, 0x75, 0x5b, 0x36, 0x75, 0x1a, 0x6d, 0xe5, 0xb4, 0x9d,
	0xe0, 0x0b, 0x72, 0x1b, 0x13, 0xa2, 0x35, 0x71, 0x95, 0xb8, 0x9d, 0xb2, 0x5f, 0xc0, 0x6f, 0xe5,
	0x57, 0xa0, 0xd8, 0x69, 0x69, 0x61, 0x5f, 0xa2, 0xbb, 0xe7, 0x9e, 0xe7, 0x7c, 0xb9, 0x17, 0x78,
	0x71, 0xc7, 0x23, 0x91, 0x24, 0xf6, 0x5d, 0x10, 0xf9, 0xf6, 0x2c, 0x16, 0x52, 0xd8, 0x7c, 0xc1,
	0x23, 0xa9, 0xbf, 0x96, 0x42, 0xb0, 0xa9, 0x9c, 0xa4, 0xfe, 0xf2, 0x7f, 0xf2, 0x64, 0x2a, 0xe6,
	0x9e, 0x9d, 0x4c, 0xd8, 0x94, 0xc5, 0x9a, 0x5d, 0x7f, 0xe6, 0x0b, 0xe1, 0x4f, 0xb9, 0x26, 0x8c,
	0xe7, 0x3f, 0xec, 0xdb, 0x98, 0xcd, 0x66, 0x3c, 0x4e, 0x74, 0xfc, 0xf9, 0xef, 0x12, 0x94, 0x9d,
	0x2c, 0x21, 0xae, 0x41, 0x21, 0xf0, 0x88, 0xd1, 0x30, 0x9a, 0xdb, 0xb4, 0x10, 0x78, 0xf8, 0x11,
	0x98, 0x92, 0x47, 0x2c, 0x92, 0xa4, 0xa0, 0xb0, 0xdc, 0xc3, 0x4f, 0x60, 0x5b, 0x06, 0x21, 0x4f,
	0x24, 0x0b, 0x67, 0xa4, 0xd8, 0x30, 0x9a, 0x45, 0xfa, 0x17, 0xc0, 0x18, 0x4a, 0x11, 0x0b, 0x39,
	0x29, 0x29, 0x8d, 0xb2, 0xf1, 0x27, 0x00, 0x2f, 0x08, 0x79, 0x94, 0x04, 0x22, 0x4a, 0xc8, 0x56,
	0xa3, 0xd8, 0xac, 0xb6, 0x9e, 0x5a, 0xfa, 0x37, 0x2c, 0xf5, 0xb8, 0x75, 0xb6, 0x8a, 0x3b, 0x91,
	0x8c, 0x53, 0xba, 0x26, 0xc0, 0xef, 0xa1, 0x12, 0x72, 0xc9, 0x3c, 0x26, 0x19, 0xa9, 0x28, 0xf1,
	0xe1, 0xa6, 0xf8, 0x4b, 0x1e, 0xd5, 0xd2, 0x15, 0x39, 0xab, 0x45, 0xa6, 0x33, 0x4e, 0xb6, 0x75,
	0x2d, 0x99, 0x8d, 0x09, 0x6c, 0x25, 0xf3, 0x30, 0x64, 0x71, 0x4a, 0x40, 0xc1, 0x4b, 0x37, 0x63,
	0x8f, 0x85, 0x97, 0x92, 0xaa, 0x66, 0x67, 0x36, 0x7e, 0x03, 0x95, 0x84, 0x2f, 0x78, 0x1c, 0xc8,
	0x94, 0xec, 0x34, 0x8c, 0x66, 0xad, 0x85, 0x96, 0x4f, 0xbb, 0x39, 0x4e, 0x57, 0x0c, 0xfc, 0x0a,
	0xcc, 0x44, 0x32, 0x39, 0x4f, 0xc8, 0xae, 0xe2, 0xd6, 0x56, 0x5c, 0x85, 0xd2, 0x3c, 0x8a, 0x3f,
	0xc3, 0x0e, 0x9b, 0xdc, 0x44, 0xe2, 0x76, 0xca, 0x3d, 0x9f, 0x7b, 0xa4, 0xd6, 0x30, 0x9a, 0xd5,
	0x56, 0xdd, 0xd2, 0xa3, 0xb2, 0x96, 0xa3, 0xb2, 0x4e, 0x84, 0x98, 0x8e, 0xd8, 0x74, 0xce, 0xe9,
	0x06, 0xbf, 0xee, 0xc2, 0xde, 0x3f, 0xfd, 0xc2, 0x08, 0x8a, 0x37, 0x3c, 0xcd, 0xa7, 0x97, 0x99,
	0xf8, 0x08, 0xca, 0x8b, 0x4c, 0xab, 0xa6, 0x57, 0x6d, 0x1d, 0x58, 0x7a, 0x5d, 0x2c, 0xb5, 0x23,
	0x96, 0xab, 0x76, 0x84, 0x6a, 0xca, 0xc7, 0xc2, 0x07, 0xa3, 0x3e, 0x82, 0xdd, 0x8d, 0x3e, 0xde,
	0x93, 0xd2, 0xde, 0x4c, 0xf9, 0xf8, 0xbe, 0x94, 0xed, 0x38, 0x66, 0xe9, 0x5a, 0xde, 0xcb, 0x52,
	0xa5, 0x8c, 0xcc, 0xcb, 0x52, 0xc5, 0x44, 0x5b, 0x47, 0xbf, 0x0c, 0xa8, 0x2c, 0xfb, 0x86, 0x0f,
	0x00, 0xb9, 0xce, 0xc8, 0xa1, 0x9d, 0xc1, 0xd7, 0xef, 0x67, 0xce, 0x79, 0x7b, 0x78, 0x35, 0x40,
	0x0f, 0x30, 0x86, 0xda, 0x1a, 0x7a, 0x32, 0xbc, 0x40, 0x06, 0xde, 0x87, 0xdd, 0x15, 0xd6, 0xe9,
	0x9e, 0xf7, 0x50, 0x61, 0x43, 0x7c, 0xdd, 0xa6, 0xdd, 0x4e, 0xf7, 0x02, 0x15, 0x37, 0xc4, 0x0e,
	0xa5, 0x3d, 0x8a, 0x4a, 0xf8, 0x21, 0xec, 0xaf, 0xb0, 0x53, 0xda, 0x19, 0x74, 0x4e, 0xdb, 0x57,
	0xa8, 0x7c, 0x74, 0x0d, 0xa6, 0x9e, 0x8a, 0x12, 0x0d, 0xda, 0x83, 0xa1, 0xbb, 0x56, 0xc5, 0x1e,
	0x54, 0x73, 0xac, 0xd7, 0x77, 0xba, 0xc8, 0x50, 0x59, 0x34, 0xe0, 0x0e, 0xfb, 0x7d, 0xea, 0xb8,
	0xae, 0x73, 0x86, 0x0a, 0xaa, 0x32, 0x0d, 0x9f, 0x5e, 0xf5, 0x32, 0xa8, 0x78, 0x72, 0x09, 0x87,
	0x22, 0xf6, 0x97, 0xad, 0xc9, 0x8e, 0x53, 0x0f, 0x54, 0xef, 0x42, 0xdf, 0xf8, 0xf6, 0xda, 0x0f,
	0xe4, 0xcf, 0xf9, 0xd8, 0x9a, 0x88, 0xd0, 0x5e, 0x3b, 0xe1, 0xb7, 0xfa, 0x84, 0x17, 0xc7, 0xc7,
	0xb6, 0x9f, 0x9f, 0xfd, 0xd8, 0x54, 0xd8, 0xbb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xae, 0x8e,
	0x16, 0x38, 0x18, 0x04, 0x00, 0x00,
}
