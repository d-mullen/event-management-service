// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/feature_flags.proto

package feature_flags

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureFlagsClient is the client API for FeatureFlags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagsClient interface {
	FeatureEnabled(ctx context.Context, in *FeatureEnabledRequest, opts ...grpc.CallOption) (*FeatureEnabledResponse, error)
	FeaturesEnabled(ctx context.Context, in *FeaturesEnabledRequest, opts ...grpc.CallOption) (*FeaturesEnabledResponse, error)
}

type featureFlagsClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagsClient(cc grpc.ClientConnInterface) FeatureFlagsClient {
	return &featureFlagsClient{cc}
}

func (c *featureFlagsClient) FeatureEnabled(ctx context.Context, in *FeatureEnabledRequest, opts ...grpc.CallOption) (*FeatureEnabledResponse, error) {
	out := new(FeatureEnabledResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.FeatureFlags/FeatureEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) FeaturesEnabled(ctx context.Context, in *FeaturesEnabledRequest, opts ...grpc.CallOption) (*FeaturesEnabledResponse, error) {
	out := new(FeaturesEnabledResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.FeatureFlags/FeaturesEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagsServer is the server API for FeatureFlags service.
// All implementations must embed UnimplementedFeatureFlagsServer
// for forward compatibility
type FeatureFlagsServer interface {
	FeatureEnabled(context.Context, *FeatureEnabledRequest) (*FeatureEnabledResponse, error)
	FeaturesEnabled(context.Context, *FeaturesEnabledRequest) (*FeaturesEnabledResponse, error)
	mustEmbedUnimplementedFeatureFlagsServer()
}

// UnimplementedFeatureFlagsServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureFlagsServer struct {
}

func (UnimplementedFeatureFlagsServer) FeatureEnabled(context.Context, *FeatureEnabledRequest) (*FeatureEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureEnabled not implemented")
}
func (UnimplementedFeatureFlagsServer) FeaturesEnabled(context.Context, *FeaturesEnabledRequest) (*FeaturesEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeaturesEnabled not implemented")
}
func (UnimplementedFeatureFlagsServer) mustEmbedUnimplementedFeatureFlagsServer() {}

// UnsafeFeatureFlagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagsServer will
// result in compilation errors.
type UnsafeFeatureFlagsServer interface {
	mustEmbedUnimplementedFeatureFlagsServer()
}

func RegisterFeatureFlagsServer(s grpc.ServiceRegistrar, srv FeatureFlagsServer) {
	s.RegisterService(&FeatureFlags_ServiceDesc, srv)
}

func _FeatureFlags_FeatureEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).FeatureEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.FeatureFlags/FeatureEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).FeatureEnabled(ctx, req.(*FeatureEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_FeaturesEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturesEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).FeaturesEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.FeatureFlags/FeaturesEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).FeaturesEnabled(ctx, req.(*FeaturesEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureFlags_ServiceDesc is the grpc.ServiceDesc for FeatureFlags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.FeatureFlags",
	HandlerType: (*FeatureFlagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeatureEnabled",
			Handler:    _FeatureFlags_FeatureEnabled_Handler,
		},
		{
			MethodName: "FeaturesEnabled",
			Handler:    _FeatureFlags_FeaturesEnabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/feature_flags.proto",
}
