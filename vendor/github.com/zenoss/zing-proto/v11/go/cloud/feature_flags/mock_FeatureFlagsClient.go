// Code generated by mockery v1.0.0. DO NOT EDIT.

package feature_flags

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureFlagsClient is an autogenerated mock type for the FeatureFlagsClient type
type MockFeatureFlagsClient struct {
	mock.Mock
}

// FeatureEnabled provides a mock function with given fields: ctx, in, opts
func (_m *MockFeatureFlagsClient) FeatureEnabled(ctx context.Context, in *FeatureEnabledRequest, opts ...grpc.CallOption) (*FeatureEnabledResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *FeatureEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeatureEnabledRequest, ...grpc.CallOption) *FeatureEnabledResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeatureEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeatureEnabledRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeaturesEnabled provides a mock function with given fields: ctx, in, opts
func (_m *MockFeatureFlagsClient) FeaturesEnabled(ctx context.Context, in *FeaturesEnabledRequest, opts ...grpc.CallOption) (*FeaturesEnabledResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *FeaturesEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeaturesEnabledRequest, ...grpc.CallOption) *FeaturesEnabledResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeaturesEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeaturesEnabledRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
