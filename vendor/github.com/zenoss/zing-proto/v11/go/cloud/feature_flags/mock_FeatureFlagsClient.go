// Code generated by mockery v2.12.2. DO NOT EDIT.

package feature_flags

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockFeatureFlagsClient is an autogenerated mock type for the FeatureFlagsClient type
type MockFeatureFlagsClient struct {
	mock.Mock
}

type MockFeatureFlagsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureFlagsClient) EXPECT() *MockFeatureFlagsClient_Expecter {
	return &MockFeatureFlagsClient_Expecter{mock: &_m.Mock}
}

// FeatureEnabled provides a mock function with given fields: ctx, in, opts
func (_m *MockFeatureFlagsClient) FeatureEnabled(ctx context.Context, in *FeatureEnabledRequest, opts ...grpc.CallOption) (*FeatureEnabledResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *FeatureEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeatureEnabledRequest, ...grpc.CallOption) *FeatureEnabledResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeatureEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeatureEnabledRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureFlagsClient_FeatureEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureEnabled'
type MockFeatureFlagsClient_FeatureEnabled_Call struct {
	*mock.Call
}

// FeatureEnabled is a helper method to define mock.On call
//  - ctx context.Context
//  - in *FeatureEnabledRequest
//  - opts ...grpc.CallOption
func (_e *MockFeatureFlagsClient_Expecter) FeatureEnabled(ctx interface{}, in interface{}, opts ...interface{}) *MockFeatureFlagsClient_FeatureEnabled_Call {
	return &MockFeatureFlagsClient_FeatureEnabled_Call{Call: _e.mock.On("FeatureEnabled",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeatureFlagsClient_FeatureEnabled_Call) Run(run func(ctx context.Context, in *FeatureEnabledRequest, opts ...grpc.CallOption)) *MockFeatureFlagsClient_FeatureEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*FeatureEnabledRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeatureFlagsClient_FeatureEnabled_Call) Return(_a0 *FeatureEnabledResponse, _a1 error) *MockFeatureFlagsClient_FeatureEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FeaturesEnabled provides a mock function with given fields: ctx, in, opts
func (_m *MockFeatureFlagsClient) FeaturesEnabled(ctx context.Context, in *FeaturesEnabledRequest, opts ...grpc.CallOption) (*FeaturesEnabledResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *FeaturesEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeaturesEnabledRequest, ...grpc.CallOption) *FeaturesEnabledResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeaturesEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeaturesEnabledRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureFlagsClient_FeaturesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeaturesEnabled'
type MockFeatureFlagsClient_FeaturesEnabled_Call struct {
	*mock.Call
}

// FeaturesEnabled is a helper method to define mock.On call
//  - ctx context.Context
//  - in *FeaturesEnabledRequest
//  - opts ...grpc.CallOption
func (_e *MockFeatureFlagsClient_Expecter) FeaturesEnabled(ctx interface{}, in interface{}, opts ...interface{}) *MockFeatureFlagsClient_FeaturesEnabled_Call {
	return &MockFeatureFlagsClient_FeaturesEnabled_Call{Call: _e.mock.On("FeaturesEnabled",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeatureFlagsClient_FeaturesEnabled_Call) Run(run func(ctx context.Context, in *FeaturesEnabledRequest, opts ...grpc.CallOption)) *MockFeatureFlagsClient_FeaturesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*FeaturesEnabledRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeatureFlagsClient_FeaturesEnabled_Call) Return(_a0 *FeaturesEnabledResponse, _a1 error) *MockFeatureFlagsClient_FeaturesEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockFeatureFlagsClient creates a new instance of MockFeatureFlagsClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFeatureFlagsClient(t testing.TB) *MockFeatureFlagsClient {
	mock := &MockFeatureFlagsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
