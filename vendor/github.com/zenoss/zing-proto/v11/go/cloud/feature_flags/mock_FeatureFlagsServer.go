// Code generated by mockery v1.0.0. DO NOT EDIT.

package feature_flags

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureFlagsServer is an autogenerated mock type for the FeatureFlagsServer type
type MockFeatureFlagsServer struct {
	mock.Mock
}

// FeatureEnabled provides a mock function with given fields: _a0, _a1
func (_m *MockFeatureFlagsServer) FeatureEnabled(_a0 context.Context, _a1 *FeatureEnabledRequest) (*FeatureEnabledResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *FeatureEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeatureEnabledRequest) *FeatureEnabledResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeatureEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeatureEnabledRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeaturesEnabled provides a mock function with given fields: _a0, _a1
func (_m *MockFeatureFlagsServer) FeaturesEnabled(_a0 context.Context, _a1 *FeaturesEnabledRequest) (*FeaturesEnabledResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *FeaturesEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeaturesEnabledRequest) *FeaturesEnabledResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeaturesEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeaturesEnabledRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
