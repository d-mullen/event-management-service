// Code generated by mockery v2.12.2. DO NOT EDIT.

package feature_flags

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockFeatureFlagsServer is an autogenerated mock type for the FeatureFlagsServer type
type MockFeatureFlagsServer struct {
	mock.Mock
}

type MockFeatureFlagsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeatureFlagsServer) EXPECT() *MockFeatureFlagsServer_Expecter {
	return &MockFeatureFlagsServer_Expecter{mock: &_m.Mock}
}

// FeatureEnabled provides a mock function with given fields: _a0, _a1
func (_m *MockFeatureFlagsServer) FeatureEnabled(_a0 context.Context, _a1 *FeatureEnabledRequest) (*FeatureEnabledResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *FeatureEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeatureEnabledRequest) *FeatureEnabledResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeatureEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeatureEnabledRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureFlagsServer_FeatureEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureEnabled'
type MockFeatureFlagsServer_FeatureEnabled_Call struct {
	*mock.Call
}

// FeatureEnabled is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *FeatureEnabledRequest
func (_e *MockFeatureFlagsServer_Expecter) FeatureEnabled(_a0 interface{}, _a1 interface{}) *MockFeatureFlagsServer_FeatureEnabled_Call {
	return &MockFeatureFlagsServer_FeatureEnabled_Call{Call: _e.mock.On("FeatureEnabled", _a0, _a1)}
}

func (_c *MockFeatureFlagsServer_FeatureEnabled_Call) Run(run func(_a0 context.Context, _a1 *FeatureEnabledRequest)) *MockFeatureFlagsServer_FeatureEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*FeatureEnabledRequest))
	})
	return _c
}

func (_c *MockFeatureFlagsServer_FeatureEnabled_Call) Return(_a0 *FeatureEnabledResponse, _a1 error) *MockFeatureFlagsServer_FeatureEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FeaturesEnabled provides a mock function with given fields: _a0, _a1
func (_m *MockFeatureFlagsServer) FeaturesEnabled(_a0 context.Context, _a1 *FeaturesEnabledRequest) (*FeaturesEnabledResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *FeaturesEnabledResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FeaturesEnabledRequest) *FeaturesEnabledResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeaturesEnabledResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FeaturesEnabledRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeatureFlagsServer_FeaturesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeaturesEnabled'
type MockFeatureFlagsServer_FeaturesEnabled_Call struct {
	*mock.Call
}

// FeaturesEnabled is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *FeaturesEnabledRequest
func (_e *MockFeatureFlagsServer_Expecter) FeaturesEnabled(_a0 interface{}, _a1 interface{}) *MockFeatureFlagsServer_FeaturesEnabled_Call {
	return &MockFeatureFlagsServer_FeaturesEnabled_Call{Call: _e.mock.On("FeaturesEnabled", _a0, _a1)}
}

func (_c *MockFeatureFlagsServer_FeaturesEnabled_Call) Run(run func(_a0 context.Context, _a1 *FeaturesEnabledRequest)) *MockFeatureFlagsServer_FeaturesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*FeaturesEnabledRequest))
	})
	return _c
}

func (_c *MockFeatureFlagsServer_FeaturesEnabled_Call) Return(_a0 *FeaturesEnabledResponse, _a1 error) *MockFeatureFlagsServer_FeaturesEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockFeatureFlagsServer creates a new instance of MockFeatureFlagsServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFeatureFlagsServer(t testing.TB) *MockFeatureFlagsServer {
	mock := &MockFeatureFlagsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
