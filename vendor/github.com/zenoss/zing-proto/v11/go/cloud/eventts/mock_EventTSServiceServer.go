// Code generated by mockery v2.14.0. DO NOT EDIT.

package eventts

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventTSServiceServer is an autogenerated mock type for the EventTSServiceServer type
type MockEventTSServiceServer struct {
	mock.Mock
}

type MockEventTSServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventTSServiceServer) EXPECT() *MockEventTSServiceServer_Expecter {
	return &MockEventTSServiceServer_Expecter{mock: &_m.Mock}
}

// EventsWithCountsStream provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) EventsWithCountsStream(_a0 *EventsWithCountsRequest, _a1 EventTSService_EventsWithCountsStreamServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*EventsWithCountsRequest, EventTSService_EventsWithCountsStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventTSServiceServer_EventsWithCountsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsWithCountsStream'
type MockEventTSServiceServer_EventsWithCountsStream_Call struct {
	*mock.Call
}

// EventsWithCountsStream is a helper method to define mock.On call
//  - _a0 *EventsWithCountsRequest
//  - _a1 EventTSService_EventsWithCountsStreamServer
func (_e *MockEventTSServiceServer_Expecter) EventsWithCountsStream(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_EventsWithCountsStream_Call {
	return &MockEventTSServiceServer_EventsWithCountsStream_Call{Call: _e.mock.On("EventsWithCountsStream", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_EventsWithCountsStream_Call) Run(run func(_a0 *EventsWithCountsRequest, _a1 EventTSService_EventsWithCountsStreamServer)) *MockEventTSServiceServer_EventsWithCountsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*EventsWithCountsRequest), args[1].(EventTSService_EventsWithCountsStreamServer))
	})
	return _c
}

func (_c *MockEventTSServiceServer_EventsWithCountsStream_Call) Return(_a0 error) *MockEventTSServiceServer_EventsWithCountsStream_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetEventCounts provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) GetEventCounts(_a0 context.Context, _a1 *EventTSCountsRequest) (*EventTSCountsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventTSCountsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSCountsRequest) *EventTSCountsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventTSCountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSCountsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceServer_GetEventCounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventCounts'
type MockEventTSServiceServer_GetEventCounts_Call struct {
	*mock.Call
}

// GetEventCounts is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventTSCountsRequest
func (_e *MockEventTSServiceServer_Expecter) GetEventCounts(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_GetEventCounts_Call {
	return &MockEventTSServiceServer_GetEventCounts_Call{Call: _e.mock.On("GetEventCounts", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_GetEventCounts_Call) Run(run func(_a0 context.Context, _a1 *EventTSCountsRequest)) *MockEventTSServiceServer_GetEventCounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventTSCountsRequest))
	})
	return _c
}

func (_c *MockEventTSServiceServer_GetEventCounts_Call) Return(_a0 *EventTSCountsResponse, _a1 error) *MockEventTSServiceServer_GetEventCounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventCountsStream provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) GetEventCountsStream(_a0 *EventTSCountsRequest, _a1 EventTSService_GetEventCountsStreamServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*EventTSCountsRequest, EventTSService_GetEventCountsStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventTSServiceServer_GetEventCountsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventCountsStream'
type MockEventTSServiceServer_GetEventCountsStream_Call struct {
	*mock.Call
}

// GetEventCountsStream is a helper method to define mock.On call
//  - _a0 *EventTSCountsRequest
//  - _a1 EventTSService_GetEventCountsStreamServer
func (_e *MockEventTSServiceServer_Expecter) GetEventCountsStream(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_GetEventCountsStream_Call {
	return &MockEventTSServiceServer_GetEventCountsStream_Call{Call: _e.mock.On("GetEventCountsStream", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_GetEventCountsStream_Call) Run(run func(_a0 *EventTSCountsRequest, _a1 EventTSService_GetEventCountsStreamServer)) *MockEventTSServiceServer_GetEventCountsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*EventTSCountsRequest), args[1].(EventTSService_GetEventCountsStreamServer))
	})
	return _c
}

func (_c *MockEventTSServiceServer_GetEventCountsStream_Call) Return(_a0 error) *MockEventTSServiceServer_GetEventCountsStream_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetEventFrequency provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) GetEventFrequency(_a0 context.Context, _a1 *EventTSFrequencyRequest) (*EventTSFrequencyResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventTSFrequencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSFrequencyRequest) *EventTSFrequencyResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventTSFrequencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSFrequencyRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceServer_GetEventFrequency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventFrequency'
type MockEventTSServiceServer_GetEventFrequency_Call struct {
	*mock.Call
}

// GetEventFrequency is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventTSFrequencyRequest
func (_e *MockEventTSServiceServer_Expecter) GetEventFrequency(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_GetEventFrequency_Call {
	return &MockEventTSServiceServer_GetEventFrequency_Call{Call: _e.mock.On("GetEventFrequency", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_GetEventFrequency_Call) Run(run func(_a0 context.Context, _a1 *EventTSFrequencyRequest)) *MockEventTSServiceServer_GetEventFrequency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventTSFrequencyRequest))
	})
	return _c
}

func (_c *MockEventTSServiceServer_GetEventFrequency_Call) Return(_a0 *EventTSFrequencyResponse, _a1 error) *MockEventTSServiceServer_GetEventFrequency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEvents provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) GetEvents(_a0 context.Context, _a1 *EventTSRequest) (*EventTSResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventTSResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSRequest) *EventTSResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventTSResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceServer_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockEventTSServiceServer_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventTSRequest
func (_e *MockEventTSServiceServer_Expecter) GetEvents(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_GetEvents_Call {
	return &MockEventTSServiceServer_GetEvents_Call{Call: _e.mock.On("GetEvents", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_GetEvents_Call) Run(run func(_a0 context.Context, _a1 *EventTSRequest)) *MockEventTSServiceServer_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventTSRequest))
	})
	return _c
}

func (_c *MockEventTSServiceServer_GetEvents_Call) Return(_a0 *EventTSResponse, _a1 error) *MockEventTSServiceServer_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventsStream provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) GetEventsStream(_a0 *EventTSRequest, _a1 EventTSService_GetEventsStreamServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*EventTSRequest, EventTSService_GetEventsStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventTSServiceServer_GetEventsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsStream'
type MockEventTSServiceServer_GetEventsStream_Call struct {
	*mock.Call
}

// GetEventsStream is a helper method to define mock.On call
//  - _a0 *EventTSRequest
//  - _a1 EventTSService_GetEventsStreamServer
func (_e *MockEventTSServiceServer_Expecter) GetEventsStream(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_GetEventsStream_Call {
	return &MockEventTSServiceServer_GetEventsStream_Call{Call: _e.mock.On("GetEventsStream", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_GetEventsStream_Call) Run(run func(_a0 *EventTSRequest, _a1 EventTSService_GetEventsStreamServer)) *MockEventTSServiceServer_GetEventsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*EventTSRequest), args[1].(EventTSService_GetEventsStreamServer))
	})
	return _c
}

func (_c *MockEventTSServiceServer_GetEventsStream_Call) Return(_a0 error) *MockEventTSServiceServer_GetEventsStream_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetRawEvents provides a mock function with given fields: _a0, _a1
func (_m *MockEventTSServiceServer) GetRawEvents(_a0 context.Context, _a1 *EventTSRequest) (*RawEventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RawEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSRequest) *RawEventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RawEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceServer_GetRawEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawEvents'
type MockEventTSServiceServer_GetRawEvents_Call struct {
	*mock.Call
}

// GetRawEvents is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventTSRequest
func (_e *MockEventTSServiceServer_Expecter) GetRawEvents(_a0 interface{}, _a1 interface{}) *MockEventTSServiceServer_GetRawEvents_Call {
	return &MockEventTSServiceServer_GetRawEvents_Call{Call: _e.mock.On("GetRawEvents", _a0, _a1)}
}

func (_c *MockEventTSServiceServer_GetRawEvents_Call) Run(run func(_a0 context.Context, _a1 *EventTSRequest)) *MockEventTSServiceServer_GetRawEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventTSRequest))
	})
	return _c
}

func (_c *MockEventTSServiceServer_GetRawEvents_Call) Return(_a0 *RawEventsResponse, _a1 error) *MockEventTSServiceServer_GetRawEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// mustEmbedUnimplementedEventTSServiceServer provides a mock function with given fields:
func (_m *MockEventTSServiceServer) mustEmbedUnimplementedEventTSServiceServer() {
	_m.Called()
}

// MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedEventTSServiceServer'
type MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedEventTSServiceServer is a helper method to define mock.On call
func (_e *MockEventTSServiceServer_Expecter) mustEmbedUnimplementedEventTSServiceServer() *MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call {
	return &MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedEventTSServiceServer")}
}

func (_c *MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call) Run(run func()) *MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call) Return() *MockEventTSServiceServer_mustEmbedUnimplementedEventTSServiceServer_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEventTSServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventTSServiceServer creates a new instance of MockEventTSServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventTSServiceServer(t mockConstructorTestingTNewMockEventTSServiceServer) *MockEventTSServiceServer {
	mock := &MockEventTSServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
