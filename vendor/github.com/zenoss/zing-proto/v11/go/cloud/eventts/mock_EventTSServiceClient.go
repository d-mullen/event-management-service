// Code generated by mockery v2.12.2. DO NOT EDIT.

package eventts

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockEventTSServiceClient is an autogenerated mock type for the EventTSServiceClient type
type MockEventTSServiceClient struct {
	mock.Mock
}

type MockEventTSServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventTSServiceClient) EXPECT() *MockEventTSServiceClient_Expecter {
	return &MockEventTSServiceClient_Expecter{mock: &_m.Mock}
}

// EventsWithCountsStream provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventTSService_EventsWithCountsStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 EventTSService_EventsWithCountsStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, *EventsWithCountsRequest, ...grpc.CallOption) EventTSService_EventsWithCountsStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventTSService_EventsWithCountsStreamClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventsWithCountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_EventsWithCountsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsWithCountsStream'
type MockEventTSServiceClient_EventsWithCountsStream_Call struct {
	*mock.Call
}

// EventsWithCountsStream is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventsWithCountsRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) EventsWithCountsStream(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_EventsWithCountsStream_Call {
	return &MockEventTSServiceClient_EventsWithCountsStream_Call{Call: _e.mock.On("EventsWithCountsStream",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_EventsWithCountsStream_Call) Run(run func(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_EventsWithCountsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventsWithCountsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_EventsWithCountsStream_Call) Return(_a0 EventTSService_EventsWithCountsStreamClient, _a1 error) *MockEventTSServiceClient_EventsWithCountsStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventCounts provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) GetEventCounts(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (*EventTSCountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *EventTSCountsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSCountsRequest, ...grpc.CallOption) *EventTSCountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventTSCountsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSCountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_GetEventCounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventCounts'
type MockEventTSServiceClient_GetEventCounts_Call struct {
	*mock.Call
}

// GetEventCounts is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventTSCountsRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) GetEventCounts(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_GetEventCounts_Call {
	return &MockEventTSServiceClient_GetEventCounts_Call{Call: _e.mock.On("GetEventCounts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_GetEventCounts_Call) Run(run func(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_GetEventCounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventTSCountsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_GetEventCounts_Call) Return(_a0 *EventTSCountsResponse, _a1 error) *MockEventTSServiceClient_GetEventCounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventCountsStream provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) GetEventCountsStream(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (EventTSService_GetEventCountsStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 EventTSService_GetEventCountsStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSCountsRequest, ...grpc.CallOption) EventTSService_GetEventCountsStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventTSService_GetEventCountsStreamClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSCountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_GetEventCountsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventCountsStream'
type MockEventTSServiceClient_GetEventCountsStream_Call struct {
	*mock.Call
}

// GetEventCountsStream is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventTSCountsRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) GetEventCountsStream(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_GetEventCountsStream_Call {
	return &MockEventTSServiceClient_GetEventCountsStream_Call{Call: _e.mock.On("GetEventCountsStream",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_GetEventCountsStream_Call) Run(run func(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_GetEventCountsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventTSCountsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_GetEventCountsStream_Call) Return(_a0 EventTSService_GetEventCountsStreamClient, _a1 error) *MockEventTSServiceClient_GetEventCountsStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventFrequency provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) GetEventFrequency(ctx context.Context, in *EventTSFrequencyRequest, opts ...grpc.CallOption) (*EventTSFrequencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *EventTSFrequencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSFrequencyRequest, ...grpc.CallOption) *EventTSFrequencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventTSFrequencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSFrequencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_GetEventFrequency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventFrequency'
type MockEventTSServiceClient_GetEventFrequency_Call struct {
	*mock.Call
}

// GetEventFrequency is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventTSFrequencyRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) GetEventFrequency(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_GetEventFrequency_Call {
	return &MockEventTSServiceClient_GetEventFrequency_Call{Call: _e.mock.On("GetEventFrequency",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_GetEventFrequency_Call) Run(run func(ctx context.Context, in *EventTSFrequencyRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_GetEventFrequency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventTSFrequencyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_GetEventFrequency_Call) Return(_a0 *EventTSFrequencyResponse, _a1 error) *MockEventTSServiceClient_GetEventFrequency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEvents provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) GetEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*EventTSResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *EventTSResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSRequest, ...grpc.CallOption) *EventTSResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventTSResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockEventTSServiceClient_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventTSRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) GetEvents(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_GetEvents_Call {
	return &MockEventTSServiceClient_GetEvents_Call{Call: _e.mock.On("GetEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_GetEvents_Call) Run(run func(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventTSRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_GetEvents_Call) Return(_a0 *EventTSResponse, _a1 error) *MockEventTSServiceClient_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventsStream provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) GetEventsStream(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (EventTSService_GetEventsStreamClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 EventTSService_GetEventsStreamClient
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSRequest, ...grpc.CallOption) EventTSService_GetEventsStreamClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventTSService_GetEventsStreamClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_GetEventsStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsStream'
type MockEventTSServiceClient_GetEventsStream_Call struct {
	*mock.Call
}

// GetEventsStream is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventTSRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) GetEventsStream(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_GetEventsStream_Call {
	return &MockEventTSServiceClient_GetEventsStream_Call{Call: _e.mock.On("GetEventsStream",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_GetEventsStream_Call) Run(run func(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_GetEventsStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventTSRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_GetEventsStream_Call) Return(_a0 EventTSService_GetEventsStreamClient, _a1 error) *MockEventTSServiceClient_GetEventsStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRawEvents provides a mock function with given fields: ctx, in, opts
func (_m *MockEventTSServiceClient) GetRawEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*RawEventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RawEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventTSRequest, ...grpc.CallOption) *RawEventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RawEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventTSRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventTSServiceClient_GetRawEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawEvents'
type MockEventTSServiceClient_GetRawEvents_Call struct {
	*mock.Call
}

// GetRawEvents is a helper method to define mock.On call
//  - ctx context.Context
//  - in *EventTSRequest
//  - opts ...grpc.CallOption
func (_e *MockEventTSServiceClient_Expecter) GetRawEvents(ctx interface{}, in interface{}, opts ...interface{}) *MockEventTSServiceClient_GetRawEvents_Call {
	return &MockEventTSServiceClient_GetRawEvents_Call{Call: _e.mock.On("GetRawEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockEventTSServiceClient_GetRawEvents_Call) Run(run func(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption)) *MockEventTSServiceClient_GetRawEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*EventTSRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockEventTSServiceClient_GetRawEvents_Call) Return(_a0 *RawEventsResponse, _a1 error) *MockEventTSServiceClient_GetRawEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockEventTSServiceClient creates a new instance of MockEventTSServiceClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventTSServiceClient(t testing.TB) *MockEventTSServiceClient {
	mock := &MockEventTSServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
