// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zenoss/zing/proto/cloud/event_ts.proto

package eventts

import (
	context "context"
	common "github.com/zenoss/zing-proto/v11/go/cloud/common"
	yamr "github.com/zenoss/zing-proto/v11/go/cloud/yamr"
	event "github.com/zenoss/zing-proto/v11/go/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventTSOccurrenceCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Occurrences []*EventTSOccurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
}

func (x *EventTSOccurrenceCollection) Reset() {
	*x = EventTSOccurrenceCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSOccurrenceCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSOccurrenceCollection) ProtoMessage() {}

func (x *EventTSOccurrenceCollection) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSOccurrenceCollection.ProtoReflect.Descriptor instead.
func (*EventTSOccurrenceCollection) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{0}
}

func (x *EventTSOccurrenceCollection) GetOccurrences() []*EventTSOccurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

type EventTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventIds  []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Fields we want in our result. If omitted, results will include predetermined information
	ResultFields []string `protobuf:"bytes,3,rep,name=result_fields,json=resultFields,proto3" json:"result_fields,omitempty"`
	// count of event instances to return in the time series
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// A collection of occurrences grouped by their associated eventID
	OccurrenceMap map[string]*EventTSOccurrenceCollection `protobuf:"bytes,5,rep,name=occurrence_map,json=occurrenceMap,proto3" json:"occurrence_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Filters       []*EventTSFilter                        `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *EventTSRequest) Reset() {
	*x = EventTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSRequest) ProtoMessage() {}

func (x *EventTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSRequest.ProtoReflect.Descriptor instead.
func (*EventTSRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{1}
}

func (x *EventTSRequest) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *EventTSRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventTSRequest) GetResultFields() []string {
	if x != nil {
		return x.ResultFields
	}
	return nil
}

func (x *EventTSRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventTSRequest) GetOccurrenceMap() map[string]*EventTSOccurrenceCollection {
	if x != nil {
		return x.OccurrenceMap
	}
	return nil
}

func (x *EventTSRequest) GetFilters() []*EventTSFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type EventTSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*EventTSResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *EventTSResponse) Reset() {
	*x = EventTSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSResponse) ProtoMessage() {}

func (x *EventTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSResponse.ProtoReflect.Descriptor instead.
func (*EventTSResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{2}
}

func (x *EventTSResponse) GetResults() []*EventTSResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type RawEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*RawEventsResponse_EventsCollection `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RawEventsResponse) Reset() {
	*x = RawEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawEventsResponse) ProtoMessage() {}

func (x *RawEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawEventsResponse.ProtoReflect.Descriptor instead.
func (*RawEventsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{3}
}

func (x *RawEventsResponse) GetResults() map[string]*RawEventsResponse_EventsCollection {
	if x != nil {
		return x.Results
	}
	return nil
}

type EventTSField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64                          `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // ms
	Data      map[string]*common.ScalarArray `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventTSField) Reset() {
	*x = EventTSField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSField) ProtoMessage() {}

func (x *EventTSField) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSField.ProtoReflect.Descriptor instead.
func (*EventTSField) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{4}
}

func (x *EventTSField) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventTSField) GetData() map[string]*common.ScalarArray {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventTSOccurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// true --> a closed status has not yet been received for this occurrence
	IsActive      bool  `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	InstanceCount int64 `protobuf:"varint,4,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
}

func (x *EventTSOccurrence) Reset() {
	*x = EventTSOccurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSOccurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSOccurrence) ProtoMessage() {}

func (x *EventTSOccurrence) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSOccurrence.ProtoReflect.Descriptor instead.
func (*EventTSOccurrence) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{5}
}

func (x *EventTSOccurrence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventTSOccurrence) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventTSOccurrence) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *EventTSOccurrence) GetInstanceCount() int64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

type EventTSSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common fields
	EventId      string                    `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OccurrenceId string                    `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
	Name         string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Tenant       string                    `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Dimensions   map[string]*common.Scalar `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count        int64                     `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// datapoint specific fields
	Values []*EventTSField `protobuf:"bytes,7,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *EventTSSeries) Reset() {
	*x = EventTSSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSSeries) ProtoMessage() {}

func (x *EventTSSeries) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSSeries.ProtoReflect.Descriptor instead.
func (*EventTSSeries) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{6}
}

func (x *EventTSSeries) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventTSSeries) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

func (x *EventTSSeries) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventTSSeries) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *EventTSSeries) GetDimensions() map[string]*common.Scalar {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *EventTSSeries) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventTSSeries) GetValues() []*EventTSField {
	if x != nil {
		return x.Values
	}
	return nil
}

type EventTSResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series        []*EventTSSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	PartialSeries []*EventTSSeries `protobuf:"bytes,2,rep,name=partial_series,json=partialSeries,proto3" json:"partial_series,omitempty"`
}

func (x *EventTSResult) Reset() {
	*x = EventTSResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSResult) ProtoMessage() {}

func (x *EventTSResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSResult.ProtoReflect.Descriptor instead.
func (*EventTSResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{7}
}

func (x *EventTSResult) GetSeries() []*EventTSSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *EventTSResult) GetPartialSeries() []*EventTSSeries {
	if x != nil {
		return x.PartialSeries
	}
	return nil
}

type EventTSFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string              `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Values    *common.ScalarArray `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	Op        common.Operation    `protobuf:"varint,3,opt,name=op,proto3,enum=zenoss.cloud.Operation" json:"op,omitempty"`
}

func (x *EventTSFilter) Reset() {
	*x = EventTSFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSFilter) ProtoMessage() {}

func (x *EventTSFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSFilter.ProtoReflect.Descriptor instead.
func (*EventTSFilter) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{8}
}

func (x *EventTSFilter) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *EventTSFilter) GetValues() *common.ScalarArray {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *EventTSFilter) GetOp() common.Operation {
	if x != nil {
		return x.Op
	}
	return common.Operation_OP_EXISTS
}

type EventTSCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventIds  []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// The field we want counts by value.
	Field         string                                  `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Filters       []*EventTSFilter                        `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	OccurrenceMap map[string]*EventTSOccurrenceCollection `protobuf:"bytes,5,rep,name=occurrence_map,json=occurrenceMap,proto3" json:"occurrence_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// get occurrence count only
	OccurrenceCount bool `protobuf:"varint,6,opt,name=occurrence_count,json=occurrenceCount,proto3" json:"occurrence_count,omitempty"`
}

func (x *EventTSCountsRequest) Reset() {
	*x = EventTSCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSCountsRequest) ProtoMessage() {}

func (x *EventTSCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSCountsRequest.ProtoReflect.Descriptor instead.
func (*EventTSCountsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{9}
}

func (x *EventTSCountsRequest) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *EventTSCountsRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventTSCountsRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *EventTSCountsRequest) GetFilters() []*EventTSFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *EventTSCountsRequest) GetOccurrenceMap() map[string]*EventTSOccurrenceCollection {
	if x != nil {
		return x.OccurrenceMap
	}
	return nil
}

func (x *EventTSCountsRequest) GetOccurrenceCount() bool {
	if x != nil {
		return x.OccurrenceCount
	}
	return false
}

type EventTSCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Count int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EventTSCount) Reset() {
	*x = EventTSCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSCount) ProtoMessage() {}

func (x *EventTSCount) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSCount.ProtoReflect.Descriptor instead.
func (*EventTSCount) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{10}
}

func (x *EventTSCount) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventTSCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type EventTSCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Counts []*EventTSCount `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *EventTSCountsResponse) Reset() {
	*x = EventTSCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSCountsResponse) ProtoMessage() {}

func (x *EventTSCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSCountsResponse.ProtoReflect.Descriptor instead.
func (*EventTSCountsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{11}
}

func (x *EventTSCountsResponse) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *EventTSCountsResponse) GetCounts() []*EventTSCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

type EventTSFrequencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventIds      []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange     *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Fields        []*yamr.Field     `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupBy       []*yamr.Field     `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Downsample    int64             `protobuf:"varint,5,opt,name=downsample,proto3" json:"downsample,omitempty"`
	PersistCounts bool              `protobuf:"varint,6,opt,name=persist_counts,json=persistCounts,proto3" json:"persist_counts,omitempty"`
	Filters       []*EventTSFilter  `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *EventTSFrequencyRequest) Reset() {
	*x = EventTSFrequencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSFrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSFrequencyRequest) ProtoMessage() {}

func (x *EventTSFrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSFrequencyRequest.ProtoReflect.Descriptor instead.
func (*EventTSFrequencyRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{12}
}

func (x *EventTSFrequencyRequest) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *EventTSFrequencyRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventTSFrequencyRequest) GetFields() []*yamr.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *EventTSFrequencyRequest) GetGroupBy() []*yamr.Field {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *EventTSFrequencyRequest) GetDownsample() int64 {
	if x != nil {
		return x.Downsample
	}
	return 0
}

func (x *EventTSFrequencyRequest) GetPersistCounts() bool {
	if x != nil {
		return x.PersistCounts
	}
	return false
}

func (x *EventTSFrequencyRequest) GetFilters() []*EventTSFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type EventTSFrequencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []int64                            `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Results    []*EventTSFrequencyResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *EventTSFrequencyResponse) Reset() {
	*x = EventTSFrequencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSFrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSFrequencyResponse) ProtoMessage() {}

func (x *EventTSFrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSFrequencyResponse.ProtoReflect.Descriptor instead.
func (*EventTSFrequencyResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{13}
}

func (x *EventTSFrequencyResponse) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *EventTSFrequencyResponse) GetResults() []*EventTSFrequencyResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type EventsWithCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventIds  []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// A collection of occurrences grouped by their associated eventID
	OccurrenceMap   map[string]*EventTSOccurrenceCollection    `protobuf:"bytes,3,rep,name=occurrence_map,json=occurrenceMap,proto3" json:"occurrence_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EventParams     *EventsWithCountsRequest_EventsParams      `protobuf:"bytes,4,opt,name=event_params,json=eventParams,proto3" json:"event_params,omitempty"`
	CountsParams    *EventsWithCountsRequest_CountsParams      `protobuf:"bytes,5,opt,name=counts_params,json=countsParams,proto3" json:"counts_params,omitempty"`
	FrequencyParams []*EventsWithCountsRequest_FrequencyParams `protobuf:"bytes,6,rep,name=frequency_params,json=frequencyParams,proto3" json:"frequency_params,omitempty"`
	Limit           int64                                      `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Filters         []*EventTSFilter                           `protobuf:"bytes,8,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *EventsWithCountsRequest) Reset() {
	*x = EventsWithCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest) ProtoMessage() {}

func (x *EventsWithCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{14}
}

func (x *EventsWithCountsRequest) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

func (x *EventsWithCountsRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventsWithCountsRequest) GetOccurrenceMap() map[string]*EventTSOccurrenceCollection {
	if x != nil {
		return x.OccurrenceMap
	}
	return nil
}

func (x *EventsWithCountsRequest) GetEventParams() *EventsWithCountsRequest_EventsParams {
	if x != nil {
		return x.EventParams
	}
	return nil
}

func (x *EventsWithCountsRequest) GetCountsParams() *EventsWithCountsRequest_CountsParams {
	if x != nil {
		return x.CountsParams
	}
	return nil
}

func (x *EventsWithCountsRequest) GetFrequencyParams() []*EventsWithCountsRequest_FrequencyParams {
	if x != nil {
		return x.FrequencyParams
	}
	return nil
}

func (x *EventsWithCountsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *EventsWithCountsRequest) GetFilters() []*EventTSFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type EventsWithCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results         []*EventTSResult                            `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	CountsResult    *EventsWithCountsResponse_CountsResult      `protobuf:"bytes,2,opt,name=counts_result,json=countsResult,proto3" json:"counts_result,omitempty"`
	FrequencyResult []*EventsWithCountsResponse_FrequencyResult `protobuf:"bytes,3,rep,name=frequency_result,json=frequencyResult,proto3" json:"frequency_result,omitempty"`
}

func (x *EventsWithCountsResponse) Reset() {
	*x = EventsWithCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse) ProtoMessage() {}

func (x *EventsWithCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{15}
}

func (x *EventsWithCountsResponse) GetResults() []*EventTSResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *EventsWithCountsResponse) GetCountsResult() *EventsWithCountsResponse_CountsResult {
	if x != nil {
		return x.CountsResult
	}
	return nil
}

func (x *EventsWithCountsResponse) GetFrequencyResult() []*EventsWithCountsResponse_FrequencyResult {
	if x != nil {
		return x.FrequencyResult
	}
	return nil
}

type RawEventsResponse_EventsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*event.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RawEventsResponse_EventsCollection) Reset() {
	*x = RawEventsResponse_EventsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawEventsResponse_EventsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawEventsResponse_EventsCollection) ProtoMessage() {}

func (x *RawEventsResponse_EventsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawEventsResponse_EventsCollection.ProtoReflect.Descriptor instead.
func (*RawEventsResponse_EventsCollection) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RawEventsResponse_EventsCollection) GetEvents() []*event.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type EventTSFrequencyResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    map[string]*common.Scalar `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values []int64                   `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *EventTSFrequencyResponse_Result) Reset() {
	*x = EventTSFrequencyResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTSFrequencyResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTSFrequencyResponse_Result) ProtoMessage() {}

func (x *EventTSFrequencyResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTSFrequencyResponse_Result.ProtoReflect.Descriptor instead.
func (*EventTSFrequencyResponse_Result) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{13, 0}
}

func (x *EventTSFrequencyResponse_Result) GetKey() map[string]*common.Scalar {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventTSFrequencyResponse_Result) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type EventsWithCountsRequest_EventsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields we want in our result. If omitted, results will include predetermined information
	ResultFields []string `protobuf:"bytes,1,rep,name=result_fields,json=resultFields,proto3" json:"result_fields,omitempty"`
}

func (x *EventsWithCountsRequest_EventsParams) Reset() {
	*x = EventsWithCountsRequest_EventsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest_EventsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest_EventsParams) ProtoMessage() {}

func (x *EventsWithCountsRequest_EventsParams) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest_EventsParams.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest_EventsParams) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{14, 1}
}

func (x *EventsWithCountsRequest_EventsParams) GetResultFields() []string {
	if x != nil {
		return x.ResultFields
	}
	return nil
}

type EventsWithCountsRequest_CountsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *yamr.Field `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *EventsWithCountsRequest_CountsParams) Reset() {
	*x = EventsWithCountsRequest_CountsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest_CountsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest_CountsParams) ProtoMessage() {}

func (x *EventsWithCountsRequest_CountsParams) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest_CountsParams.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest_CountsParams) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{14, 2}
}

func (x *EventsWithCountsRequest_CountsParams) GetField() *yamr.Field {
	if x != nil {
		return x.Field
	}
	return nil
}

type EventsWithCountsRequest_FrequencyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields        []*yamr.Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupBy       []*yamr.Field `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Downsample    int64         `protobuf:"varint,3,opt,name=downsample,proto3" json:"downsample,omitempty"`
	PersistCounts bool          `protobuf:"varint,4,opt,name=persist_counts,json=persistCounts,proto3" json:"persist_counts,omitempty"`
}

func (x *EventsWithCountsRequest_FrequencyParams) Reset() {
	*x = EventsWithCountsRequest_FrequencyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest_FrequencyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest_FrequencyParams) ProtoMessage() {}

func (x *EventsWithCountsRequest_FrequencyParams) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest_FrequencyParams.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest_FrequencyParams) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{14, 3}
}

func (x *EventsWithCountsRequest_FrequencyParams) GetFields() []*yamr.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *EventsWithCountsRequest_FrequencyParams) GetGroupBy() []*yamr.Field {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *EventsWithCountsRequest_FrequencyParams) GetDownsample() int64 {
	if x != nil {
		return x.Downsample
	}
	return 0
}

func (x *EventsWithCountsRequest_FrequencyParams) GetPersistCounts() bool {
	if x != nil {
		return x.PersistCounts
	}
	return false
}

type EventsWithCountsResponse_CountsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Counts []*EventTSCount `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *EventsWithCountsResponse_CountsResult) Reset() {
	*x = EventsWithCountsResponse_CountsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse_CountsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse_CountsResult) ProtoMessage() {}

func (x *EventsWithCountsResponse_CountsResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse_CountsResult.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse_CountsResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{15, 0}
}

func (x *EventsWithCountsResponse_CountsResult) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *EventsWithCountsResponse_CountsResult) GetCounts() []*EventTSCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

type EventsWithCountsResponse_FrequencyKVs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    map[string]*common.Scalar `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values []int64                   `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *EventsWithCountsResponse_FrequencyKVs) Reset() {
	*x = EventsWithCountsResponse_FrequencyKVs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse_FrequencyKVs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse_FrequencyKVs) ProtoMessage() {}

func (x *EventsWithCountsResponse_FrequencyKVs) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse_FrequencyKVs.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse_FrequencyKVs) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{15, 1}
}

func (x *EventsWithCountsResponse_FrequencyKVs) GetKey() map[string]*common.Scalar {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventsWithCountsResponse_FrequencyKVs) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type EventsWithCountsResponse_FrequencyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []int64                                  `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Results    []*EventsWithCountsResponse_FrequencyKVs `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *EventsWithCountsResponse_FrequencyResult) Reset() {
	*x = EventsWithCountsResponse_FrequencyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse_FrequencyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse_FrequencyResult) ProtoMessage() {}

func (x *EventsWithCountsResponse_FrequencyResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse_FrequencyResult.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse_FrequencyResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP(), []int{15, 2}
}

func (x *EventsWithCountsResponse_FrequencyResult) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *EventsWithCountsResponse_FrequencyResult) GetResults() []*EventsWithCountsResponse_FrequencyKVs {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_zenoss_zing_proto_cloud_event_ts_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_event_ts_proto_rawDesc = []byte{
	0x0a, 0x26, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x23, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f,
	0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x60, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x9c, 0x03, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x35, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x6b, 0x0a, 0x12, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x53, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x84, 0x02,
	0x0a, 0x11, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x10, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x52, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x53, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xae, 0x03, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x5c, 0x0a, 0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x6b, 0x0a, 0x12, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x17,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x53, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xb8, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x07, 0x0a, 0x17, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x6b, 0x0a, 0x12, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x33, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xb2,
	0x05, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x10,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a,
	0x58, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x0c, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x56, 0x73, 0x12, 0x4e, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x56, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x80, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x56, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x32, 0x88, 0x05, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x53, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x61, 0x77,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5a,
	0x0a, 0x23, 0x6f, 0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_event_ts_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_event_ts_proto_rawDescData = file_zenoss_zing_proto_cloud_event_ts_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_event_ts_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_event_ts_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_event_ts_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_event_ts_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_event_ts_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_zenoss_zing_proto_cloud_event_ts_proto_goTypes = []interface{}{
	(*EventTSOccurrenceCollection)(nil),        // 0: zenoss.cloud.EventTSOccurrenceCollection
	(*EventTSRequest)(nil),                     // 1: zenoss.cloud.EventTSRequest
	(*EventTSResponse)(nil),                    // 2: zenoss.cloud.EventTSResponse
	(*RawEventsResponse)(nil),                  // 3: zenoss.cloud.RawEventsResponse
	(*EventTSField)(nil),                       // 4: zenoss.cloud.EventTSField
	(*EventTSOccurrence)(nil),                  // 5: zenoss.cloud.EventTSOccurrence
	(*EventTSSeries)(nil),                      // 6: zenoss.cloud.EventTSSeries
	(*EventTSResult)(nil),                      // 7: zenoss.cloud.EventTSResult
	(*EventTSFilter)(nil),                      // 8: zenoss.cloud.EventTSFilter
	(*EventTSCountsRequest)(nil),               // 9: zenoss.cloud.EventTSCountsRequest
	(*EventTSCount)(nil),                       // 10: zenoss.cloud.EventTSCount
	(*EventTSCountsResponse)(nil),              // 11: zenoss.cloud.EventTSCountsResponse
	(*EventTSFrequencyRequest)(nil),            // 12: zenoss.cloud.EventTSFrequencyRequest
	(*EventTSFrequencyResponse)(nil),           // 13: zenoss.cloud.EventTSFrequencyResponse
	(*EventsWithCountsRequest)(nil),            // 14: zenoss.cloud.EventsWithCountsRequest
	(*EventsWithCountsResponse)(nil),           // 15: zenoss.cloud.EventsWithCountsResponse
	nil,                                        // 16: zenoss.cloud.EventTSRequest.OccurrenceMapEntry
	(*RawEventsResponse_EventsCollection)(nil), // 17: zenoss.cloud.RawEventsResponse.EventsCollection
	nil,                                     // 18: zenoss.cloud.RawEventsResponse.ResultsEntry
	nil,                                     // 19: zenoss.cloud.EventTSField.DataEntry
	nil,                                     // 20: zenoss.cloud.EventTSSeries.DimensionsEntry
	nil,                                     // 21: zenoss.cloud.EventTSCountsRequest.OccurrenceMapEntry
	(*EventTSFrequencyResponse_Result)(nil), // 22: zenoss.cloud.EventTSFrequencyResponse.Result
	nil,                                     // 23: zenoss.cloud.EventTSFrequencyResponse.Result.KeyEntry
	nil,                                     // 24: zenoss.cloud.EventsWithCountsRequest.OccurrenceMapEntry
	(*EventsWithCountsRequest_EventsParams)(nil),     // 25: zenoss.cloud.EventsWithCountsRequest.EventsParams
	(*EventsWithCountsRequest_CountsParams)(nil),     // 26: zenoss.cloud.EventsWithCountsRequest.CountsParams
	(*EventsWithCountsRequest_FrequencyParams)(nil),  // 27: zenoss.cloud.EventsWithCountsRequest.FrequencyParams
	(*EventsWithCountsResponse_CountsResult)(nil),    // 28: zenoss.cloud.EventsWithCountsResponse.CountsResult
	(*EventsWithCountsResponse_FrequencyKVs)(nil),    // 29: zenoss.cloud.EventsWithCountsResponse.FrequencyKVs
	(*EventsWithCountsResponse_FrequencyResult)(nil), // 30: zenoss.cloud.EventsWithCountsResponse.FrequencyResult
	nil,                        // 31: zenoss.cloud.EventsWithCountsResponse.FrequencyKVs.KeyEntry
	(*common.TimeRange)(nil),   // 32: zenoss.cloud.TimeRange
	(*common.ScalarArray)(nil), // 33: zenoss.cloud.ScalarArray
	(common.Operation)(0),      // 34: zenoss.cloud.Operation
	(*common.Scalar)(nil),      // 35: zenoss.cloud.Scalar
	(*yamr.Field)(nil),         // 36: zenoss.cloud.Field
	(*event.Event)(nil),        // 37: events.Event
}
var file_zenoss_zing_proto_cloud_event_ts_proto_depIdxs = []int32{
	5,  // 0: zenoss.cloud.EventTSOccurrenceCollection.occurrences:type_name -> zenoss.cloud.EventTSOccurrence
	32, // 1: zenoss.cloud.EventTSRequest.time_range:type_name -> zenoss.cloud.TimeRange
	16, // 2: zenoss.cloud.EventTSRequest.occurrence_map:type_name -> zenoss.cloud.EventTSRequest.OccurrenceMapEntry
	8,  // 3: zenoss.cloud.EventTSRequest.filters:type_name -> zenoss.cloud.EventTSFilter
	7,  // 4: zenoss.cloud.EventTSResponse.results:type_name -> zenoss.cloud.EventTSResult
	18, // 5: zenoss.cloud.RawEventsResponse.results:type_name -> zenoss.cloud.RawEventsResponse.ResultsEntry
	19, // 6: zenoss.cloud.EventTSField.data:type_name -> zenoss.cloud.EventTSField.DataEntry
	32, // 7: zenoss.cloud.EventTSOccurrence.time_range:type_name -> zenoss.cloud.TimeRange
	20, // 8: zenoss.cloud.EventTSSeries.dimensions:type_name -> zenoss.cloud.EventTSSeries.DimensionsEntry
	4,  // 9: zenoss.cloud.EventTSSeries.values:type_name -> zenoss.cloud.EventTSField
	6,  // 10: zenoss.cloud.EventTSResult.series:type_name -> zenoss.cloud.EventTSSeries
	6,  // 11: zenoss.cloud.EventTSResult.partial_series:type_name -> zenoss.cloud.EventTSSeries
	33, // 12: zenoss.cloud.EventTSFilter.values:type_name -> zenoss.cloud.ScalarArray
	34, // 13: zenoss.cloud.EventTSFilter.op:type_name -> zenoss.cloud.Operation
	32, // 14: zenoss.cloud.EventTSCountsRequest.time_range:type_name -> zenoss.cloud.TimeRange
	8,  // 15: zenoss.cloud.EventTSCountsRequest.filters:type_name -> zenoss.cloud.EventTSFilter
	21, // 16: zenoss.cloud.EventTSCountsRequest.occurrence_map:type_name -> zenoss.cloud.EventTSCountsRequest.OccurrenceMapEntry
	35, // 17: zenoss.cloud.EventTSCount.value:type_name -> zenoss.cloud.Scalar
	10, // 18: zenoss.cloud.EventTSCountsResponse.counts:type_name -> zenoss.cloud.EventTSCount
	32, // 19: zenoss.cloud.EventTSFrequencyRequest.time_range:type_name -> zenoss.cloud.TimeRange
	36, // 20: zenoss.cloud.EventTSFrequencyRequest.fields:type_name -> zenoss.cloud.Field
	36, // 21: zenoss.cloud.EventTSFrequencyRequest.group_by:type_name -> zenoss.cloud.Field
	8,  // 22: zenoss.cloud.EventTSFrequencyRequest.filters:type_name -> zenoss.cloud.EventTSFilter
	22, // 23: zenoss.cloud.EventTSFrequencyResponse.results:type_name -> zenoss.cloud.EventTSFrequencyResponse.Result
	32, // 24: zenoss.cloud.EventsWithCountsRequest.time_range:type_name -> zenoss.cloud.TimeRange
	24, // 25: zenoss.cloud.EventsWithCountsRequest.occurrence_map:type_name -> zenoss.cloud.EventsWithCountsRequest.OccurrenceMapEntry
	25, // 26: zenoss.cloud.EventsWithCountsRequest.event_params:type_name -> zenoss.cloud.EventsWithCountsRequest.EventsParams
	26, // 27: zenoss.cloud.EventsWithCountsRequest.counts_params:type_name -> zenoss.cloud.EventsWithCountsRequest.CountsParams
	27, // 28: zenoss.cloud.EventsWithCountsRequest.frequency_params:type_name -> zenoss.cloud.EventsWithCountsRequest.FrequencyParams
	8,  // 29: zenoss.cloud.EventsWithCountsRequest.filters:type_name -> zenoss.cloud.EventTSFilter
	7,  // 30: zenoss.cloud.EventsWithCountsResponse.results:type_name -> zenoss.cloud.EventTSResult
	28, // 31: zenoss.cloud.EventsWithCountsResponse.counts_result:type_name -> zenoss.cloud.EventsWithCountsResponse.CountsResult
	30, // 32: zenoss.cloud.EventsWithCountsResponse.frequency_result:type_name -> zenoss.cloud.EventsWithCountsResponse.FrequencyResult
	0,  // 33: zenoss.cloud.EventTSRequest.OccurrenceMapEntry.value:type_name -> zenoss.cloud.EventTSOccurrenceCollection
	37, // 34: zenoss.cloud.RawEventsResponse.EventsCollection.events:type_name -> events.Event
	17, // 35: zenoss.cloud.RawEventsResponse.ResultsEntry.value:type_name -> zenoss.cloud.RawEventsResponse.EventsCollection
	33, // 36: zenoss.cloud.EventTSField.DataEntry.value:type_name -> zenoss.cloud.ScalarArray
	35, // 37: zenoss.cloud.EventTSSeries.DimensionsEntry.value:type_name -> zenoss.cloud.Scalar
	0,  // 38: zenoss.cloud.EventTSCountsRequest.OccurrenceMapEntry.value:type_name -> zenoss.cloud.EventTSOccurrenceCollection
	23, // 39: zenoss.cloud.EventTSFrequencyResponse.Result.key:type_name -> zenoss.cloud.EventTSFrequencyResponse.Result.KeyEntry
	35, // 40: zenoss.cloud.EventTSFrequencyResponse.Result.KeyEntry.value:type_name -> zenoss.cloud.Scalar
	0,  // 41: zenoss.cloud.EventsWithCountsRequest.OccurrenceMapEntry.value:type_name -> zenoss.cloud.EventTSOccurrenceCollection
	36, // 42: zenoss.cloud.EventsWithCountsRequest.CountsParams.field:type_name -> zenoss.cloud.Field
	36, // 43: zenoss.cloud.EventsWithCountsRequest.FrequencyParams.fields:type_name -> zenoss.cloud.Field
	36, // 44: zenoss.cloud.EventsWithCountsRequest.FrequencyParams.group_by:type_name -> zenoss.cloud.Field
	10, // 45: zenoss.cloud.EventsWithCountsResponse.CountsResult.counts:type_name -> zenoss.cloud.EventTSCount
	31, // 46: zenoss.cloud.EventsWithCountsResponse.FrequencyKVs.key:type_name -> zenoss.cloud.EventsWithCountsResponse.FrequencyKVs.KeyEntry
	29, // 47: zenoss.cloud.EventsWithCountsResponse.FrequencyResult.results:type_name -> zenoss.cloud.EventsWithCountsResponse.FrequencyKVs
	35, // 48: zenoss.cloud.EventsWithCountsResponse.FrequencyKVs.KeyEntry.value:type_name -> zenoss.cloud.Scalar
	1,  // 49: zenoss.cloud.EventTSService.GetEvents:input_type -> zenoss.cloud.EventTSRequest
	1,  // 50: zenoss.cloud.EventTSService.GetEventsStream:input_type -> zenoss.cloud.EventTSRequest
	9,  // 51: zenoss.cloud.EventTSService.GetEventCounts:input_type -> zenoss.cloud.EventTSCountsRequest
	9,  // 52: zenoss.cloud.EventTSService.GetEventCountsStream:input_type -> zenoss.cloud.EventTSCountsRequest
	12, // 53: zenoss.cloud.EventTSService.GetEventFrequency:input_type -> zenoss.cloud.EventTSFrequencyRequest
	14, // 54: zenoss.cloud.EventTSService.EventsWithCountsStream:input_type -> zenoss.cloud.EventsWithCountsRequest
	1,  // 55: zenoss.cloud.EventTSService.GetRawEvents:input_type -> zenoss.cloud.EventTSRequest
	2,  // 56: zenoss.cloud.EventTSService.GetEvents:output_type -> zenoss.cloud.EventTSResponse
	2,  // 57: zenoss.cloud.EventTSService.GetEventsStream:output_type -> zenoss.cloud.EventTSResponse
	11, // 58: zenoss.cloud.EventTSService.GetEventCounts:output_type -> zenoss.cloud.EventTSCountsResponse
	11, // 59: zenoss.cloud.EventTSService.GetEventCountsStream:output_type -> zenoss.cloud.EventTSCountsResponse
	13, // 60: zenoss.cloud.EventTSService.GetEventFrequency:output_type -> zenoss.cloud.EventTSFrequencyResponse
	15, // 61: zenoss.cloud.EventTSService.EventsWithCountsStream:output_type -> zenoss.cloud.EventsWithCountsResponse
	3,  // 62: zenoss.cloud.EventTSService.GetRawEvents:output_type -> zenoss.cloud.RawEventsResponse
	56, // [56:63] is the sub-list for method output_type
	49, // [49:56] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_event_ts_proto_init() }
func file_zenoss_zing_proto_cloud_event_ts_proto_init() {
	if File_zenoss_zing_proto_cloud_event_ts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSOccurrenceCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSOccurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSFrequencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSFrequencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawEventsResponse_EventsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTSFrequencyResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest_EventsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest_CountsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest_FrequencyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse_CountsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse_FrequencyKVs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse_FrequencyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_event_ts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_event_ts_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_event_ts_proto_depIdxs,
		MessageInfos:      file_zenoss_zing_proto_cloud_event_ts_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_event_ts_proto = out.File
	file_zenoss_zing_proto_cloud_event_ts_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_event_ts_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_event_ts_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventTSServiceClient is the client API for EventTSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventTSServiceClient interface {
	GetEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*EventTSResponse, error)
	GetEventsStream(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (EventTSService_GetEventsStreamClient, error)
	GetEventCounts(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (*EventTSCountsResponse, error)
	GetEventCountsStream(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (EventTSService_GetEventCountsStreamClient, error)
	GetEventFrequency(ctx context.Context, in *EventTSFrequencyRequest, opts ...grpc.CallOption) (*EventTSFrequencyResponse, error)
	EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventTSService_EventsWithCountsStreamClient, error)
	GetRawEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*RawEventsResponse, error)
}

type eventTSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTSServiceClient(cc grpc.ClientConnInterface) EventTSServiceClient {
	return &eventTSServiceClient{cc}
}

func (c *eventTSServiceClient) GetEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*EventTSResponse, error) {
	out := new(EventTSResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTSServiceClient) GetEventsStream(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (EventTSService_GetEventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventTSService_serviceDesc.Streams[0], "/zenoss.cloud.EventTSService/GetEventsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventTSServiceGetEventsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventTSService_GetEventsStreamClient interface {
	Recv() (*EventTSResponse, error)
	grpc.ClientStream
}

type eventTSServiceGetEventsStreamClient struct {
	grpc.ClientStream
}

func (x *eventTSServiceGetEventsStreamClient) Recv() (*EventTSResponse, error) {
	m := new(EventTSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventTSServiceClient) GetEventCounts(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (*EventTSCountsResponse, error) {
	out := new(EventTSCountsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetEventCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTSServiceClient) GetEventCountsStream(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (EventTSService_GetEventCountsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventTSService_serviceDesc.Streams[1], "/zenoss.cloud.EventTSService/GetEventCountsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventTSServiceGetEventCountsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventTSService_GetEventCountsStreamClient interface {
	Recv() (*EventTSCountsResponse, error)
	grpc.ClientStream
}

type eventTSServiceGetEventCountsStreamClient struct {
	grpc.ClientStream
}

func (x *eventTSServiceGetEventCountsStreamClient) Recv() (*EventTSCountsResponse, error) {
	m := new(EventTSCountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventTSServiceClient) GetEventFrequency(ctx context.Context, in *EventTSFrequencyRequest, opts ...grpc.CallOption) (*EventTSFrequencyResponse, error) {
	out := new(EventTSFrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetEventFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTSServiceClient) EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventTSService_EventsWithCountsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventTSService_serviceDesc.Streams[2], "/zenoss.cloud.EventTSService/EventsWithCountsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventTSServiceEventsWithCountsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventTSService_EventsWithCountsStreamClient interface {
	Recv() (*EventsWithCountsResponse, error)
	grpc.ClientStream
}

type eventTSServiceEventsWithCountsStreamClient struct {
	grpc.ClientStream
}

func (x *eventTSServiceEventsWithCountsStreamClient) Recv() (*EventsWithCountsResponse, error) {
	m := new(EventsWithCountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventTSServiceClient) GetRawEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*RawEventsResponse, error) {
	out := new(RawEventsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetRawEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTSServiceServer is the server API for EventTSService service.
type EventTSServiceServer interface {
	GetEvents(context.Context, *EventTSRequest) (*EventTSResponse, error)
	GetEventsStream(*EventTSRequest, EventTSService_GetEventsStreamServer) error
	GetEventCounts(context.Context, *EventTSCountsRequest) (*EventTSCountsResponse, error)
	GetEventCountsStream(*EventTSCountsRequest, EventTSService_GetEventCountsStreamServer) error
	GetEventFrequency(context.Context, *EventTSFrequencyRequest) (*EventTSFrequencyResponse, error)
	EventsWithCountsStream(*EventsWithCountsRequest, EventTSService_EventsWithCountsStreamServer) error
	GetRawEvents(context.Context, *EventTSRequest) (*RawEventsResponse, error)
}

// UnimplementedEventTSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventTSServiceServer struct {
}

func (*UnimplementedEventTSServiceServer) GetEvents(context.Context, *EventTSRequest) (*EventTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventsStream(*EventTSRequest, EventTSService_GetEventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventsStream not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventCounts(context.Context, *EventTSCountsRequest) (*EventTSCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventCounts not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventCountsStream(*EventTSCountsRequest, EventTSService_GetEventCountsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventCountsStream not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventFrequency(context.Context, *EventTSFrequencyRequest) (*EventTSFrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventFrequency not implemented")
}
func (*UnimplementedEventTSServiceServer) EventsWithCountsStream(*EventsWithCountsRequest, EventTSService_EventsWithCountsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsWithCountsStream not implemented")
}
func (*UnimplementedEventTSServiceServer) GetRawEvents(context.Context, *EventTSRequest) (*RawEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawEvents not implemented")
}

func RegisterEventTSServiceServer(s *grpc.Server, srv EventTSServiceServer) {
	s.RegisterService(&_EventTSService_serviceDesc, srv)
}

func _EventTSService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetEvents(ctx, req.(*EventTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTSService_GetEventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventTSRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTSServiceServer).GetEventsStream(m, &eventTSServiceGetEventsStreamServer{stream})
}

type EventTSService_GetEventsStreamServer interface {
	Send(*EventTSResponse) error
	grpc.ServerStream
}

type eventTSServiceGetEventsStreamServer struct {
	grpc.ServerStream
}

func (x *eventTSServiceGetEventsStreamServer) Send(m *EventTSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventTSService_GetEventCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetEventCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetEventCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetEventCounts(ctx, req.(*EventTSCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTSService_GetEventCountsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventTSCountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTSServiceServer).GetEventCountsStream(m, &eventTSServiceGetEventCountsStreamServer{stream})
}

type EventTSService_GetEventCountsStreamServer interface {
	Send(*EventTSCountsResponse) error
	grpc.ServerStream
}

type eventTSServiceGetEventCountsStreamServer struct {
	grpc.ServerStream
}

func (x *eventTSServiceGetEventCountsStreamServer) Send(m *EventTSCountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventTSService_GetEventFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetEventFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetEventFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetEventFrequency(ctx, req.(*EventTSFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTSService_EventsWithCountsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsWithCountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTSServiceServer).EventsWithCountsStream(m, &eventTSServiceEventsWithCountsStreamServer{stream})
}

type EventTSService_EventsWithCountsStreamServer interface {
	Send(*EventsWithCountsResponse) error
	grpc.ServerStream
}

type eventTSServiceEventsWithCountsStreamServer struct {
	grpc.ServerStream
}

func (x *eventTSServiceEventsWithCountsStreamServer) Send(m *EventsWithCountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventTSService_GetRawEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetRawEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetRawEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetRawEvents(ctx, req.(*EventTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventTSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventTSService",
	HandlerType: (*EventTSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _EventTSService_GetEvents_Handler,
		},
		{
			MethodName: "GetEventCounts",
			Handler:    _EventTSService_GetEventCounts_Handler,
		},
		{
			MethodName: "GetEventFrequency",
			Handler:    _EventTSService_GetEventFrequency_Handler,
		},
		{
			MethodName: "GetRawEvents",
			Handler:    _EventTSService_GetRawEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventsStream",
			Handler:       _EventTSService_GetEventsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventCountsStream",
			Handler:       _EventTSService_GetEventCountsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsWithCountsStream",
			Handler:       _EventTSService_EventsWithCountsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/event_ts.proto",
}
