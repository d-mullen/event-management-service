// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zenoss/zing/proto/cloud/event_ts.proto

package eventts

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/zenoss/zing-proto/v11/go/cloud/common"
	yamr "github.com/zenoss/zing-proto/v11/go/cloud/yamr"
	_ "github.com/zenoss/zing-proto/v11/go/query"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventTSRequest struct {
	EventIds  []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Fields we want in our result. If omitted, results will include predetermined information
	ResultFields []string `protobuf:"bytes,3,rep,name=result_fields,json=resultFields,proto3" json:"result_fields,omitempty"`
	// count of event instances to return in the time series
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// A collection of occurrences grouped by their associated eventID
	OccurrenceMap        map[string]*EventTSRequest_OccurrenceCollection `protobuf:"bytes,5,rep,name=occurrence_map,json=occurrenceMap,proto3" json:"occurrence_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                        `json:"-"`
	XXX_unrecognized     []byte                                          `json:"-"`
	XXX_sizecache        int32                                           `json:"-"`
}

func (m *EventTSRequest) Reset()         { *m = EventTSRequest{} }
func (m *EventTSRequest) String() string { return proto.CompactTextString(m) }
func (*EventTSRequest) ProtoMessage()    {}
func (*EventTSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{0}
}

func (m *EventTSRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSRequest.Unmarshal(m, b)
}
func (m *EventTSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSRequest.Marshal(b, m, deterministic)
}
func (m *EventTSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSRequest.Merge(m, src)
}
func (m *EventTSRequest) XXX_Size() int {
	return xxx_messageInfo_EventTSRequest.Size(m)
}
func (m *EventTSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSRequest proto.InternalMessageInfo

func (m *EventTSRequest) GetEventIds() []string {
	if m != nil {
		return m.EventIds
	}
	return nil
}

func (m *EventTSRequest) GetTimeRange() *common.TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *EventTSRequest) GetResultFields() []string {
	if m != nil {
		return m.ResultFields
	}
	return nil
}

func (m *EventTSRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EventTSRequest) GetOccurrenceMap() map[string]*EventTSRequest_OccurrenceCollection {
	if m != nil {
		return m.OccurrenceMap
	}
	return nil
}

type EventTSRequest_OccurrenceCollection struct {
	Occurrences          []*EventTSOccurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventTSRequest_OccurrenceCollection) Reset()         { *m = EventTSRequest_OccurrenceCollection{} }
func (m *EventTSRequest_OccurrenceCollection) String() string { return proto.CompactTextString(m) }
func (*EventTSRequest_OccurrenceCollection) ProtoMessage()    {}
func (*EventTSRequest_OccurrenceCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{0, 0}
}

func (m *EventTSRequest_OccurrenceCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSRequest_OccurrenceCollection.Unmarshal(m, b)
}
func (m *EventTSRequest_OccurrenceCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSRequest_OccurrenceCollection.Marshal(b, m, deterministic)
}
func (m *EventTSRequest_OccurrenceCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSRequest_OccurrenceCollection.Merge(m, src)
}
func (m *EventTSRequest_OccurrenceCollection) XXX_Size() int {
	return xxx_messageInfo_EventTSRequest_OccurrenceCollection.Size(m)
}
func (m *EventTSRequest_OccurrenceCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSRequest_OccurrenceCollection.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSRequest_OccurrenceCollection proto.InternalMessageInfo

func (m *EventTSRequest_OccurrenceCollection) GetOccurrences() []*EventTSOccurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

type EventTSResponse struct {
	Results              []*EventTSResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EventTSResponse) Reset()         { *m = EventTSResponse{} }
func (m *EventTSResponse) String() string { return proto.CompactTextString(m) }
func (*EventTSResponse) ProtoMessage()    {}
func (*EventTSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{1}
}

func (m *EventTSResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSResponse.Unmarshal(m, b)
}
func (m *EventTSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSResponse.Marshal(b, m, deterministic)
}
func (m *EventTSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSResponse.Merge(m, src)
}
func (m *EventTSResponse) XXX_Size() int {
	return xxx_messageInfo_EventTSResponse.Size(m)
}
func (m *EventTSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSResponse proto.InternalMessageInfo

func (m *EventTSResponse) GetResults() []*EventTSResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type EventTSField struct {
	Timestamp            int64                          `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 map[string]*common.ScalarArray `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *EventTSField) Reset()         { *m = EventTSField{} }
func (m *EventTSField) String() string { return proto.CompactTextString(m) }
func (*EventTSField) ProtoMessage()    {}
func (*EventTSField) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{2}
}

func (m *EventTSField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSField.Unmarshal(m, b)
}
func (m *EventTSField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSField.Marshal(b, m, deterministic)
}
func (m *EventTSField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSField.Merge(m, src)
}
func (m *EventTSField) XXX_Size() int {
	return xxx_messageInfo_EventTSField.Size(m)
}
func (m *EventTSField) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSField.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSField proto.InternalMessageInfo

func (m *EventTSField) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *EventTSField) GetData() map[string]*common.ScalarArray {
	if m != nil {
		return m.Data
	}
	return nil
}

type EventTSOccurrence struct {
	Id        string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// true --> a closed status has not yet been received for this occurrence
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTSOccurrence) Reset()         { *m = EventTSOccurrence{} }
func (m *EventTSOccurrence) String() string { return proto.CompactTextString(m) }
func (*EventTSOccurrence) ProtoMessage()    {}
func (*EventTSOccurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{3}
}

func (m *EventTSOccurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSOccurrence.Unmarshal(m, b)
}
func (m *EventTSOccurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSOccurrence.Marshal(b, m, deterministic)
}
func (m *EventTSOccurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSOccurrence.Merge(m, src)
}
func (m *EventTSOccurrence) XXX_Size() int {
	return xxx_messageInfo_EventTSOccurrence.Size(m)
}
func (m *EventTSOccurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSOccurrence.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSOccurrence proto.InternalMessageInfo

func (m *EventTSOccurrence) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventTSOccurrence) GetTimeRange() *common.TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *EventTSOccurrence) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type EventTSSeries struct {
	// common fields
	EventId      string                    `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OccurrenceId string                    `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
	Name         string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Tenant       string                    `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Dimensions   map[string]*common.Scalar `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count        int64                     `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// datapoint specific fields
	Values               []*EventTSField `protobuf:"bytes,7,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventTSSeries) Reset()         { *m = EventTSSeries{} }
func (m *EventTSSeries) String() string { return proto.CompactTextString(m) }
func (*EventTSSeries) ProtoMessage()    {}
func (*EventTSSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{4}
}

func (m *EventTSSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSSeries.Unmarshal(m, b)
}
func (m *EventTSSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSSeries.Marshal(b, m, deterministic)
}
func (m *EventTSSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSSeries.Merge(m, src)
}
func (m *EventTSSeries) XXX_Size() int {
	return xxx_messageInfo_EventTSSeries.Size(m)
}
func (m *EventTSSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSSeries.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSSeries proto.InternalMessageInfo

func (m *EventTSSeries) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventTSSeries) GetOccurrenceId() string {
	if m != nil {
		return m.OccurrenceId
	}
	return ""
}

func (m *EventTSSeries) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventTSSeries) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *EventTSSeries) GetDimensions() map[string]*common.Scalar {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *EventTSSeries) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EventTSSeries) GetValues() []*EventTSField {
	if m != nil {
		return m.Values
	}
	return nil
}

type EventTSResult struct {
	Series               []*EventTSSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	PartialSeries        []*EventTSSeries `protobuf:"bytes,2,rep,name=partial_series,json=partialSeries,proto3" json:"partial_series,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EventTSResult) Reset()         { *m = EventTSResult{} }
func (m *EventTSResult) String() string { return proto.CompactTextString(m) }
func (*EventTSResult) ProtoMessage()    {}
func (*EventTSResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{5}
}

func (m *EventTSResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSResult.Unmarshal(m, b)
}
func (m *EventTSResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSResult.Marshal(b, m, deterministic)
}
func (m *EventTSResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSResult.Merge(m, src)
}
func (m *EventTSResult) XXX_Size() int {
	return xxx_messageInfo_EventTSResult.Size(m)
}
func (m *EventTSResult) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSResult.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSResult proto.InternalMessageInfo

func (m *EventTSResult) GetSeries() []*EventTSSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *EventTSResult) GetPartialSeries() []*EventTSSeries {
	if m != nil {
		return m.PartialSeries
	}
	return nil
}

type EventTSCountsRequest struct {
	EventIds  []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// The field we want counts by value.
	Field                string   `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTSCountsRequest) Reset()         { *m = EventTSCountsRequest{} }
func (m *EventTSCountsRequest) String() string { return proto.CompactTextString(m) }
func (*EventTSCountsRequest) ProtoMessage()    {}
func (*EventTSCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{6}
}

func (m *EventTSCountsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSCountsRequest.Unmarshal(m, b)
}
func (m *EventTSCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSCountsRequest.Marshal(b, m, deterministic)
}
func (m *EventTSCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSCountsRequest.Merge(m, src)
}
func (m *EventTSCountsRequest) XXX_Size() int {
	return xxx_messageInfo_EventTSCountsRequest.Size(m)
}
func (m *EventTSCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSCountsRequest proto.InternalMessageInfo

func (m *EventTSCountsRequest) GetEventIds() []string {
	if m != nil {
		return m.EventIds
	}
	return nil
}

func (m *EventTSCountsRequest) GetTimeRange() *common.TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *EventTSCountsRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type EventTSCount struct {
	Value                *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Count                int64          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *EventTSCount) Reset()         { *m = EventTSCount{} }
func (m *EventTSCount) String() string { return proto.CompactTextString(m) }
func (*EventTSCount) ProtoMessage()    {}
func (*EventTSCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{7}
}

func (m *EventTSCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSCount.Unmarshal(m, b)
}
func (m *EventTSCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSCount.Marshal(b, m, deterministic)
}
func (m *EventTSCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSCount.Merge(m, src)
}
func (m *EventTSCount) XXX_Size() int {
	return xxx_messageInfo_EventTSCount.Size(m)
}
func (m *EventTSCount) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSCount.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSCount proto.InternalMessageInfo

func (m *EventTSCount) GetValue() *common.Scalar {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EventTSCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EventTSCountsResponse struct {
	Field                string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Counts               []*EventTSCount `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventTSCountsResponse) Reset()         { *m = EventTSCountsResponse{} }
func (m *EventTSCountsResponse) String() string { return proto.CompactTextString(m) }
func (*EventTSCountsResponse) ProtoMessage()    {}
func (*EventTSCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{8}
}

func (m *EventTSCountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSCountsResponse.Unmarshal(m, b)
}
func (m *EventTSCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSCountsResponse.Marshal(b, m, deterministic)
}
func (m *EventTSCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSCountsResponse.Merge(m, src)
}
func (m *EventTSCountsResponse) XXX_Size() int {
	return xxx_messageInfo_EventTSCountsResponse.Size(m)
}
func (m *EventTSCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSCountsResponse proto.InternalMessageInfo

func (m *EventTSCountsResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *EventTSCountsResponse) GetCounts() []*EventTSCount {
	if m != nil {
		return m.Counts
	}
	return nil
}

type EventTSFrequencyRequest struct {
	EventIds             []string          `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
	TimeRange            *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Fields               []*yamr.Field     `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupBy              []*yamr.Field     `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Downsample           int64             `protobuf:"varint,5,opt,name=downsample,proto3" json:"downsample,omitempty"`
	PersistCounts        bool              `protobuf:"varint,6,opt,name=persist_counts,json=persistCounts,proto3" json:"persist_counts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EventTSFrequencyRequest) Reset()         { *m = EventTSFrequencyRequest{} }
func (m *EventTSFrequencyRequest) String() string { return proto.CompactTextString(m) }
func (*EventTSFrequencyRequest) ProtoMessage()    {}
func (*EventTSFrequencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{9}
}

func (m *EventTSFrequencyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSFrequencyRequest.Unmarshal(m, b)
}
func (m *EventTSFrequencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSFrequencyRequest.Marshal(b, m, deterministic)
}
func (m *EventTSFrequencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSFrequencyRequest.Merge(m, src)
}
func (m *EventTSFrequencyRequest) XXX_Size() int {
	return xxx_messageInfo_EventTSFrequencyRequest.Size(m)
}
func (m *EventTSFrequencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSFrequencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSFrequencyRequest proto.InternalMessageInfo

func (m *EventTSFrequencyRequest) GetEventIds() []string {
	if m != nil {
		return m.EventIds
	}
	return nil
}

func (m *EventTSFrequencyRequest) GetTimeRange() *common.TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *EventTSFrequencyRequest) GetFields() []*yamr.Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *EventTSFrequencyRequest) GetGroupBy() []*yamr.Field {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *EventTSFrequencyRequest) GetDownsample() int64 {
	if m != nil {
		return m.Downsample
	}
	return 0
}

func (m *EventTSFrequencyRequest) GetPersistCounts() bool {
	if m != nil {
		return m.PersistCounts
	}
	return false
}

type EventTSFrequencyResponse struct {
	Timestamps           []int64                            `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Results              []*EventTSFrequencyResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *EventTSFrequencyResponse) Reset()         { *m = EventTSFrequencyResponse{} }
func (m *EventTSFrequencyResponse) String() string { return proto.CompactTextString(m) }
func (*EventTSFrequencyResponse) ProtoMessage()    {}
func (*EventTSFrequencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{10}
}

func (m *EventTSFrequencyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSFrequencyResponse.Unmarshal(m, b)
}
func (m *EventTSFrequencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSFrequencyResponse.Marshal(b, m, deterministic)
}
func (m *EventTSFrequencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSFrequencyResponse.Merge(m, src)
}
func (m *EventTSFrequencyResponse) XXX_Size() int {
	return xxx_messageInfo_EventTSFrequencyResponse.Size(m)
}
func (m *EventTSFrequencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSFrequencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSFrequencyResponse proto.InternalMessageInfo

func (m *EventTSFrequencyResponse) GetTimestamps() []int64 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *EventTSFrequencyResponse) GetResults() []*EventTSFrequencyResponse_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type EventTSFrequencyResponse_Result struct {
	Key                  map[string]*common.Scalar `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values               []int64                   `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *EventTSFrequencyResponse_Result) Reset()         { *m = EventTSFrequencyResponse_Result{} }
func (m *EventTSFrequencyResponse_Result) String() string { return proto.CompactTextString(m) }
func (*EventTSFrequencyResponse_Result) ProtoMessage()    {}
func (*EventTSFrequencyResponse_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_82e18cab2547e678, []int{10, 0}
}

func (m *EventTSFrequencyResponse_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTSFrequencyResponse_Result.Unmarshal(m, b)
}
func (m *EventTSFrequencyResponse_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTSFrequencyResponse_Result.Marshal(b, m, deterministic)
}
func (m *EventTSFrequencyResponse_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTSFrequencyResponse_Result.Merge(m, src)
}
func (m *EventTSFrequencyResponse_Result) XXX_Size() int {
	return xxx_messageInfo_EventTSFrequencyResponse_Result.Size(m)
}
func (m *EventTSFrequencyResponse_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTSFrequencyResponse_Result.DiscardUnknown(m)
}

var xxx_messageInfo_EventTSFrequencyResponse_Result proto.InternalMessageInfo

func (m *EventTSFrequencyResponse_Result) GetKey() map[string]*common.Scalar {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *EventTSFrequencyResponse_Result) GetValues() []int64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*EventTSRequest)(nil), "zenoss.cloud.EventTSRequest")
	proto.RegisterMapType((map[string]*EventTSRequest_OccurrenceCollection)(nil), "zenoss.cloud.EventTSRequest.OccurrenceMapEntry")
	proto.RegisterType((*EventTSRequest_OccurrenceCollection)(nil), "zenoss.cloud.EventTSRequest.OccurrenceCollection")
	proto.RegisterType((*EventTSResponse)(nil), "zenoss.cloud.EventTSResponse")
	proto.RegisterType((*EventTSField)(nil), "zenoss.cloud.EventTSField")
	proto.RegisterMapType((map[string]*common.ScalarArray)(nil), "zenoss.cloud.EventTSField.DataEntry")
	proto.RegisterType((*EventTSOccurrence)(nil), "zenoss.cloud.EventTSOccurrence")
	proto.RegisterType((*EventTSSeries)(nil), "zenoss.cloud.EventTSSeries")
	proto.RegisterMapType((map[string]*common.Scalar)(nil), "zenoss.cloud.EventTSSeries.DimensionsEntry")
	proto.RegisterType((*EventTSResult)(nil), "zenoss.cloud.EventTSResult")
	proto.RegisterType((*EventTSCountsRequest)(nil), "zenoss.cloud.EventTSCountsRequest")
	proto.RegisterType((*EventTSCount)(nil), "zenoss.cloud.EventTSCount")
	proto.RegisterType((*EventTSCountsResponse)(nil), "zenoss.cloud.EventTSCountsResponse")
	proto.RegisterType((*EventTSFrequencyRequest)(nil), "zenoss.cloud.EventTSFrequencyRequest")
	proto.RegisterType((*EventTSFrequencyResponse)(nil), "zenoss.cloud.EventTSFrequencyResponse")
	proto.RegisterType((*EventTSFrequencyResponse_Result)(nil), "zenoss.cloud.EventTSFrequencyResponse.Result")
	proto.RegisterMapType((map[string]*common.Scalar)(nil), "zenoss.cloud.EventTSFrequencyResponse.Result.KeyEntry")
}

func init() {
	proto.RegisterFile("zenoss/zing/proto/cloud/event_ts.proto", fileDescriptor_82e18cab2547e678)
}

var fileDescriptor_82e18cab2547e678 = []byte{
	// 1013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xd6, 0xae, 0x13, 0xc7, 0xfb, 0x3a, 0x76, 0xe8, 0x60, 0xda, 0xed, 0xa6, 0x14, 0x6b, 0xd3,
	0x56, 0x56, 0xab, 0xae, 0x1b, 0x57, 0x54, 0x15, 0xb7, 0xa4, 0x2d, 0x49, 0x55, 0x10, 0xd1, 0xb8,
	0x42, 0x6a, 0x2f, 0xd6, 0x64, 0x77, 0x30, 0x23, 0xbc, 0xbb, 0xee, 0xcc, 0xd8, 0xe0, 0xde, 0xb8,
	0x71, 0xe6, 0xd7, 0x20, 0x0e, 0x9c, 0x39, 0xf1, 0x37, 0xf8, 0x1b, 0x68, 0x67, 0x66, 0x3f, 0x9c,
	0xd8, 0x49, 0xa1, 0xf4, 0x62, 0x79, 0xde, 0x79, 0xde, 0xaf, 0xe7, 0xfd, 0xd8, 0x81, 0x3b, 0x6f,
	0x69, 0x92, 0x0a, 0xd1, 0x7f, 0xcb, 0x92, 0x71, 0x7f, 0xca, 0x53, 0x99, 0xf6, 0xc3, 0x49, 0x3a,
	0x8b, 0xfa, 0x74, 0x4e, 0x13, 0x39, 0x92, 0x22, 0x50, 0x42, 0xb4, 0xad, 0x71, 0x81, 0xba, 0xf4,
	0xee, 0xae, 0xd3, 0x7a, 0x33, 0xa3, 0x7c, 0x31, 0x0a, 0xd3, 0x38, 0x4e, 0x13, 0xad, 0xe9, 0xed,
	0x9d, 0xc7, 0x2a, 0x94, 0xfe, 0x35, 0xa0, 0x5b, 0xeb, 0x0c, 0x8a, 0x90, 0x4c, 0x08, 0x37, 0x28,
	0x7f, 0x1d, 0x6a, 0x41, 0x62, 0x83, 0xf1, 0xff, 0xac, 0x41, 0xfb, 0x59, 0x16, 0xfb, 0xcb, 0x21,
	0xa6, 0x6f, 0x66, 0x54, 0x48, 0xb4, 0x0b, 0x8e, 0xce, 0x86, 0x45, 0xc2, 0xb5, 0xba, 0xb5, 0x9e,
	0x83, 0x1b, 0x4a, 0xf0, 0x3c, 0x12, 0xe8, 0x11, 0x80, 0x64, 0x31, 0x1d, 0x71, 0x92, 0x8c, 0xa9,
	0x6b, 0x77, 0xad, 0x5e, 0x73, 0x70, 0x2d, 0xa8, 0x66, 0x1b, 0xbc, 0x64, 0x31, 0xc5, 0xd9, 0x35,
	0x76, 0x64, 0xfe, 0x17, 0xed, 0x41, 0x8b, 0x53, 0x31, 0x9b, 0xc8, 0xd1, 0x77, 0x8c, 0x4e, 0x22,
	0xe1, 0xd6, 0x94, 0xe1, 0x6d, 0x2d, 0xfc, 0x52, 0xc9, 0x50, 0x07, 0x36, 0xc3, 0x74, 0x96, 0x48,
	0x77, 0xa3, 0x6b, 0xf5, 0x6a, 0x58, 0x1f, 0xd0, 0xb7, 0xd0, 0x4e, 0xc3, 0x70, 0xc6, 0x39, 0x4d,
	0x42, 0x3a, 0x8a, 0xc9, 0xd4, 0xdd, 0xec, 0xd6, 0x7a, 0xcd, 0x41, 0x7f, 0xd9, 0xed, 0x72, 0x16,
	0xc1, 0x37, 0x85, 0xca, 0xd7, 0x64, 0xfa, 0x2c, 0x91, 0x7c, 0x81, 0x5b, 0x69, 0x55, 0xe6, 0xbd,
	0x82, 0x4e, 0x09, 0x7a, 0x92, 0x4e, 0x26, 0x34, 0x94, 0x2c, 0x4d, 0xd0, 0x01, 0x34, 0x4b, 0xa0,
	0x66, 0xa0, 0x39, 0xf8, 0x6c, 0xa5, 0xb3, 0x52, 0x1f, 0x57, 0x75, 0x3c, 0x01, 0xe8, 0xbc, 0x7f,
	0xf4, 0x11, 0xd4, 0x7e, 0xa0, 0x0b, 0xd7, 0xea, 0x5a, 0x3d, 0x07, 0x67, 0x7f, 0xd1, 0x11, 0x6c,
	0xce, 0xc9, 0x64, 0x96, 0x13, 0xb9, 0xff, 0x8e, 0x19, 0x95, 0xc1, 0x62, 0xad, 0xff, 0x85, 0xfd,
	0xd8, 0xf2, 0x8f, 0x61, 0xa7, 0xd0, 0x10, 0xd3, 0x34, 0x11, 0x14, 0x7d, 0x0e, 0x5b, 0x9a, 0xe0,
	0x3c, 0x8d, 0xdd, 0x35, 0x1e, 0x32, 0x0c, 0xce, 0xb1, 0xfe, 0xef, 0x16, 0x6c, 0x9b, 0x2b, 0x55,
	0x19, 0x74, 0x03, 0x54, 0x29, 0x85, 0x24, 0xf1, 0x54, 0xc5, 0x5f, 0xc3, 0xa5, 0x00, 0x3d, 0x86,
	0x8d, 0x88, 0x48, 0xe2, 0xda, 0xca, 0xc5, 0xad, 0x95, 0x2e, 0x94, 0x9d, 0xe0, 0x29, 0x91, 0x44,
	0xd7, 0x42, 0x69, 0x78, 0x18, 0x9c, 0x42, 0xb4, 0x82, 0x9e, 0xfe, 0x32, 0x3d, 0xd7, 0x97, 0x2d,
	0x0f, 0x55, 0xaf, 0x1f, 0x70, 0x4e, 0x16, 0x55, 0x1a, 0x7e, 0x82, 0x2b, 0xe7, 0xaa, 0x83, 0xda,
	0x60, 0xb3, 0xc8, 0x98, 0xb6, 0x59, 0xf4, 0x9f, 0xdb, 0x78, 0x17, 0x1c, 0x26, 0x46, 0x24, 0x94,
	0x6c, 0x4e, 0xdd, 0x5a, 0xd7, 0xea, 0x35, 0x70, 0x83, 0x89, 0x03, 0x75, 0xf6, 0xff, 0xb6, 0xa1,
	0x65, 0x5c, 0x0f, 0x29, 0x67, 0x54, 0xa0, 0xeb, 0xd0, 0xc8, 0x47, 0xc9, 0x38, 0xdf, 0x32, 0x93,
	0x94, 0x0d, 0x44, 0xa5, 0xab, 0x59, 0xa4, 0x82, 0x70, 0xf0, 0x76, 0x29, 0x7c, 0x1e, 0x21, 0x04,
	0x1b, 0x09, 0x89, 0xb5, 0x27, 0x07, 0xab, 0xff, 0xe8, 0x2a, 0xd4, 0x25, 0x4d, 0x88, 0x99, 0x12,
	0x07, 0x9b, 0x13, 0x7a, 0x01, 0x10, 0xb1, 0x98, 0x26, 0x82, 0xa5, 0x89, 0x30, 0x23, 0x72, 0x6f,
	0x65, 0x2d, 0x74, 0x70, 0xc1, 0xd3, 0x02, 0xad, 0x4b, 0x52, 0x51, 0x2f, 0x27, 0xb1, 0x5e, 0x9d,
	0xc4, 0x01, 0xd4, 0x15, 0xcf, 0xc2, 0xdd, 0x52, 0xe6, 0xbd, 0xf5, 0xa5, 0xc6, 0x06, 0xe9, 0x0d,
	0x61, 0xe7, 0x8c, 0xa3, 0x15, 0x85, 0xbe, 0xbb, 0x5c, 0xe8, 0xce, 0xaa, 0x42, 0x57, 0x6b, 0xfc,
	0x8b, 0x55, 0x30, 0xad, 0x7b, 0x17, 0x3d, 0x84, 0xba, 0x50, 0x69, 0x5d, 0xd8, 0xe8, 0x3a, 0x73,
	0x6c, 0xa0, 0xe8, 0x10, 0xda, 0x53, 0xc2, 0x25, 0x23, 0x93, 0x91, 0x51, 0xb6, 0x2f, 0x57, 0x6e,
	0x19, 0x15, 0x7d, 0xf4, 0x7f, 0xb6, 0xa0, 0x63, 0x00, 0x4f, 0x32, 0x92, 0xc4, 0x07, 0x5d, 0xa3,
	0x1d, 0xd8, 0x54, 0xfb, 0xd3, 0x74, 0x84, 0x3e, 0xf8, 0x27, 0xc5, 0xb8, 0xaa, 0x10, 0x4a, 0x3a,
	0xad, 0x4b, 0xe9, 0x2c, 0x2b, 0x6d, 0x57, 0x2a, 0xed, 0x13, 0xf8, 0xe4, 0x4c, 0x52, 0x66, 0xa3,
	0x14, 0x01, 0x58, 0x95, 0x00, 0xb2, 0xc6, 0x50, 0x7a, 0x39, 0x81, 0xab, 0x1b, 0x43, 0x99, 0xc2,
	0x06, 0xe9, 0xff, 0x6a, 0xc3, 0xb5, 0xbc, 0x63, 0x78, 0xc6, 0x59, 0x12, 0x2e, 0x3e, 0x28, 0x77,
	0xf7, 0xa0, 0x5e, 0xf9, 0xf6, 0x34, 0x07, 0x1f, 0x2f, 0xeb, 0x98, 0xb6, 0xd5, 0x10, 0x14, 0x40,
	0x63, 0xcc, 0xd3, 0xd9, 0x74, 0x74, 0xba, 0x70, 0x37, 0xd6, 0xc3, 0xb7, 0x14, 0xe8, 0x70, 0x81,
	0x6e, 0x02, 0x44, 0xe9, 0x8f, 0x89, 0x20, 0xf1, 0x74, 0x42, 0xdd, 0x4d, 0xc5, 0x65, 0x45, 0x82,
	0x6e, 0x43, 0x7b, 0x4a, 0xb9, 0x60, 0x42, 0x8e, 0x0c, 0x53, 0x75, 0xb5, 0x3d, 0x5a, 0x46, 0xaa,
	0x69, 0xf6, 0xff, 0xb0, 0xc1, 0x3d, 0x4f, 0x8a, 0xe1, 0xfe, 0xa6, 0x4e, 0x5c, 0x2d, 0x5d, 0x4d,
	0x4b, 0x0d, 0x57, 0x24, 0xe8, 0xa8, 0xdc, 0xf6, 0xba, 0x0c, 0xf7, 0x57, 0xcf, 0xe7, 0x59, 0xc3,
	0xc1, 0x99, 0xfd, 0xef, 0xfd, 0x66, 0x41, 0xdd, 0xcc, 0xd5, 0x71, 0x3e, 0xab, 0x99, 0xbd, 0x47,
	0xff, 0xca, 0x5e, 0xf0, 0x82, 0x2e, 0xf4, 0x66, 0x51, 0x33, 0x7e, 0xb5, 0x58, 0x1e, 0xb6, 0x8a,
	0x3c, 0x5f, 0x10, 0x5f, 0x41, 0x23, 0x07, 0xbe, 0xff, 0x66, 0x18, 0xfc, 0x55, 0xbe, 0x67, 0x86,
	0x94, 0xcf, 0x59, 0x48, 0xd1, 0x31, 0x38, 0x47, 0x54, 0x2a, 0xa1, 0x40, 0x37, 0x2e, 0xfa, 0xc4,
	0x7a, 0x9f, 0xae, 0xfb, 0x3c, 0xea, 0x02, 0x9c, 0xc0, 0x4e, 0x61, 0x69, 0x28, 0x39, 0x25, 0xf1,
	0x7b, 0xd9, 0x7b, 0x60, 0xa1, 0x57, 0xd0, 0xce, 0x2d, 0xea, 0x0e, 0x40, 0xfe, 0xfa, 0xd1, 0xc9,
	0x57, 0x8b, 0xb7, 0x77, 0x21, 0xc6, 0x04, 0x4b, 0xa0, 0xb3, 0x6c, 0xda, 0x44, 0xfc, 0x7f, 0x39,
	0x78, 0x60, 0xa1, 0x53, 0xb8, 0x92, 0xbb, 0x28, 0x9a, 0x00, 0xdd, 0xbe, 0xac, 0x49, 0xb4, 0x8b,
	0x3b, 0xef, 0xd6, 0x4b, 0x87, 0xaf, 0x61, 0x2f, 0xe5, 0xe3, 0x1c, 0x9c, 0x3d, 0x65, 0xf5, 0xcb,
	0xd5, 0xe8, 0xa9, 0xad, 0x20, 0xc5, 0x89, 0xf5, 0x7a, 0x7f, 0xcc, 0xe4, 0xf7, 0xb3, 0xd3, 0x20,
	0x4c, 0xe3, 0x7e, 0xe5, 0xe1, 0x7b, 0x5f, 0x3f, 0x7c, 0xe7, 0xfb, 0xfb, 0xfd, 0xf1, 0xd2, 0x63,
	0x5d, 0x8a, 0xd3, 0xba, 0xba, 0x7b, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xdb, 0x41,
	0xf5, 0xd6, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventTSServiceClient is the client API for EventTSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventTSServiceClient interface {
	GetEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*EventTSResponse, error)
	GetEventsStream(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (EventTSService_GetEventsStreamClient, error)
	GetEventCounts(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (*EventTSCountsResponse, error)
	GetEventCountsStream(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (EventTSService_GetEventCountsStreamClient, error)
	GetEventFrequency(ctx context.Context, in *EventTSFrequencyRequest, opts ...grpc.CallOption) (*EventTSFrequencyResponse, error)
}

type eventTSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventTSServiceClient(cc grpc.ClientConnInterface) EventTSServiceClient {
	return &eventTSServiceClient{cc}
}

func (c *eventTSServiceClient) GetEvents(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (*EventTSResponse, error) {
	out := new(EventTSResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTSServiceClient) GetEventsStream(ctx context.Context, in *EventTSRequest, opts ...grpc.CallOption) (EventTSService_GetEventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventTSService_serviceDesc.Streams[0], "/zenoss.cloud.EventTSService/GetEventsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventTSServiceGetEventsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventTSService_GetEventsStreamClient interface {
	Recv() (*EventTSResponse, error)
	grpc.ClientStream
}

type eventTSServiceGetEventsStreamClient struct {
	grpc.ClientStream
}

func (x *eventTSServiceGetEventsStreamClient) Recv() (*EventTSResponse, error) {
	m := new(EventTSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventTSServiceClient) GetEventCounts(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (*EventTSCountsResponse, error) {
	out := new(EventTSCountsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetEventCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventTSServiceClient) GetEventCountsStream(ctx context.Context, in *EventTSCountsRequest, opts ...grpc.CallOption) (EventTSService_GetEventCountsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventTSService_serviceDesc.Streams[1], "/zenoss.cloud.EventTSService/GetEventCountsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventTSServiceGetEventCountsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventTSService_GetEventCountsStreamClient interface {
	Recv() (*EventTSCountsResponse, error)
	grpc.ClientStream
}

type eventTSServiceGetEventCountsStreamClient struct {
	grpc.ClientStream
}

func (x *eventTSServiceGetEventCountsStreamClient) Recv() (*EventTSCountsResponse, error) {
	m := new(EventTSCountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventTSServiceClient) GetEventFrequency(ctx context.Context, in *EventTSFrequencyRequest, opts ...grpc.CallOption) (*EventTSFrequencyResponse, error) {
	out := new(EventTSFrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventTSService/GetEventFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventTSServiceServer is the server API for EventTSService service.
type EventTSServiceServer interface {
	GetEvents(context.Context, *EventTSRequest) (*EventTSResponse, error)
	GetEventsStream(*EventTSRequest, EventTSService_GetEventsStreamServer) error
	GetEventCounts(context.Context, *EventTSCountsRequest) (*EventTSCountsResponse, error)
	GetEventCountsStream(*EventTSCountsRequest, EventTSService_GetEventCountsStreamServer) error
	GetEventFrequency(context.Context, *EventTSFrequencyRequest) (*EventTSFrequencyResponse, error)
}

// UnimplementedEventTSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventTSServiceServer struct {
}

func (*UnimplementedEventTSServiceServer) GetEvents(ctx context.Context, req *EventTSRequest) (*EventTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventsStream(req *EventTSRequest, srv EventTSService_GetEventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventsStream not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventCounts(ctx context.Context, req *EventTSCountsRequest) (*EventTSCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventCounts not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventCountsStream(req *EventTSCountsRequest, srv EventTSService_GetEventCountsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventCountsStream not implemented")
}
func (*UnimplementedEventTSServiceServer) GetEventFrequency(ctx context.Context, req *EventTSFrequencyRequest) (*EventTSFrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventFrequency not implemented")
}

func RegisterEventTSServiceServer(s *grpc.Server, srv EventTSServiceServer) {
	s.RegisterService(&_EventTSService_serviceDesc, srv)
}

func _EventTSService_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetEvents(ctx, req.(*EventTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTSService_GetEventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventTSRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTSServiceServer).GetEventsStream(m, &eventTSServiceGetEventsStreamServer{stream})
}

type EventTSService_GetEventsStreamServer interface {
	Send(*EventTSResponse) error
	grpc.ServerStream
}

type eventTSServiceGetEventsStreamServer struct {
	grpc.ServerStream
}

func (x *eventTSServiceGetEventsStreamServer) Send(m *EventTSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventTSService_GetEventCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetEventCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetEventCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetEventCounts(ctx, req.(*EventTSCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventTSService_GetEventCountsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventTSCountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventTSServiceServer).GetEventCountsStream(m, &eventTSServiceGetEventCountsStreamServer{stream})
}

type EventTSService_GetEventCountsStreamServer interface {
	Send(*EventTSCountsResponse) error
	grpc.ServerStream
}

type eventTSServiceGetEventCountsStreamServer struct {
	grpc.ServerStream
}

func (x *eventTSServiceGetEventCountsStreamServer) Send(m *EventTSCountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventTSService_GetEventFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTSFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventTSServiceServer).GetEventFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventTSService/GetEventFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventTSServiceServer).GetEventFrequency(ctx, req.(*EventTSFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventTSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventTSService",
	HandlerType: (*EventTSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _EventTSService_GetEvents_Handler,
		},
		{
			MethodName: "GetEventCounts",
			Handler:    _EventTSService_GetEventCounts_Handler,
		},
		{
			MethodName: "GetEventFrequency",
			Handler:    _EventTSService_GetEventFrequency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventsStream",
			Handler:       _EventTSService_GetEventsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventCountsStream",
			Handler:       _EventTSService_GetEventCountsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/event_ts.proto",
}
