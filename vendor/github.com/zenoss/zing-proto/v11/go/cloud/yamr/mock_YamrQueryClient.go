// Code generated by mockery v2.14.0. DO NOT EDIT.

package yamr

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockYamrQueryClient is an autogenerated mock type for the YamrQueryClient type
type MockYamrQueryClient struct {
	mock.Mock
}

type MockYamrQueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYamrQueryClient) EXPECT() *MockYamrQueryClient_Expecter {
	return &MockYamrQueryClient_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CountRequest, ...grpc.CallOption) *CountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockYamrQueryClient_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - ctx context.Context
//  - in *CountRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) Count(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_Count_Call {
	return &MockYamrQueryClient_Count_Call{Call: _e.mock.On("Count",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_Count_Call) Run(run func(ctx context.Context, in *CountRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CountRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_Count_Call) Return(_a0 *CountResponse, _a1 error) *MockYamrQueryClient_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Frequency provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *FrequencyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *FrequencyRequest, ...grpc.CallOption) *FrequencyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FrequencyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *FrequencyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_Frequency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Frequency'
type MockYamrQueryClient_Frequency_Call struct {
	*mock.Call
}

// Frequency is a helper method to define mock.On call
//  - ctx context.Context
//  - in *FrequencyRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) Frequency(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_Frequency_Call {
	return &MockYamrQueryClient_Frequency_Call{Call: _e.mock.On("Frequency",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_Frequency_Call) Run(run func(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_Frequency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*FrequencyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_Frequency_Call) Return(_a0 *FrequencyResponse, _a1 error) *MockYamrQueryClient_Frequency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetRequest, ...grpc.CallOption) *GetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockYamrQueryClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_Get_Call {
	return &MockYamrQueryClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_Get_Call) Run(run func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_Get_Call) Return(_a0 *GetResponse, _a1 error) *MockYamrQueryClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBulk provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetBulkRequest, ...grpc.CallOption) *GetBulkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetBulkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_GetBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBulk'
type MockYamrQueryClient_GetBulk_Call struct {
	*mock.Call
}

// GetBulk is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetBulkRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) GetBulk(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_GetBulk_Call {
	return &MockYamrQueryClient_GetBulk_Call{Call: _e.mock.On("GetBulk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_GetBulk_Call) Run(run func(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_GetBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetBulkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_GetBulk_Call) Return(_a0 *GetBulkResponse, _a1 error) *MockYamrQueryClient_GetBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Search provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest, ...grpc.CallOption) *SearchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockYamrQueryClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//  - ctx context.Context
//  - in *SearchRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) Search(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_Search_Call {
	return &MockYamrQueryClient_Search_Call{Call: _e.mock.On("Search",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_Search_Call) Run(run func(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SearchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_Search_Call) Return(_a0 *SearchResponse, _a1 error) *MockYamrQueryClient_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// StreamingSearch provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 YamrQuery_StreamingSearchClient
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest, ...grpc.CallOption) YamrQuery_StreamingSearchClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(YamrQuery_StreamingSearchClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_StreamingSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamingSearch'
type MockYamrQueryClient_StreamingSearch_Call struct {
	*mock.Call
}

// StreamingSearch is a helper method to define mock.On call
//  - ctx context.Context
//  - in *SearchRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) StreamingSearch(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_StreamingSearch_Call {
	return &MockYamrQueryClient_StreamingSearch_Call{Call: _e.mock.On("StreamingSearch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_StreamingSearch_Call) Run(run func(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_StreamingSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SearchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_StreamingSearch_Call) Return(_a0 YamrQuery_StreamingSearchClient, _a1 error) *MockYamrQueryClient_StreamingSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Suggest provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrQueryClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SuggestResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SuggestRequest, ...grpc.CallOption) *SuggestResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SuggestResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SuggestRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrQueryClient_Suggest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Suggest'
type MockYamrQueryClient_Suggest_Call struct {
	*mock.Call
}

// Suggest is a helper method to define mock.On call
//  - ctx context.Context
//  - in *SuggestRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrQueryClient_Expecter) Suggest(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrQueryClient_Suggest_Call {
	return &MockYamrQueryClient_Suggest_Call{Call: _e.mock.On("Suggest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrQueryClient_Suggest_Call) Run(run func(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption)) *MockYamrQueryClient_Suggest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SuggestRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrQueryClient_Suggest_Call) Return(_a0 *SuggestResponse, _a1 error) *MockYamrQueryClient_Suggest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockYamrQueryClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockYamrQueryClient creates a new instance of MockYamrQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYamrQueryClient(t mockConstructorTestingTNewMockYamrQueryClient) *MockYamrQueryClient {
	mock := &MockYamrQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
