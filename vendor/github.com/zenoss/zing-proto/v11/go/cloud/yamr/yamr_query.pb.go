// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zenoss/zing/proto/cloud/yamr_query.proto

package yamr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("zenoss/zing/proto/cloud/yamr_query.proto", fileDescriptor_a742bac0a5998485)
}

var fileDescriptor_a742bac0a5998485 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xbd, 0x4b, 0xc3, 0x40,
	0x18, 0xc6, 0x29, 0xc5, 0x4a, 0x0f, 0x41, 0xb8, 0x49, 0xd3, 0xfa, 0x81, 0x93, 0x8b, 0x77, 0x56,
	0x37, 0x27, 0x69, 0xa1, 0x59, 0x44, 0xd4, 0xb8, 0xe8, 0x22, 0x69, 0x7c, 0xb9, 0x06, 0x9b, 0xbb,
	0xf6, 0x3e, 0x84, 0xf4, 0x6f, 0x77, 0x90, 0xe4, 0xee, 0x6a, 0xa2, 0x89, 0x4b, 0xd7, 0xe7, 0xf7,
	0xbc, 0x3f, 0xde, 0xe1, 0x41, 0xe7, 0x6b, 0xe0, 0x42, 0x29, 0xba, 0x4e, 0x39, 0xa3, 0x4b, 0x29,
	0xb4, 0xa0, 0xc9, 0x42, 0x98, 0x77, 0x9a, 0xc7, 0x99, 0x7c, 0x5b, 0x19, 0x90, 0x39, 0x29, 0x63,
	0xbc, 0x67, 0x9b, 0xa4, 0xc4, 0xc1, 0xd9, 0x7f, 0x77, 0xf6, 0xe2, 0xea, 0xab, 0x8b, 0xfa, 0x2f,
	0x71, 0x26, 0x1f, 0x0b, 0x0b, 0x9e, 0xa0, 0x5e, 0x04, 0xb1, 0x4c, 0xe6, 0x78, 0x40, 0xaa, 0x2a,
	0x62, 0xd3, 0x27, 0x58, 0x19, 0x50, 0x3a, 0x18, 0x36, 0x43, 0xb5, 0x14, 0x5c, 0x01, 0xbe, 0x47,
	0xfb, 0x91, 0x96, 0x10, 0x67, 0x29, 0x67, 0x5b, 0xdb, 0x2e, 0x3b, 0xf8, 0x06, 0x75, 0x43, 0xd0,
	0xf8, 0xa0, 0x5e, 0x0b, 0x41, 0x7b, 0xc1, 0x61, 0x03, 0x71, 0xbf, 0x4c, 0xd1, 0x6e, 0x08, 0x7a,
	0x6c, 0x16, 0x1f, 0x78, 0xf8, 0xa7, 0x55, 0xc4, 0xde, 0x71, 0xd4, 0x42, 0x9d, 0xe7, 0x16, 0xed,
	0x4c, 0x84, 0xe1, 0x1a, 0x07, 0xf5, 0x5e, 0x19, 0x7a, 0xc7, 0xa0, 0x91, 0xfd, 0x7c, 0x12, 0x19,
	0xc6, 0x40, 0xe9, 0xdf, 0x9f, 0xb8, 0xb8, 0xe5, 0x93, 0x0d, 0x75, 0x9e, 0x3b, 0xd4, 0x9f, 0xca,
	0xa2, 0xca, 0x93, 0x1c, 0x1f, 0xd7, 0xbb, 0x1b, 0xe0, 0x5d, 0x27, 0xad, 0xdc, 0xda, 0xc6, 0xcf,
	0xe8, 0x54, 0x48, 0xe6, 0x5b, 0xc5, 0x50, 0xec, 0x2e, 0xdc, 0x41, 0x31, 0x94, 0x87, 0xce, 0x2b,
	0x61, 0xa9, 0x9e, 0x9b, 0x19, 0x49, 0x44, 0x46, 0x2b, 0x9b, 0xba, 0xb0, 0x9b, 0xfa, 0x1c, 0x8d,
	0x28, 0xab, 0x4e, 0x6b, 0xd6, 0x2b, 0xc1, 0xf5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x09,
	0xbb, 0xac, 0xb9, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YamrQueryClient is the client API for YamrQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YamrQueryClient interface {
	// Search queries for yamr items
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// StreamingSearch performs a query for yamr items and return a stream of results
	StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error)
	// Get returns a single item by its id
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// GetBulk returns multiple items by their ids
	GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error)
	// Count returns the number of ids that applies to each value for a time
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Suggest returns a list of matching suggestions that match partial input as a prefix.
	Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	// Frequency returns the number of occurrences that a thing changes and
	// groups them into buckets
	Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error)
}

type yamrQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrQueryClient(cc grpc.ClientConnInterface) YamrQueryClient {
	return &yamrQueryClient{cc}
}

func (c *yamrQueryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YamrQuery_serviceDesc.Streams[0], "/zenoss.cloud.YamrQuery/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrQueryStreamingSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrQuery_StreamingSearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type yamrQueryStreamingSearchClient struct {
	grpc.ClientStream
}

func (x *yamrQueryStreamingSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yamrQueryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error) {
	out := new(GetBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/GetBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Suggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error) {
	out := new(FrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Frequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YamrQueryServer is the server API for YamrQuery service.
type YamrQueryServer interface {
	// Search queries for yamr items
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// StreamingSearch performs a query for yamr items and return a stream of results
	StreamingSearch(*SearchRequest, YamrQuery_StreamingSearchServer) error
	// Get returns a single item by its id
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// GetBulk returns multiple items by their ids
	GetBulk(context.Context, *GetBulkRequest) (*GetBulkResponse, error)
	// Count returns the number of ids that applies to each value for a time
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// Suggest returns a list of matching suggestions that match partial input as a prefix.
	Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	// Frequency returns the number of occurrences that a thing changes and
	// groups them into buckets
	Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error)
}

// UnimplementedYamrQueryServer can be embedded to have forward compatible implementations.
type UnimplementedYamrQueryServer struct {
}

func (*UnimplementedYamrQueryServer) Search(ctx context.Context, req *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedYamrQueryServer) StreamingSearch(req *SearchRequest, srv YamrQuery_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}
func (*UnimplementedYamrQueryServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedYamrQueryServer) GetBulk(ctx context.Context, req *GetBulkRequest) (*GetBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (*UnimplementedYamrQueryServer) Count(ctx context.Context, req *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedYamrQueryServer) Suggest(ctx context.Context, req *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (*UnimplementedYamrQueryServer) Frequency(ctx context.Context, req *FrequencyRequest) (*FrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frequency not implemented")
}

func RegisterYamrQueryServer(s *grpc.Server, srv YamrQueryServer) {
	s.RegisterService(&_YamrQuery_serviceDesc, srv)
}

func _YamrQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrQueryServer).StreamingSearch(m, &yamrQueryStreamingSearchServer{stream})
}

type YamrQuery_StreamingSearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type yamrQueryStreamingSearchServer struct {
	grpc.ServerStream
}

func (x *yamrQueryStreamingSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _YamrQuery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/GetBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).GetBulk(ctx, req.(*GetBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Suggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Frequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Frequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Frequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Frequency(ctx, req.(*FrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YamrQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrQuery",
	HandlerType: (*YamrQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _YamrQuery_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _YamrQuery_Get_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _YamrQuery_GetBulk_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _YamrQuery_Count_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _YamrQuery_Suggest_Handler,
		},
		{
			MethodName: "Frequency",
			Handler:    _YamrQuery_Frequency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _YamrQuery_StreamingSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_query.proto",
}
