// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zenoss/zing/proto/cloud/yamr_query.proto

package yamr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_zenoss_zing_proto_cloud_yamr_query_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_yamr_query_proto_rawDesc = []byte{
	0x0a, 0x28, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x22, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xfc, 0x03, 0x0a,
	0x09, 0x59, 0x61, 0x6d, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x54, 0x0a, 0x20, 0x6f,
	0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x61, 0x6d, 0x72, 0x50,
	0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_zenoss_zing_proto_cloud_yamr_query_proto_goTypes = []interface{}{
	(*SearchRequest)(nil),     // 0: zenoss.cloud.SearchRequest
	(*GetRequest)(nil),        // 1: zenoss.cloud.GetRequest
	(*GetBulkRequest)(nil),    // 2: zenoss.cloud.GetBulkRequest
	(*CountRequest)(nil),      // 3: zenoss.cloud.CountRequest
	(*SuggestRequest)(nil),    // 4: zenoss.cloud.SuggestRequest
	(*FrequencyRequest)(nil),  // 5: zenoss.cloud.FrequencyRequest
	(*SearchResponse)(nil),    // 6: zenoss.cloud.SearchResponse
	(*GetResponse)(nil),       // 7: zenoss.cloud.GetResponse
	(*GetBulkResponse)(nil),   // 8: zenoss.cloud.GetBulkResponse
	(*CountResponse)(nil),     // 9: zenoss.cloud.CountResponse
	(*SuggestResponse)(nil),   // 10: zenoss.cloud.SuggestResponse
	(*FrequencyResponse)(nil), // 11: zenoss.cloud.FrequencyResponse
}
var file_zenoss_zing_proto_cloud_yamr_query_proto_depIdxs = []int32{
	0,  // 0: zenoss.cloud.YamrQuery.Search:input_type -> zenoss.cloud.SearchRequest
	0,  // 1: zenoss.cloud.YamrQuery.StreamingSearch:input_type -> zenoss.cloud.SearchRequest
	1,  // 2: zenoss.cloud.YamrQuery.Get:input_type -> zenoss.cloud.GetRequest
	2,  // 3: zenoss.cloud.YamrQuery.GetBulk:input_type -> zenoss.cloud.GetBulkRequest
	3,  // 4: zenoss.cloud.YamrQuery.Count:input_type -> zenoss.cloud.CountRequest
	4,  // 5: zenoss.cloud.YamrQuery.Suggest:input_type -> zenoss.cloud.SuggestRequest
	5,  // 6: zenoss.cloud.YamrQuery.Frequency:input_type -> zenoss.cloud.FrequencyRequest
	6,  // 7: zenoss.cloud.YamrQuery.Search:output_type -> zenoss.cloud.SearchResponse
	6,  // 8: zenoss.cloud.YamrQuery.StreamingSearch:output_type -> zenoss.cloud.SearchResponse
	7,  // 9: zenoss.cloud.YamrQuery.Get:output_type -> zenoss.cloud.GetResponse
	8,  // 10: zenoss.cloud.YamrQuery.GetBulk:output_type -> zenoss.cloud.GetBulkResponse
	9,  // 11: zenoss.cloud.YamrQuery.Count:output_type -> zenoss.cloud.CountResponse
	10, // 12: zenoss.cloud.YamrQuery.Suggest:output_type -> zenoss.cloud.SuggestResponse
	11, // 13: zenoss.cloud.YamrQuery.Frequency:output_type -> zenoss.cloud.FrequencyResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_yamr_query_proto_init() }
func file_zenoss_zing_proto_cloud_yamr_query_proto_init() {
	if File_zenoss_zing_proto_cloud_yamr_query_proto != nil {
		return
	}
	file_zenoss_zing_proto_cloud_yamr_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_yamr_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_yamr_query_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_yamr_query_proto_depIdxs,
	}.Build()
	File_zenoss_zing_proto_cloud_yamr_query_proto = out.File
	file_zenoss_zing_proto_cloud_yamr_query_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_yamr_query_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_yamr_query_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YamrQueryClient is the client API for YamrQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YamrQueryClient interface {
	// Search queries for yamr items
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// StreamingSearch performs a query for yamr items and return a stream of results
	StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error)
	// Get returns a single item by its id
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// GetBulk returns multiple items by their ids
	GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error)
	// Count returns the number of ids that applies to each value for a time
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Suggest returns a list of matching suggestions that match partial input as a prefix.
	Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	// Frequency returns the number of occurrences that a thing changes and
	// groups them into buckets
	Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error)
}

type yamrQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrQueryClient(cc grpc.ClientConnInterface) YamrQueryClient {
	return &yamrQueryClient{cc}
}

func (c *yamrQueryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YamrQuery_serviceDesc.Streams[0], "/zenoss.cloud.YamrQuery/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrQueryStreamingSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrQuery_StreamingSearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type yamrQueryStreamingSearchClient struct {
	grpc.ClientStream
}

func (x *yamrQueryStreamingSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yamrQueryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error) {
	out := new(GetBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/GetBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Suggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error) {
	out := new(FrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Frequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YamrQueryServer is the server API for YamrQuery service.
type YamrQueryServer interface {
	// Search queries for yamr items
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// StreamingSearch performs a query for yamr items and return a stream of results
	StreamingSearch(*SearchRequest, YamrQuery_StreamingSearchServer) error
	// Get returns a single item by its id
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// GetBulk returns multiple items by their ids
	GetBulk(context.Context, *GetBulkRequest) (*GetBulkResponse, error)
	// Count returns the number of ids that applies to each value for a time
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// Suggest returns a list of matching suggestions that match partial input as a prefix.
	Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	// Frequency returns the number of occurrences that a thing changes and
	// groups them into buckets
	Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error)
}

// UnimplementedYamrQueryServer can be embedded to have forward compatible implementations.
type UnimplementedYamrQueryServer struct {
}

func (*UnimplementedYamrQueryServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedYamrQueryServer) StreamingSearch(*SearchRequest, YamrQuery_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}
func (*UnimplementedYamrQueryServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedYamrQueryServer) GetBulk(context.Context, *GetBulkRequest) (*GetBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (*UnimplementedYamrQueryServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedYamrQueryServer) Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (*UnimplementedYamrQueryServer) Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frequency not implemented")
}

func RegisterYamrQueryServer(s *grpc.Server, srv YamrQueryServer) {
	s.RegisterService(&_YamrQuery_serviceDesc, srv)
}

func _YamrQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrQueryServer).StreamingSearch(m, &yamrQueryStreamingSearchServer{stream})
}

type YamrQuery_StreamingSearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type yamrQueryStreamingSearchServer struct {
	grpc.ServerStream
}

func (x *yamrQueryStreamingSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _YamrQuery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/GetBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).GetBulk(ctx, req.(*GetBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Suggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Frequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Frequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Frequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Frequency(ctx, req.(*FrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YamrQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrQuery",
	HandlerType: (*YamrQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _YamrQuery_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _YamrQuery_Get_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _YamrQuery_GetBulk_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _YamrQuery_Count_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _YamrQuery_Suggest_Handler,
		},
		{
			MethodName: "Frequency",
			Handler:    _YamrQuery_Frequency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _YamrQuery_StreamingSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_query.proto",
}
