// Code generated by mockery v2.12.2. DO NOT EDIT.

package yamr

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockYamrServiceServer is an autogenerated mock type for the YamrServiceServer type
type MockYamrServiceServer struct {
	mock.Mock
}

type MockYamrServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYamrServiceServer) EXPECT() *MockYamrServiceServer_Expecter {
	return &MockYamrServiceServer_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) Count(_a0 context.Context, _a1 *CountRequest) (*CountResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CountRequest) *CountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceServer_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockYamrServiceServer_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *CountRequest
func (_e *MockYamrServiceServer_Expecter) Count(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_Count_Call {
	return &MockYamrServiceServer_Count_Call{Call: _e.mock.On("Count", _a0, _a1)}
}

func (_c *MockYamrServiceServer_Count_Call) Run(run func(_a0 context.Context, _a1 *CountRequest)) *MockYamrServiceServer_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CountRequest))
	})
	return _c
}

func (_c *MockYamrServiceServer_Count_Call) Return(_a0 *CountResponse, _a1 error) *MockYamrServiceServer_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) Get(_a0 context.Context, _a1 *GetRequest) (*GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetRequest) *GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockYamrServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetRequest
func (_e *MockYamrServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_Get_Call {
	return &MockYamrServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockYamrServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *GetRequest)) *MockYamrServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetRequest))
	})
	return _c
}

func (_c *MockYamrServiceServer_Get_Call) Return(_a0 *GetResponse, _a1 error) *MockYamrServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBulk provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) GetBulk(_a0 context.Context, _a1 *GetBulkRequest) (*GetBulkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetBulkRequest) *GetBulkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetBulkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceServer_GetBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBulk'
type MockYamrServiceServer_GetBulk_Call struct {
	*mock.Call
}

// GetBulk is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetBulkRequest
func (_e *MockYamrServiceServer_Expecter) GetBulk(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_GetBulk_Call {
	return &MockYamrServiceServer_GetBulk_Call{Call: _e.mock.On("GetBulk", _a0, _a1)}
}

func (_c *MockYamrServiceServer_GetBulk_Call) Run(run func(_a0 context.Context, _a1 *GetBulkRequest)) *MockYamrServiceServer_GetBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetBulkRequest))
	})
	return _c
}

func (_c *MockYamrServiceServer_GetBulk_Call) Return(_a0 *GetBulkResponse, _a1 error) *MockYamrServiceServer_GetBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) Put(_a0 context.Context, _a1 *PutRequest) (*PutResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PutRequest) *PutResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PutRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceServer_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockYamrServiceServer_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *PutRequest
func (_e *MockYamrServiceServer_Expecter) Put(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_Put_Call {
	return &MockYamrServiceServer_Put_Call{Call: _e.mock.On("Put", _a0, _a1)}
}

func (_c *MockYamrServiceServer_Put_Call) Run(run func(_a0 context.Context, _a1 *PutRequest)) *MockYamrServiceServer_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*PutRequest))
	})
	return _c
}

func (_c *MockYamrServiceServer_Put_Call) Return(_a0 *PutResponse, _a1 error) *MockYamrServiceServer_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutBulk provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) PutBulk(_a0 context.Context, _a1 *PutBulkRequest) (*PutBulkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PutBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PutBulkRequest) *PutBulkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PutBulkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceServer_PutBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBulk'
type MockYamrServiceServer_PutBulk_Call struct {
	*mock.Call
}

// PutBulk is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *PutBulkRequest
func (_e *MockYamrServiceServer_Expecter) PutBulk(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_PutBulk_Call {
	return &MockYamrServiceServer_PutBulk_Call{Call: _e.mock.On("PutBulk", _a0, _a1)}
}

func (_c *MockYamrServiceServer_PutBulk_Call) Run(run func(_a0 context.Context, _a1 *PutBulkRequest)) *MockYamrServiceServer_PutBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*PutBulkRequest))
	})
	return _c
}

func (_c *MockYamrServiceServer_PutBulk_Call) Return(_a0 *PutBulkResponse, _a1 error) *MockYamrServiceServer_PutBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) Search(_a0 context.Context, _a1 *SearchRequest) (*SearchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest) *SearchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceServer_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockYamrServiceServer_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *SearchRequest
func (_e *MockYamrServiceServer_Expecter) Search(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_Search_Call {
	return &MockYamrServiceServer_Search_Call{Call: _e.mock.On("Search", _a0, _a1)}
}

func (_c *MockYamrServiceServer_Search_Call) Run(run func(_a0 context.Context, _a1 *SearchRequest)) *MockYamrServiceServer_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SearchRequest))
	})
	return _c
}

func (_c *MockYamrServiceServer_Search_Call) Return(_a0 *SearchResponse, _a1 error) *MockYamrServiceServer_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// StreamingSearch provides a mock function with given fields: _a0, _a1
func (_m *MockYamrServiceServer) StreamingSearch(_a0 *SearchRequest, _a1 YamrService_StreamingSearchServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*SearchRequest, YamrService_StreamingSearchServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockYamrServiceServer_StreamingSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamingSearch'
type MockYamrServiceServer_StreamingSearch_Call struct {
	*mock.Call
}

// StreamingSearch is a helper method to define mock.On call
//  - _a0 *SearchRequest
//  - _a1 YamrService_StreamingSearchServer
func (_e *MockYamrServiceServer_Expecter) StreamingSearch(_a0 interface{}, _a1 interface{}) *MockYamrServiceServer_StreamingSearch_Call {
	return &MockYamrServiceServer_StreamingSearch_Call{Call: _e.mock.On("StreamingSearch", _a0, _a1)}
}

func (_c *MockYamrServiceServer_StreamingSearch_Call) Run(run func(_a0 *SearchRequest, _a1 YamrService_StreamingSearchServer)) *MockYamrServiceServer_StreamingSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*SearchRequest), args[1].(YamrService_StreamingSearchServer))
	})
	return _c
}

func (_c *MockYamrServiceServer_StreamingSearch_Call) Return(_a0 error) *MockYamrServiceServer_StreamingSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewMockYamrServiceServer creates a new instance of MockYamrServiceServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYamrServiceServer(t testing.TB) *MockYamrServiceServer {
	mock := &MockYamrServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
