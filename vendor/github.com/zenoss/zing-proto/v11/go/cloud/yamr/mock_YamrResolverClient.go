// Code generated by mockery v2.12.2. DO NOT EDIT.

package yamr

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockYamrResolverClient is an autogenerated mock type for the YamrResolverClient type
type MockYamrResolverClient struct {
	mock.Mock
}

type MockYamrResolverClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYamrResolverClient) EXPECT() *MockYamrResolverClient_Expecter {
	return &MockYamrResolverClient_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrResolverClient) Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 YamrResolver_ResolveClient
	if rf, ok := ret.Get(0).(func(context.Context, *YamrResolveRequest, ...grpc.CallOption) YamrResolver_ResolveClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(YamrResolver_ResolveClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *YamrResolveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrResolverClient_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type MockYamrResolverClient_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//  - ctx context.Context
//  - in *YamrResolveRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrResolverClient_Expecter) Resolve(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrResolverClient_Resolve_Call {
	return &MockYamrResolverClient_Resolve_Call{Call: _e.mock.On("Resolve",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrResolverClient_Resolve_Call) Run(run func(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption)) *MockYamrResolverClient_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*YamrResolveRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrResolverClient_Resolve_Call) Return(_a0 YamrResolver_ResolveClient, _a1 error) *MockYamrResolverClient_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockYamrResolverClient creates a new instance of MockYamrResolverClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYamrResolverClient(t testing.TB) *MockYamrResolverClient {
	mock := &MockYamrResolverClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
