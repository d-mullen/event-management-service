// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/yamr_query.proto

package yamr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YamrQueryClient is the client API for YamrQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YamrQueryClient interface {
	// Search queries for yamr items
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// StreamingSearch performs a query for yamr items and return a stream of results
	StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error)
	// Get returns a single item by its id
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// GetBulk returns multiple items by their ids
	GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error)
	// Count returns the number of ids that applies to each value for a time
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Suggest returns a list of matching suggestions that match partial input as a prefix.
	Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
	// Frequency returns the number of occurrences that a thing changes and
	// groups them into buckets
	Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error)
}

type yamrQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrQueryClient(cc grpc.ClientConnInterface) YamrQueryClient {
	return &yamrQueryClient{cc}
}

func (c *yamrQueryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrQuery_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &YamrQuery_ServiceDesc.Streams[0], "/zenoss.cloud.YamrQuery/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrQueryStreamingSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrQuery_StreamingSearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type yamrQueryStreamingSearchClient struct {
	grpc.ClientStream
}

func (x *yamrQueryStreamingSearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yamrQueryClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error) {
	out := new(GetBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/GetBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Suggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yamrQueryClient) Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error) {
	out := new(FrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrQuery/Frequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YamrQueryServer is the server API for YamrQuery service.
// All implementations must embed UnimplementedYamrQueryServer
// for forward compatibility
type YamrQueryServer interface {
	// Search queries for yamr items
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// StreamingSearch performs a query for yamr items and return a stream of results
	StreamingSearch(*SearchRequest, YamrQuery_StreamingSearchServer) error
	// Get returns a single item by its id
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// GetBulk returns multiple items by their ids
	GetBulk(context.Context, *GetBulkRequest) (*GetBulkResponse, error)
	// Count returns the number of ids that applies to each value for a time
	Count(context.Context, *CountRequest) (*CountResponse, error)
	// Suggest returns a list of matching suggestions that match partial input as a prefix.
	Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	// Frequency returns the number of occurrences that a thing changes and
	// groups them into buckets
	Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error)
	mustEmbedUnimplementedYamrQueryServer()
}

// UnimplementedYamrQueryServer must be embedded to have forward compatible implementations.
type UnimplementedYamrQueryServer struct {
}

func (UnimplementedYamrQueryServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedYamrQueryServer) StreamingSearch(*SearchRequest, YamrQuery_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}
func (UnimplementedYamrQueryServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedYamrQueryServer) GetBulk(context.Context, *GetBulkRequest) (*GetBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (UnimplementedYamrQueryServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedYamrQueryServer) Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (UnimplementedYamrQueryServer) Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frequency not implemented")
}
func (UnimplementedYamrQueryServer) mustEmbedUnimplementedYamrQueryServer() {}

// UnsafeYamrQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YamrQueryServer will
// result in compilation errors.
type UnsafeYamrQueryServer interface {
	mustEmbedUnimplementedYamrQueryServer()
}

func RegisterYamrQueryServer(s grpc.ServiceRegistrar, srv YamrQueryServer) {
	s.RegisterService(&YamrQuery_ServiceDesc, srv)
}

func _YamrQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrQueryServer).StreamingSearch(m, &yamrQueryStreamingSearchServer{stream})
}

type YamrQuery_StreamingSearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type yamrQueryStreamingSearchServer struct {
	grpc.ServerStream
}

func (x *yamrQueryStreamingSearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _YamrQuery_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/GetBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).GetBulk(ctx, req.(*GetBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Suggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Suggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YamrQuery_Frequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrQueryServer).Frequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrQuery/Frequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrQueryServer).Frequency(ctx, req.(*FrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YamrQuery_ServiceDesc is the grpc.ServiceDesc for YamrQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YamrQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrQuery",
	HandlerType: (*YamrQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _YamrQuery_Search_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _YamrQuery_Get_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _YamrQuery_GetBulk_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _YamrQuery_Count_Handler,
		},
		{
			MethodName: "Suggest",
			Handler:    _YamrQuery_Suggest_Handler,
		},
		{
			MethodName: "Frequency",
			Handler:    _YamrQuery_Frequency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _YamrQuery_StreamingSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_query.proto",
}
