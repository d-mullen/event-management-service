// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: zenoss/zing/proto/cloud/yamr.proto

package yamr

import (
	common "github.com/zenoss/zing-proto/v11/go/cloud/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BoundType int32

const (
	BoundType_UNBOUNDED BoundType = 0
	BoundType_CLOSED    BoundType = 1
	BoundType_OPEN      BoundType = 2
)

// Enum value maps for BoundType.
var (
	BoundType_name = map[int32]string{
		0: "UNBOUNDED",
		1: "CLOSED",
		2: "OPEN",
	}
	BoundType_value = map[string]int32{
		"UNBOUNDED": 0,
		"CLOSED":    1,
		"OPEN":      2,
	}
)

func (x BoundType) Enum() *BoundType {
	p := new(BoundType)
	*p = x
	return p
}

func (x BoundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoundType) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[0].Descriptor()
}

func (BoundType) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[0]
}

func (x BoundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoundType.Descriptor instead.
func (BoundType) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{0}
}

// Aggregator is the type of aggregator to apply to the field
type Aggregator int32

const (
	Aggregator_NONE  Aggregator = 0
	Aggregator_FIRST Aggregator = 1
	Aggregator_LAST  Aggregator = 2
	Aggregator_MIN   Aggregator = 3
	Aggregator_MAX   Aggregator = 4
)

// Enum value maps for Aggregator.
var (
	Aggregator_name = map[int32]string{
		0: "NONE",
		1: "FIRST",
		2: "LAST",
		3: "MIN",
		4: "MAX",
	}
	Aggregator_value = map[string]int32{
		"NONE":  0,
		"FIRST": 1,
		"LAST":  2,
		"MIN":   3,
		"MAX":   4,
	}
)

func (x Aggregator) Enum() *Aggregator {
	p := new(Aggregator)
	*p = x
	return p
}

func (x Aggregator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregator) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[1].Descriptor()
}

func (Aggregator) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[1]
}

func (x Aggregator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregator.Descriptor instead.
func (Aggregator) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{1}
}

type GraphDirection int32

const (
	GraphDirection_IN   GraphDirection = 0
	GraphDirection_OUT  GraphDirection = 1
	GraphDirection_BOTH GraphDirection = 2
)

// Enum value maps for GraphDirection.
var (
	GraphDirection_name = map[int32]string{
		0: "IN",
		1: "OUT",
		2: "BOTH",
	}
	GraphDirection_value = map[string]int32{
		"IN":   0,
		"OUT":  1,
		"BOTH": 2,
	}
)

func (x GraphDirection) Enum() *GraphDirection {
	p := new(GraphDirection)
	*p = x
	return p
}

func (x GraphDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[2].Descriptor()
}

func (GraphDirection) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[2]
}

func (x GraphDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphDirection.Descriptor instead.
func (GraphDirection) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{2}
}

type SearchRequest_PageInput_Direction int32

const (
	SearchRequest_PageInput_FORWARD  SearchRequest_PageInput_Direction = 0
	SearchRequest_PageInput_BACKWARD SearchRequest_PageInput_Direction = 1
)

// Enum value maps for SearchRequest_PageInput_Direction.
var (
	SearchRequest_PageInput_Direction_name = map[int32]string{
		0: "FORWARD",
		1: "BACKWARD",
	}
	SearchRequest_PageInput_Direction_value = map[string]int32{
		"FORWARD":  0,
		"BACKWARD": 1,
	}
)

func (x SearchRequest_PageInput_Direction) Enum() *SearchRequest_PageInput_Direction {
	p := new(SearchRequest_PageInput_Direction)
	*p = x
	return p
}

func (x SearchRequest_PageInput_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchRequest_PageInput_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[3].Descriptor()
}

func (SearchRequest_PageInput_Direction) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[3]
}

func (x SearchRequest_PageInput_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchRequest_PageInput_Direction.Descriptor instead.
func (SearchRequest_PageInput_Direction) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Sort_Order int32

const (
	Sort_ASCENDING  Sort_Order = 0
	Sort_DESCENDING Sort_Order = 1
)

// Enum value maps for Sort_Order.
var (
	Sort_Order_name = map[int32]string{
		0: "ASCENDING",
		1: "DESCENDING",
	}
	Sort_Order_value = map[string]int32{
		"ASCENDING":  0,
		"DESCENDING": 1,
	}
)

func (x Sort_Order) Enum() *Sort_Order {
	p := new(Sort_Order)
	*p = x
	return p
}

func (x Sort_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sort_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[4].Descriptor()
}

func (Sort_Order) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_yamr_proto_enumTypes[4]
}

func (x Sort_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sort_Order.Descriptor instead.
func (Sort_Order) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{24, 0}
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *YamrItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{0}
}

func (x *PutRequest) GetItem() *YamrItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors    []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Retryable bool     `protobuf:"varint,2,opt,name=retryable,proto3" json:"retryable,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{1}
}

func (x *PutResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PutResponse) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

type PutBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*YamrItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PutBulkRequest) Reset() {
	*x = PutBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBulkRequest) ProtoMessage() {}

func (x *PutBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBulkRequest.ProtoReflect.Descriptor instead.
func (*PutBulkRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{2}
}

func (x *PutBulkRequest) GetItems() []*YamrItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PutBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entries for items with errors
	Entries []*PutBulkResponse_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *PutBulkResponse) Reset() {
	*x = PutBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBulkResponse) ProtoMessage() {}

func (x *PutBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBulkResponse.ProtoReflect.Descriptor instead.
func (*PutBulkResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{3}
}

func (x *PutBulkResponse) GetEntries() []*PutBulkResponse_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *Query                   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Fields    []*Field                 `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Sorts     []*Sort                  `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	PageInput *SearchRequest_PageInput `protobuf:"bytes,4,opt,name=page_input,json=pageInput,proto3" json:"page_input,omitempty"`
	AllFields bool                     `protobuf:"varint,5,opt,name=all_fields,json=allFields,proto3" json:"all_fields,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{4}
}

func (x *SearchRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchRequest) GetSorts() []*Sort {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SearchRequest) GetPageInput() *SearchRequest_PageInput {
	if x != nil {
		return x.PageInput
	}
	return nil
}

func (x *SearchRequest) GetAllFields() bool {
	if x != nil {
		return x.AllFields
	}
	return false
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results  []*YamrResult            `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	PageInfo *SearchResponse_PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{5}
}

func (x *SearchResponse) GetResults() []*YamrResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResponse) GetPageInfo() *SearchResponse_PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *YamrID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	When      *When    `protobuf:"bytes,4,opt,name=when,proto3" json:"when,omitempty"`
	Fields    []*Field `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	AllFields bool     `protobuf:"varint,6,opt,name=all_fields,json=allFields,proto3" json:"all_fields,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{6}
}

func (x *GetRequest) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetRequest) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *GetRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetRequest) GetAllFields() bool {
	if x != nil {
		return x.AllFields
	}
	return false
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *YamrResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{7}
}

func (x *GetResponse) GetResult() *YamrResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []*YamrID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	When      *When     `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	Fields    []*Field  `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	AllFields bool      `protobuf:"varint,4,opt,name=all_fields,json=allFields,proto3" json:"all_fields,omitempty"`
}

func (x *GetBulkRequest) Reset() {
	*x = GetBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkRequest) ProtoMessage() {}

func (x *GetBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkRequest.ProtoReflect.Descriptor instead.
func (*GetBulkRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{8}
}

func (x *GetBulkRequest) GetIds() []*YamrID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetBulkRequest) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *GetBulkRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetBulkRequest) GetAllFields() bool {
	if x != nil {
		return x.AllFields
	}
	return false
}

type GetBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*YamrResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetBulkResponse) Reset() {
	*x = GetBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkResponse) ProtoMessage() {}

func (x *GetBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkResponse.ProtoReflect.Descriptor instead.
func (*GetBulkResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{9}
}

func (x *GetBulkResponse) GetResults() []*YamrResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Field      *Field `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Downsample int64  `protobuf:"varint,3,opt,name=downsample,proto3" json:"downsample,omitempty"`
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{10}
}

func (x *CountRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CountRequest) GetField() *Field {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *CountRequest) GetDownsample() int64 {
	if x != nil {
		return x.Downsample
	}
	return 0
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []int64      `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Counts     []*YamrCount `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{11}
}

func (x *CountResponse) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *CountResponse) GetCounts() []*YamrCount {
	if x != nil {
		return x.Counts
	}
	return nil
}

type SuggestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggest *Suggest `protobuf:"bytes,7,opt,name=suggest,proto3" json:"suggest,omitempty"`
	Limit   int64    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	NoCount bool     `protobuf:"varint,8,opt,name=no_count,json=noCount,proto3" json:"no_count,omitempty"`
}

func (x *SuggestRequest) Reset() {
	*x = SuggestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestRequest) ProtoMessage() {}

func (x *SuggestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestRequest.ProtoReflect.Descriptor instead.
func (*SuggestRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{12}
}

func (x *SuggestRequest) GetSuggest() *Suggest {
	if x != nil {
		return x.Suggest
	}
	return nil
}

func (x *SuggestRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SuggestRequest) GetNoCount() bool {
	if x != nil {
		return x.NoCount
	}
	return false
}

type SuggestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SuggestResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SuggestResponse) Reset() {
	*x = SuggestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestResponse) ProtoMessage() {}

func (x *SuggestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestResponse.ProtoReflect.Descriptor instead.
func (*SuggestResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{13}
}

func (x *SuggestResponse) GetResults() []*SuggestResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type FrequencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         *Query   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Fields        []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupBy       []*Field `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Downsample    int64    `protobuf:"varint,4,opt,name=downsample,proto3" json:"downsample,omitempty"`
	PersistCounts bool     `protobuf:"varint,5,opt,name=persist_counts,json=persistCounts,proto3" json:"persist_counts,omitempty"`
}

func (x *FrequencyRequest) Reset() {
	*x = FrequencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyRequest) ProtoMessage() {}

func (x *FrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyRequest.ProtoReflect.Descriptor instead.
func (*FrequencyRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{14}
}

func (x *FrequencyRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FrequencyRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FrequencyRequest) GetGroupBy() []*Field {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *FrequencyRequest) GetDownsample() int64 {
	if x != nil {
		return x.Downsample
	}
	return 0
}

func (x *FrequencyRequest) GetPersistCounts() bool {
	if x != nil {
		return x.PersistCounts
	}
	return false
}

type FrequencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []int64                     `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Results    []*FrequencyResponse_Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FrequencyResponse) Reset() {
	*x = FrequencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyResponse) ProtoMessage() {}

func (x *FrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyResponse.ProtoReflect.Descriptor instead.
func (*FrequencyResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{15}
}

func (x *FrequencyResponse) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *FrequencyResponse) GetResults() []*FrequencyResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type YamrID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *YamrID) Reset() {
	*x = YamrID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrID) ProtoMessage() {}

func (x *YamrID) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrID.ProtoReflect.Descriptor instead.
func (*YamrID) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{16}
}

func (x *YamrID) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *YamrID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YamrID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type YamrNamedEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *YamrNamedEdge) Reset() {
	*x = YamrNamedEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrNamedEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrNamedEdge) ProtoMessage() {}

func (x *YamrNamedEdge) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrNamedEdge.ProtoReflect.Descriptor instead.
func (*YamrNamedEdge) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{17}
}

func (x *YamrNamedEdge) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *YamrNamedEdge) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *YamrNamedEdge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type YamrRelated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToIds     []*YamrID        `protobuf:"bytes,1,rep,name=to_ids,json=toIds,proto3" json:"to_ids,omitempty"`
	FromIds   []*YamrID        `protobuf:"bytes,2,rep,name=from_ids,json=fromIds,proto3" json:"from_ids,omitempty"`
	ToEdges   []*YamrNamedEdge `protobuf:"bytes,3,rep,name=to_edges,json=toEdges,proto3" json:"to_edges,omitempty"`
	FromEdges []*YamrNamedEdge `protobuf:"bytes,4,rep,name=from_edges,json=fromEdges,proto3" json:"from_edges,omitempty"`
}

func (x *YamrRelated) Reset() {
	*x = YamrRelated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrRelated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrRelated) ProtoMessage() {}

func (x *YamrRelated) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrRelated.ProtoReflect.Descriptor instead.
func (*YamrRelated) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{18}
}

func (x *YamrRelated) GetToIds() []*YamrID {
	if x != nil {
		return x.ToIds
	}
	return nil
}

func (x *YamrRelated) GetFromIds() []*YamrID {
	if x != nil {
		return x.FromIds
	}
	return nil
}

func (x *YamrRelated) GetToEdges() []*YamrNamedEdge {
	if x != nil {
		return x.ToEdges
	}
	return nil
}

func (x *YamrRelated) GetFromEdges() []*YamrNamedEdge {
	if x != nil {
		return x.FromEdges
	}
	return nil
}

type YamrItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *YamrID                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MessageId     string                         `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Timestamp     int64                          `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsDefinition  bool                           `protobuf:"varint,4,opt,name=is_definition,json=isDefinition,proto3" json:"is_definition,omitempty"`
	Delete        bool                           `protobuf:"varint,6,opt,name=delete,proto3" json:"delete,omitempty"`
	Definitions   []string                       `protobuf:"bytes,7,rep,name=definitions,proto3" json:"definitions,omitempty"`
	Relationships map[string]*YamrRelated        `protobuf:"bytes,9,rep,name=relationships,proto3" json:"relationships,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data          map[string]*common.ScalarArray `protobuf:"bytes,10,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YamrItem) Reset() {
	*x = YamrItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrItem) ProtoMessage() {}

func (x *YamrItem) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrItem.ProtoReflect.Descriptor instead.
func (*YamrItem) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{19}
}

func (x *YamrItem) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *YamrItem) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *YamrItem) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *YamrItem) GetIsDefinition() bool {
	if x != nil {
		return x.IsDefinition
	}
	return false
}

func (x *YamrItem) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

func (x *YamrItem) GetDefinitions() []string {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *YamrItem) GetRelationships() map[string]*YamrRelated {
	if x != nil {
		return x.Relationships
	}
	return nil
}

func (x *YamrItem) GetData() map[string]*common.ScalarArray {
	if x != nil {
		return x.Data
	}
	return nil
}

type YamrResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *YamrID                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Values   []*YamrResult_Value       `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Metadata map[string]*common.Scalar `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YamrResult) Reset() {
	*x = YamrResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrResult) ProtoMessage() {}

func (x *YamrResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrResult.ProtoReflect.Descriptor instead.
func (*YamrResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{20}
}

func (x *YamrResult) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *YamrResult) GetValues() []*YamrResult_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *YamrResult) GetMetadata() map[string]*common.Scalar {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type YamrCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []int64        `protobuf:"varint,2,rep,packed,name=buckets,proto3" json:"buckets,omitempty"`
	Value   *common.Scalar `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *YamrCount) Reset() {
	*x = YamrCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrCount) ProtoMessage() {}

func (x *YamrCount) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrCount.ProtoReflect.Descriptor instead.
func (*YamrCount) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{21}
}

func (x *YamrCount) GetBuckets() []int64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *YamrCount) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type When struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower *When_Bound `protobuf:"bytes,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper *When_Bound `protobuf:"bytes,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *When) Reset() {
	*x = When{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *When) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*When) ProtoMessage() {}

func (x *When) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use When.ProtoReflect.Descriptor instead.
func (*When) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{22}
}

func (x *When) GetLower() *When_Bound {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *When) GetUpper() *When_Bound {
	if x != nil {
		return x.Upper
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the field to return
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Optional aggregator to apply to the field
	Aggregator Aggregator `protobuf:"varint,2,opt,name=aggregator,proto3,enum=zenoss.cloud.Aggregator" json:"aggregator,omitempty"`
	// Optional label to name the field
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{23}
}

func (x *Field) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Field) GetAggregator() Aggregator {
	if x != nil {
		return x.Aggregator
	}
	return Aggregator_NONE
}

func (x *Field) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sort:
	//	*Sort_Aggregate_
	//	*Sort_Relevance_
	Sort isSort_Sort `protobuf_oneof:"sort"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{24}
}

func (m *Sort) GetSort() isSort_Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (x *Sort) GetAggregate() *Sort_Aggregate {
	if x, ok := x.GetSort().(*Sort_Aggregate_); ok {
		return x.Aggregate
	}
	return nil
}

func (x *Sort) GetRelevance() *Sort_Relevance {
	if x, ok := x.GetSort().(*Sort_Relevance_); ok {
		return x.Relevance
	}
	return nil
}

type isSort_Sort interface {
	isSort_Sort()
}

type Sort_Aggregate_ struct {
	Aggregate *Sort_Aggregate `protobuf:"bytes,6,opt,name=aggregate,proto3,oneof"`
}

type Sort_Relevance_ struct {
	Relevance *Sort_Relevance `protobuf:"bytes,7,opt,name=relevance,proto3,oneof"`
}

func (*Sort_Aggregate_) isSort_Sort() {}

func (*Sort_Relevance_) isSort_Sort() {}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tenants    []string `protobuf:"bytes,2,rep,name=tenants,proto3" json:"tenants,omitempty"`
	When       *When    `protobuf:"bytes,3,opt,name=when,proto3" json:"when,omitempty"`
	Subqueries []*Query `protobuf:"bytes,4,rep,name=subqueries,proto3" json:"subqueries,omitempty"`
	Clause     *Clause  `protobuf:"bytes,5,opt,name=clause,proto3" json:"clause,omitempty"`
	Label      string   `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// When when_disabled is true, the when field is ignored, and all results
	// will be a fully open interval as of the current time.
	WhenDisabled bool `protobuf:"varint,7,opt,name=when_disabled,json=whenDisabled,proto3" json:"when_disabled,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{25}
}

func (x *Query) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Query) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *Query) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Query) GetSubqueries() []*Query {
	if x != nil {
		return x.Subqueries
	}
	return nil
}

func (x *Query) GetClause() *Clause {
	if x != nil {
		return x.Clause
	}
	return nil
}

func (x *Query) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Query) GetWhenDisabled() bool {
	if x != nil {
		return x.WhenDisabled
	}
	return false
}

type Suggest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tenants  []string       `protobuf:"bytes,2,rep,name=tenants,proto3" json:"tenants,omitempty"`
	When     *When          `protobuf:"bytes,3,opt,name=when,proto3" json:"when,omitempty"`
	Scope    *Suggest_Scope `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	Criteria []*Clause      `protobuf:"bytes,5,rep,name=criteria,proto3" json:"criteria,omitempty"`
	Label    string         `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Suggest) Reset() {
	*x = Suggest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suggest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suggest) ProtoMessage() {}

func (x *Suggest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suggest.ProtoReflect.Descriptor instead.
func (*Suggest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{26}
}

func (x *Suggest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Suggest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *Suggest) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Suggest) GetScope() *Suggest_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Suggest) GetCriteria() []*Clause {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *Suggest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type Clause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants []string `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	When    *When    `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	// Types that are assignable to Clause:
	//	*Clause_And
	//	*Clause_Or
	//	*Clause_Not
	//	*Clause_Equals
	//	*Clause_Map
	//	*Clause_Range
	//	*Clause_Exists
	//	*Clause_Prefix
	//	*Clause_Regexp
	//	*Clause_Deleted
	//	*Clause_WithIds
	//	*Clause_RelatedTo
	//	*Clause_WithCursor
	Clause isClause_Clause `protobuf_oneof:"clause"`
}

func (x *Clause) Reset() {
	*x = Clause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause) ProtoMessage() {}

func (x *Clause) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause.ProtoReflect.Descriptor instead.
func (*Clause) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{27}
}

func (x *Clause) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *Clause) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

func (m *Clause) GetClause() isClause_Clause {
	if m != nil {
		return m.Clause
	}
	return nil
}

func (x *Clause) GetAnd() *And {
	if x, ok := x.GetClause().(*Clause_And); ok {
		return x.And
	}
	return nil
}

func (x *Clause) GetOr() *Or {
	if x, ok := x.GetClause().(*Clause_Or); ok {
		return x.Or
	}
	return nil
}

func (x *Clause) GetNot() *Not {
	if x, ok := x.GetClause().(*Clause_Not); ok {
		return x.Not
	}
	return nil
}

func (x *Clause) GetEquals() *Equals {
	if x, ok := x.GetClause().(*Clause_Equals); ok {
		return x.Equals
	}
	return nil
}

func (x *Clause) GetMap() *Map {
	if x, ok := x.GetClause().(*Clause_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Clause) GetRange() *Range {
	if x, ok := x.GetClause().(*Clause_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Clause) GetExists() *Exists {
	if x, ok := x.GetClause().(*Clause_Exists); ok {
		return x.Exists
	}
	return nil
}

func (x *Clause) GetPrefix() *Prefix {
	if x, ok := x.GetClause().(*Clause_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *Clause) GetRegexp() *Regexp {
	if x, ok := x.GetClause().(*Clause_Regexp); ok {
		return x.Regexp
	}
	return nil
}

func (x *Clause) GetDeleted() *Deleted {
	if x, ok := x.GetClause().(*Clause_Deleted); ok {
		return x.Deleted
	}
	return nil
}

func (x *Clause) GetWithIds() *WithIDs {
	if x, ok := x.GetClause().(*Clause_WithIds); ok {
		return x.WithIds
	}
	return nil
}

func (x *Clause) GetRelatedTo() *RelatedTo {
	if x, ok := x.GetClause().(*Clause_RelatedTo); ok {
		return x.RelatedTo
	}
	return nil
}

func (x *Clause) GetWithCursor() *WithCursor {
	if x, ok := x.GetClause().(*Clause_WithCursor); ok {
		return x.WithCursor
	}
	return nil
}

type isClause_Clause interface {
	isClause_Clause()
}

type Clause_And struct {
	And *And `protobuf:"bytes,3,opt,name=and,proto3,oneof"`
}

type Clause_Or struct {
	Or *Or `protobuf:"bytes,4,opt,name=or,proto3,oneof"`
}

type Clause_Not struct {
	Not *Not `protobuf:"bytes,5,opt,name=not,proto3,oneof"`
}

type Clause_Equals struct {
	Equals *Equals `protobuf:"bytes,6,opt,name=equals,proto3,oneof"`
}

type Clause_Map struct {
	Map *Map `protobuf:"bytes,7,opt,name=map,proto3,oneof"`
}

type Clause_Range struct {
	Range *Range `protobuf:"bytes,8,opt,name=range,proto3,oneof"`
}

type Clause_Exists struct {
	Exists *Exists `protobuf:"bytes,9,opt,name=exists,proto3,oneof"`
}

type Clause_Prefix struct {
	Prefix *Prefix `protobuf:"bytes,10,opt,name=prefix,proto3,oneof"`
}

type Clause_Regexp struct {
	Regexp *Regexp `protobuf:"bytes,11,opt,name=regexp,proto3,oneof"`
}

type Clause_Deleted struct {
	Deleted *Deleted `protobuf:"bytes,12,opt,name=deleted,proto3,oneof"`
}

type Clause_WithIds struct {
	WithIds *WithIDs `protobuf:"bytes,13,opt,name=with_ids,json=withIds,proto3,oneof"`
}

type Clause_RelatedTo struct {
	RelatedTo *RelatedTo `protobuf:"bytes,14,opt,name=related_to,json=relatedTo,proto3,oneof"`
}

type Clause_WithCursor struct {
	WithCursor *WithCursor `protobuf:"bytes,15,opt,name=with_cursor,json=withCursor,proto3,oneof"`
}

func (*Clause_And) isClause_Clause() {}

func (*Clause_Or) isClause_Clause() {}

func (*Clause_Not) isClause_Clause() {}

func (*Clause_Equals) isClause_Clause() {}

func (*Clause_Map) isClause_Clause() {}

func (*Clause_Range) isClause_Clause() {}

func (*Clause_Exists) isClause_Clause() {}

func (*Clause_Prefix) isClause_Clause() {}

func (*Clause_Regexp) isClause_Clause() {}

func (*Clause_Deleted) isClause_Clause() {}

func (*Clause_WithIds) isClause_Clause() {}

func (*Clause_RelatedTo) isClause_Clause() {}

func (*Clause_WithCursor) isClause_Clause() {}

type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clauses []*Clause `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{28}
}

func (x *And) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clauses []*Clause `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{29}
}

func (x *Or) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

type Not struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clause *Clause `protobuf:"bytes,1,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *Not) Reset() {
	*x = Not{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Not) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Not) ProtoMessage() {}

func (x *Not) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Not.ProtoReflect.Descriptor instead.
func (*Not) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{30}
}

func (x *Not) GetClause() *Clause {
	if x != nil {
		return x.Clause
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	SubLabel string `protobuf:"bytes,2,opt,name=sub_label,json=subLabel,proto3" json:"sub_label,omitempty"`
	SubField string `protobuf:"bytes,3,opt,name=sub_field,json=subField,proto3" json:"sub_field,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{31}
}

func (x *Map) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Map) GetSubLabel() string {
	if x != nil {
		return x.SubLabel
	}
	return ""
}

func (x *Map) GetSubField() string {
	if x != nil {
		return x.SubField
	}
	return ""
}

type Deleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Deleted) Reset() {
	*x = Deleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deleted) ProtoMessage() {}

func (x *Deleted) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deleted.ProtoReflect.Descriptor instead.
func (*Deleted) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{32}
}

type Equals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string         `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value *common.Scalar `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Equals) Reset() {
	*x = Equals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equals) ProtoMessage() {}

func (x *Equals) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equals.ProtoReflect.Descriptor instead.
func (*Equals) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{33}
}

func (x *Equals) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Equals) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Exists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *Exists) Reset() {
	*x = Exists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exists) ProtoMessage() {}

func (x *Exists) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exists.ProtoReflect.Descriptor instead.
func (*Exists) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{34}
}

func (x *Exists) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type WithIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *WithIDs) Reset() {
	*x = WithIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithIDs) ProtoMessage() {}

func (x *WithIDs) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithIDs.ProtoReflect.Descriptor instead.
func (*WithIDs) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{35}
}

func (x *WithIDs) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type WithCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *WithCursor) Reset() {
	*x = WithCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithCursor) ProtoMessage() {}

func (x *WithCursor) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithCursor.ProtoReflect.Descriptor instead.
func (*WithCursor) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{36}
}

func (x *WithCursor) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field           string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	ValueMatcher    string `protobuf:"bytes,2,opt,name=value_matcher,json=valueMatcher,proto3" json:"value_matcher,omitempty"`
	CaseInsensitive bool   `protobuf:"varint,3,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{37}
}

func (x *Prefix) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Prefix) GetValueMatcher() string {
	if x != nil {
		return x.ValueMatcher
	}
	return ""
}

func (x *Prefix) GetCaseInsensitive() bool {
	if x != nil {
		return x.CaseInsensitive
	}
	return false
}

type Regexp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	ValueMatcher string `protobuf:"bytes,2,opt,name=value_matcher,json=valueMatcher,proto3" json:"value_matcher,omitempty"`
}

func (x *Regexp) Reset() {
	*x = Regexp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regexp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regexp) ProtoMessage() {}

func (x *Regexp) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regexp.ProtoReflect.Descriptor instead.
func (*Regexp) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{38}
}

func (x *Regexp) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Regexp) GetValueMatcher() string {
	if x != nil {
		return x.ValueMatcher
	}
	return ""
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string       `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Lower *Range_Bound `protobuf:"bytes,2,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper *Range_Bound `protobuf:"bytes,3,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{39}
}

func (x *Range) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Range) GetLower() *Range_Bound {
	if x != nil {
		return x.Lower
	}
	return nil
}

func (x *Range) GetUpper() *Range_Bound {
	if x != nil {
		return x.Upper
	}
	return nil
}

type RelatedTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field     string         `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Id        *YamrID        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Direction GraphDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=zenoss.cloud.GraphDirection" json:"direction,omitempty"`
}

func (x *RelatedTo) Reset() {
	*x = RelatedTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTo) ProtoMessage() {}

func (x *RelatedTo) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTo.ProtoReflect.Descriptor instead.
func (*RelatedTo) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{40}
}

func (x *RelatedTo) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RelatedTo) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedTo) GetDirection() GraphDirection {
	if x != nil {
		return x.Direction
	}
	return GraphDirection_IN
}

// A message that serves as input to the
//  field_index and value_index tables
// It represents one value for one field of a YamrItem
type IndexItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the object
	Id *YamrID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of this data
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Whether this message describes a definition
	IsDefinition bool `protobuf:"varint,3,opt,name=is_definition,json=isDefinition,proto3" json:"is_definition,omitempty"`
	// The field we are indexing
	Field string `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`
	// Whether or not this value is present at this time
	Presence bool `protobuf:"varint,6,opt,name=presence,proto3" json:"presence,omitempty"`
	// Original field name that was transformed
	OriginalField string `protobuf:"bytes,7,opt,name=original_field,json=originalField,proto3" json:"original_field,omitempty"`
	// Number of bytes zeroed out. Only set if transformed
	TrailingZeroCount int32 `protobuf:"varint,8,opt,name=trailing_zero_count,json=trailingZeroCount,proto3" json:"trailing_zero_count,omitempty"`
	// The value for this field
	Value *common.Scalar `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	// The interval that this change impacts
	When *When `protobuf:"bytes,10,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *IndexItem) Reset() {
	*x = IndexItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexItem) ProtoMessage() {}

func (x *IndexItem) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexItem.ProtoReflect.Descriptor instead.
func (*IndexItem) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{41}
}

func (x *IndexItem) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IndexItem) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IndexItem) GetIsDefinition() bool {
	if x != nil {
		return x.IsDefinition
	}
	return false
}

func (x *IndexItem) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *IndexItem) GetPresence() bool {
	if x != nil {
		return x.Presence
	}
	return false
}

func (x *IndexItem) GetOriginalField() string {
	if x != nil {
		return x.OriginalField
	}
	return ""
}

func (x *IndexItem) GetTrailingZeroCount() int32 {
	if x != nil {
		return x.TrailingZeroCount
	}
	return 0
}

func (x *IndexItem) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *IndexItem) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

type PutBulkResponse_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *YamrID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MessageId string   `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Errors    []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	Retryable bool     `protobuf:"varint,4,opt,name=retryable,proto3" json:"retryable,omitempty"`
}

func (x *PutBulkResponse_Entry) Reset() {
	*x = PutBulkResponse_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutBulkResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBulkResponse_Entry) ProtoMessage() {}

func (x *PutBulkResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBulkResponse_Entry.ProtoReflect.Descriptor instead.
func (*PutBulkResponse_Entry) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PutBulkResponse_Entry) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PutBulkResponse_Entry) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *PutBulkResponse_Entry) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PutBulkResponse_Entry) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

type SearchRequest_PageInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor    string                            `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction SearchRequest_PageInput_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=zenoss.cloud.SearchRequest_PageInput_Direction" json:"direction,omitempty"`
	Limit     int64                             `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Ttl       int64                             `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *SearchRequest_PageInput) Reset() {
	*x = SearchRequest_PageInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest_PageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest_PageInput) ProtoMessage() {}

func (x *SearchRequest_PageInput) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest_PageInput.ProtoReflect.Descriptor instead.
func (*SearchRequest_PageInput) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{4, 0}
}

func (x *SearchRequest_PageInput) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *SearchRequest_PageInput) GetDirection() SearchRequest_PageInput_Direction {
	if x != nil {
		return x.Direction
	}
	return SearchRequest_PageInput_FORWARD
}

func (x *SearchRequest_PageInput) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchRequest_PageInput) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type SearchResponse_PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartCursor string `protobuf:"bytes,1,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	EndCursor   string `protobuf:"bytes,2,opt,name=end_cursor,json=endCursor,proto3" json:"end_cursor,omitempty"`
	Count       int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	HasPrev     bool   `protobuf:"varint,4,opt,name=has_prev,json=hasPrev,proto3" json:"has_prev,omitempty"`
	HasNext     bool   `protobuf:"varint,5,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	TotalCount  int64  `protobuf:"varint,6,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Ttl         int64  `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *SearchResponse_PageInfo) Reset() {
	*x = SearchResponse_PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_PageInfo) ProtoMessage() {}

func (x *SearchResponse_PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_PageInfo.ProtoReflect.Descriptor instead.
func (*SearchResponse_PageInfo) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SearchResponse_PageInfo) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *SearchResponse_PageInfo) GetEndCursor() string {
	if x != nil {
		return x.EndCursor
	}
	return ""
}

func (x *SearchResponse_PageInfo) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchResponse_PageInfo) GetHasPrev() bool {
	if x != nil {
		return x.HasPrev
	}
	return false
}

func (x *SearchResponse_PageInfo) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *SearchResponse_PageInfo) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *SearchResponse_PageInfo) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type SuggestResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string         `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Type   string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Field  string         `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	Value  *common.Scalar `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Count  int64          `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SuggestResponse_Result) Reset() {
	*x = SuggestResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestResponse_Result) ProtoMessage() {}

func (x *SuggestResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestResponse_Result.ProtoReflect.Descriptor instead.
func (*SuggestResponse_Result) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SuggestResponse_Result) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *SuggestResponse_Result) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SuggestResponse_Result) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SuggestResponse_Result) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SuggestResponse_Result) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FrequencyResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    map[string]*common.Scalar `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values []int64                   `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FrequencyResponse_Result) Reset() {
	*x = FrequencyResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyResponse_Result) ProtoMessage() {}

func (x *FrequencyResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyResponse_Result.ProtoReflect.Descriptor instead.
func (*FrequencyResponse_Result) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{15, 0}
}

func (x *FrequencyResponse_Result) GetKey() map[string]*common.Scalar {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FrequencyResponse_Result) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type YamrResult_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	When *When                          `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	Data map[string]*common.ScalarArray `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YamrResult_Value) Reset() {
	*x = YamrResult_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrResult_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrResult_Value) ProtoMessage() {}

func (x *YamrResult_Value) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrResult_Value.ProtoReflect.Descriptor instead.
func (*YamrResult_Value) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{20, 0}
}

func (x *YamrResult_Value) GetWhen() *When {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *YamrResult_Value) GetData() map[string]*common.ScalarArray {
	if x != nil {
		return x.Data
	}
	return nil
}

type When_Bound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	BoundType BoundType `protobuf:"varint,2,opt,name=bound_type,json=boundType,proto3,enum=zenoss.cloud.BoundType" json:"bound_type,omitempty"`
}

func (x *When_Bound) Reset() {
	*x = When_Bound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *When_Bound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*When_Bound) ProtoMessage() {}

func (x *When_Bound) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use When_Bound.ProtoReflect.Descriptor instead.
func (*When_Bound) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{22, 0}
}

func (x *When_Bound) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *When_Bound) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_UNBOUNDED
}

type Sort_Aggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field         string     `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Aggregator    Aggregator `protobuf:"varint,2,opt,name=aggregator,proto3,enum=zenoss.cloud.Aggregator" json:"aggregator,omitempty"`
	ValueOrder    Sort_Order `protobuf:"varint,3,opt,name=value_order,json=valueOrder,proto3,enum=zenoss.cloud.Sort_Order" json:"value_order,omitempty"`
	TemporalOrder Sort_Order `protobuf:"varint,4,opt,name=temporal_order,json=temporalOrder,proto3,enum=zenoss.cloud.Sort_Order" json:"temporal_order,omitempty"`
}

func (x *Sort_Aggregate) Reset() {
	*x = Sort_Aggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort_Aggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort_Aggregate) ProtoMessage() {}

func (x *Sort_Aggregate) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort_Aggregate.ProtoReflect.Descriptor instead.
func (*Sort_Aggregate) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{24, 0}
}

func (x *Sort_Aggregate) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Sort_Aggregate) GetAggregator() Aggregator {
	if x != nil {
		return x.Aggregator
	}
	return Aggregator_NONE
}

func (x *Sort_Aggregate) GetValueOrder() Sort_Order {
	if x != nil {
		return x.ValueOrder
	}
	return Sort_ASCENDING
}

func (x *Sort_Aggregate) GetTemporalOrder() Sort_Order {
	if x != nil {
		return x.TemporalOrder
	}
	return Sort_ASCENDING
}

type Sort_Relevance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *YamrID `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Field string  `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Limit int32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Sort_Relevance) Reset() {
	*x = Sort_Relevance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort_Relevance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort_Relevance) ProtoMessage() {}

func (x *Sort_Relevance) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort_Relevance.ProtoReflect.Descriptor instead.
func (*Sort_Relevance) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{24, 1}
}

func (x *Sort_Relevance) GetKey() *YamrID {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Sort_Relevance) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Sort_Relevance) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Suggest_Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subqueries []*Query `protobuf:"bytes,1,rep,name=subqueries,proto3" json:"subqueries,omitempty"`
	Clause     *Clause  `protobuf:"bytes,2,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *Suggest_Scope) Reset() {
	*x = Suggest_Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suggest_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suggest_Scope) ProtoMessage() {}

func (x *Suggest_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suggest_Scope.ProtoReflect.Descriptor instead.
func (*Suggest_Scope) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{26, 0}
}

func (x *Suggest_Scope) GetSubqueries() []*Query {
	if x != nil {
		return x.Subqueries
	}
	return nil
}

func (x *Suggest_Scope) GetClause() *Clause {
	if x != nil {
		return x.Clause
	}
	return nil
}

type Range_Bound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoundType BoundType      `protobuf:"varint,2,opt,name=bound_type,json=boundType,proto3,enum=zenoss.cloud.BoundType" json:"bound_type,omitempty"`
	Value     *common.Scalar `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Range_Bound) Reset() {
	*x = Range_Bound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range_Bound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range_Bound) ProtoMessage() {}

func (x *Range_Bound) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range_Bound.ProtoReflect.Descriptor instead.
func (*Range_Bound) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP(), []int{39, 0}
}

func (x *Range_Bound) GetBoundType() BoundType {
	if x != nil {
		return x.BoundType
	}
	return BoundType_UNBOUNDED
}

func (x *Range_Bound) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_zenoss_zing_proto_cloud_yamr_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_yamr_proto_rawDesc = []byte{
	0x0a, 0x22, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x1a, 0x24, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x22, 0x43, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3e, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0xbb, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x4d,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x26, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x22, 0xd6, 0x02,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xcb, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61,
	0x6d, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xac, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x60, 0x0a,
	0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61,
	0x6d, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xb3, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x11, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x06, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x0d,
	0x59, 0x61, 0x6d, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x01,
	0x0a, 0x0b, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d,
	0x72, 0x49, 0x44, 0x52, 0x05, 0x74, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72,
	0x49, 0x44, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x74,
	0x6f, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x45, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x45, 0x64, 0x67, 0x65, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x64, 0x67, 0x65, 0x73, 0x22,
	0xa2, 0x04, 0x0a, 0x08, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5b, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x52, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x52, 0x10, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0xcb, 0x03, 0x0a, 0x0a, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59,
	0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc7, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x68, 0x65,
	0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x52, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a,
	0x51, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x57, 0x0a, 0x09, 0x59, 0x61, 0x6d, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xbb, 0x01, 0x0a, 0x04,
	0x57, 0x68, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x1a, 0x53, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x8b, 0x04, 0x0a, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xd7, 0x01,
	0x0a, 0x09, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x5f, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x26, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xfb, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e,
	0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x68, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0xc6, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e,
	0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x1a, 0x6a, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xb8, 0x05,
	0x0a, 0x06, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x57, 0x68, 0x65, 0x6e, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x72, 0x48,
	0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x06,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x03,
	0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03,
	0x6d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x77, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12,
	0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22,
	0x34, 0x0a, 0x02, 0x4f, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x03, 0x4d, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x09, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x50, 0x0a, 0x06,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x1e,
	0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x1b,
	0x0a, 0x07, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0x6e, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x43, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x71, 0x0a, 0x05, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x83, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd7, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x57, 0x68, 0x65, 0x6e, 0x52,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x2a, 0x30, 0x0a, 0x09, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x3d, 0x0a,
	0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49,
	0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x2b, 0x0a, 0x0e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x32, 0xec, 0x03, 0x0a, 0x0b, 0x59, 0x61,
	0x6d, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x50, 0x75, 0x74,
	0x12, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x50, 0x75, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75,
	0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x3a, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x90, 0x01, 0x0a, 0x0a, 0x59, 0x61, 0x6d,
	0x72, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x18,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1c,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75,
	0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x54, 0x0a, 0x20, 0x6f,
	0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x61, 0x6d, 0x72, 0x50,
	0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_yamr_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_yamr_proto_rawDescData = file_zenoss_zing_proto_cloud_yamr_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_yamr_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_yamr_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_yamr_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_yamr_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_yamr_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_yamr_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_zenoss_zing_proto_cloud_yamr_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_zenoss_zing_proto_cloud_yamr_proto_goTypes = []interface{}{
	(BoundType)(0),                         // 0: zenoss.cloud.BoundType
	(Aggregator)(0),                        // 1: zenoss.cloud.Aggregator
	(GraphDirection)(0),                    // 2: zenoss.cloud.GraphDirection
	(SearchRequest_PageInput_Direction)(0), // 3: zenoss.cloud.SearchRequest.PageInput.Direction
	(Sort_Order)(0),                        // 4: zenoss.cloud.Sort.Order
	(*PutRequest)(nil),                     // 5: zenoss.cloud.PutRequest
	(*PutResponse)(nil),                    // 6: zenoss.cloud.PutResponse
	(*PutBulkRequest)(nil),                 // 7: zenoss.cloud.PutBulkRequest
	(*PutBulkResponse)(nil),                // 8: zenoss.cloud.PutBulkResponse
	(*SearchRequest)(nil),                  // 9: zenoss.cloud.SearchRequest
	(*SearchResponse)(nil),                 // 10: zenoss.cloud.SearchResponse
	(*GetRequest)(nil),                     // 11: zenoss.cloud.GetRequest
	(*GetResponse)(nil),                    // 12: zenoss.cloud.GetResponse
	(*GetBulkRequest)(nil),                 // 13: zenoss.cloud.GetBulkRequest
	(*GetBulkResponse)(nil),                // 14: zenoss.cloud.GetBulkResponse
	(*CountRequest)(nil),                   // 15: zenoss.cloud.CountRequest
	(*CountResponse)(nil),                  // 16: zenoss.cloud.CountResponse
	(*SuggestRequest)(nil),                 // 17: zenoss.cloud.SuggestRequest
	(*SuggestResponse)(nil),                // 18: zenoss.cloud.SuggestResponse
	(*FrequencyRequest)(nil),               // 19: zenoss.cloud.FrequencyRequest
	(*FrequencyResponse)(nil),              // 20: zenoss.cloud.FrequencyResponse
	(*YamrID)(nil),                         // 21: zenoss.cloud.YamrID
	(*YamrNamedEdge)(nil),                  // 22: zenoss.cloud.YamrNamedEdge
	(*YamrRelated)(nil),                    // 23: zenoss.cloud.YamrRelated
	(*YamrItem)(nil),                       // 24: zenoss.cloud.YamrItem
	(*YamrResult)(nil),                     // 25: zenoss.cloud.YamrResult
	(*YamrCount)(nil),                      // 26: zenoss.cloud.YamrCount
	(*When)(nil),                           // 27: zenoss.cloud.When
	(*Field)(nil),                          // 28: zenoss.cloud.Field
	(*Sort)(nil),                           // 29: zenoss.cloud.Sort
	(*Query)(nil),                          // 30: zenoss.cloud.Query
	(*Suggest)(nil),                        // 31: zenoss.cloud.Suggest
	(*Clause)(nil),                         // 32: zenoss.cloud.Clause
	(*And)(nil),                            // 33: zenoss.cloud.And
	(*Or)(nil),                             // 34: zenoss.cloud.Or
	(*Not)(nil),                            // 35: zenoss.cloud.Not
	(*Map)(nil),                            // 36: zenoss.cloud.Map
	(*Deleted)(nil),                        // 37: zenoss.cloud.Deleted
	(*Equals)(nil),                         // 38: zenoss.cloud.Equals
	(*Exists)(nil),                         // 39: zenoss.cloud.Exists
	(*WithIDs)(nil),                        // 40: zenoss.cloud.WithIDs
	(*WithCursor)(nil),                     // 41: zenoss.cloud.WithCursor
	(*Prefix)(nil),                         // 42: zenoss.cloud.Prefix
	(*Regexp)(nil),                         // 43: zenoss.cloud.Regexp
	(*Range)(nil),                          // 44: zenoss.cloud.Range
	(*RelatedTo)(nil),                      // 45: zenoss.cloud.RelatedTo
	(*IndexItem)(nil),                      // 46: zenoss.cloud.IndexItem
	(*PutBulkResponse_Entry)(nil),          // 47: zenoss.cloud.PutBulkResponse.Entry
	(*SearchRequest_PageInput)(nil),        // 48: zenoss.cloud.SearchRequest.PageInput
	(*SearchResponse_PageInfo)(nil),        // 49: zenoss.cloud.SearchResponse.PageInfo
	(*SuggestResponse_Result)(nil),         // 50: zenoss.cloud.SuggestResponse.Result
	(*FrequencyResponse_Result)(nil),       // 51: zenoss.cloud.FrequencyResponse.Result
	nil,                                    // 52: zenoss.cloud.FrequencyResponse.Result.KeyEntry
	nil,                                    // 53: zenoss.cloud.YamrItem.RelationshipsEntry
	nil,                                    // 54: zenoss.cloud.YamrItem.DataEntry
	(*YamrResult_Value)(nil),               // 55: zenoss.cloud.YamrResult.Value
	nil,                                    // 56: zenoss.cloud.YamrResult.MetadataEntry
	nil,                                    // 57: zenoss.cloud.YamrResult.Value.DataEntry
	(*When_Bound)(nil),                     // 58: zenoss.cloud.When.Bound
	(*Sort_Aggregate)(nil),                 // 59: zenoss.cloud.Sort.Aggregate
	(*Sort_Relevance)(nil),                 // 60: zenoss.cloud.Sort.Relevance
	(*Suggest_Scope)(nil),                  // 61: zenoss.cloud.Suggest.Scope
	(*Range_Bound)(nil),                    // 62: zenoss.cloud.Range.Bound
	(*common.Scalar)(nil),                  // 63: zenoss.cloud.Scalar
	(*common.ScalarArray)(nil),             // 64: zenoss.cloud.ScalarArray
}
var file_zenoss_zing_proto_cloud_yamr_proto_depIdxs = []int32{
	24,  // 0: zenoss.cloud.PutRequest.item:type_name -> zenoss.cloud.YamrItem
	24,  // 1: zenoss.cloud.PutBulkRequest.items:type_name -> zenoss.cloud.YamrItem
	47,  // 2: zenoss.cloud.PutBulkResponse.entries:type_name -> zenoss.cloud.PutBulkResponse.Entry
	30,  // 3: zenoss.cloud.SearchRequest.query:type_name -> zenoss.cloud.Query
	28,  // 4: zenoss.cloud.SearchRequest.fields:type_name -> zenoss.cloud.Field
	29,  // 5: zenoss.cloud.SearchRequest.sorts:type_name -> zenoss.cloud.Sort
	48,  // 6: zenoss.cloud.SearchRequest.page_input:type_name -> zenoss.cloud.SearchRequest.PageInput
	25,  // 7: zenoss.cloud.SearchResponse.results:type_name -> zenoss.cloud.YamrResult
	49,  // 8: zenoss.cloud.SearchResponse.page_info:type_name -> zenoss.cloud.SearchResponse.PageInfo
	21,  // 9: zenoss.cloud.GetRequest.id:type_name -> zenoss.cloud.YamrID
	27,  // 10: zenoss.cloud.GetRequest.when:type_name -> zenoss.cloud.When
	28,  // 11: zenoss.cloud.GetRequest.fields:type_name -> zenoss.cloud.Field
	25,  // 12: zenoss.cloud.GetResponse.result:type_name -> zenoss.cloud.YamrResult
	21,  // 13: zenoss.cloud.GetBulkRequest.ids:type_name -> zenoss.cloud.YamrID
	27,  // 14: zenoss.cloud.GetBulkRequest.when:type_name -> zenoss.cloud.When
	28,  // 15: zenoss.cloud.GetBulkRequest.fields:type_name -> zenoss.cloud.Field
	25,  // 16: zenoss.cloud.GetBulkResponse.results:type_name -> zenoss.cloud.YamrResult
	30,  // 17: zenoss.cloud.CountRequest.query:type_name -> zenoss.cloud.Query
	28,  // 18: zenoss.cloud.CountRequest.field:type_name -> zenoss.cloud.Field
	26,  // 19: zenoss.cloud.CountResponse.counts:type_name -> zenoss.cloud.YamrCount
	31,  // 20: zenoss.cloud.SuggestRequest.suggest:type_name -> zenoss.cloud.Suggest
	50,  // 21: zenoss.cloud.SuggestResponse.results:type_name -> zenoss.cloud.SuggestResponse.Result
	30,  // 22: zenoss.cloud.FrequencyRequest.query:type_name -> zenoss.cloud.Query
	28,  // 23: zenoss.cloud.FrequencyRequest.fields:type_name -> zenoss.cloud.Field
	28,  // 24: zenoss.cloud.FrequencyRequest.group_by:type_name -> zenoss.cloud.Field
	51,  // 25: zenoss.cloud.FrequencyResponse.results:type_name -> zenoss.cloud.FrequencyResponse.Result
	21,  // 26: zenoss.cloud.YamrRelated.to_ids:type_name -> zenoss.cloud.YamrID
	21,  // 27: zenoss.cloud.YamrRelated.from_ids:type_name -> zenoss.cloud.YamrID
	22,  // 28: zenoss.cloud.YamrRelated.to_edges:type_name -> zenoss.cloud.YamrNamedEdge
	22,  // 29: zenoss.cloud.YamrRelated.from_edges:type_name -> zenoss.cloud.YamrNamedEdge
	21,  // 30: zenoss.cloud.YamrItem.id:type_name -> zenoss.cloud.YamrID
	53,  // 31: zenoss.cloud.YamrItem.relationships:type_name -> zenoss.cloud.YamrItem.RelationshipsEntry
	54,  // 32: zenoss.cloud.YamrItem.data:type_name -> zenoss.cloud.YamrItem.DataEntry
	21,  // 33: zenoss.cloud.YamrResult.id:type_name -> zenoss.cloud.YamrID
	55,  // 34: zenoss.cloud.YamrResult.values:type_name -> zenoss.cloud.YamrResult.Value
	56,  // 35: zenoss.cloud.YamrResult.metadata:type_name -> zenoss.cloud.YamrResult.MetadataEntry
	63,  // 36: zenoss.cloud.YamrCount.value:type_name -> zenoss.cloud.Scalar
	58,  // 37: zenoss.cloud.When.lower:type_name -> zenoss.cloud.When.Bound
	58,  // 38: zenoss.cloud.When.upper:type_name -> zenoss.cloud.When.Bound
	1,   // 39: zenoss.cloud.Field.aggregator:type_name -> zenoss.cloud.Aggregator
	59,  // 40: zenoss.cloud.Sort.aggregate:type_name -> zenoss.cloud.Sort.Aggregate
	60,  // 41: zenoss.cloud.Sort.relevance:type_name -> zenoss.cloud.Sort.Relevance
	27,  // 42: zenoss.cloud.Query.when:type_name -> zenoss.cloud.When
	30,  // 43: zenoss.cloud.Query.subqueries:type_name -> zenoss.cloud.Query
	32,  // 44: zenoss.cloud.Query.clause:type_name -> zenoss.cloud.Clause
	27,  // 45: zenoss.cloud.Suggest.when:type_name -> zenoss.cloud.When
	61,  // 46: zenoss.cloud.Suggest.scope:type_name -> zenoss.cloud.Suggest.Scope
	32,  // 47: zenoss.cloud.Suggest.criteria:type_name -> zenoss.cloud.Clause
	27,  // 48: zenoss.cloud.Clause.when:type_name -> zenoss.cloud.When
	33,  // 49: zenoss.cloud.Clause.and:type_name -> zenoss.cloud.And
	34,  // 50: zenoss.cloud.Clause.or:type_name -> zenoss.cloud.Or
	35,  // 51: zenoss.cloud.Clause.not:type_name -> zenoss.cloud.Not
	38,  // 52: zenoss.cloud.Clause.equals:type_name -> zenoss.cloud.Equals
	36,  // 53: zenoss.cloud.Clause.map:type_name -> zenoss.cloud.Map
	44,  // 54: zenoss.cloud.Clause.range:type_name -> zenoss.cloud.Range
	39,  // 55: zenoss.cloud.Clause.exists:type_name -> zenoss.cloud.Exists
	42,  // 56: zenoss.cloud.Clause.prefix:type_name -> zenoss.cloud.Prefix
	43,  // 57: zenoss.cloud.Clause.regexp:type_name -> zenoss.cloud.Regexp
	37,  // 58: zenoss.cloud.Clause.deleted:type_name -> zenoss.cloud.Deleted
	40,  // 59: zenoss.cloud.Clause.with_ids:type_name -> zenoss.cloud.WithIDs
	45,  // 60: zenoss.cloud.Clause.related_to:type_name -> zenoss.cloud.RelatedTo
	41,  // 61: zenoss.cloud.Clause.with_cursor:type_name -> zenoss.cloud.WithCursor
	32,  // 62: zenoss.cloud.And.clauses:type_name -> zenoss.cloud.Clause
	32,  // 63: zenoss.cloud.Or.clauses:type_name -> zenoss.cloud.Clause
	32,  // 64: zenoss.cloud.Not.clause:type_name -> zenoss.cloud.Clause
	63,  // 65: zenoss.cloud.Equals.value:type_name -> zenoss.cloud.Scalar
	62,  // 66: zenoss.cloud.Range.lower:type_name -> zenoss.cloud.Range.Bound
	62,  // 67: zenoss.cloud.Range.upper:type_name -> zenoss.cloud.Range.Bound
	21,  // 68: zenoss.cloud.RelatedTo.id:type_name -> zenoss.cloud.YamrID
	2,   // 69: zenoss.cloud.RelatedTo.direction:type_name -> zenoss.cloud.GraphDirection
	21,  // 70: zenoss.cloud.IndexItem.id:type_name -> zenoss.cloud.YamrID
	63,  // 71: zenoss.cloud.IndexItem.value:type_name -> zenoss.cloud.Scalar
	27,  // 72: zenoss.cloud.IndexItem.when:type_name -> zenoss.cloud.When
	21,  // 73: zenoss.cloud.PutBulkResponse.Entry.id:type_name -> zenoss.cloud.YamrID
	3,   // 74: zenoss.cloud.SearchRequest.PageInput.direction:type_name -> zenoss.cloud.SearchRequest.PageInput.Direction
	63,  // 75: zenoss.cloud.SuggestResponse.Result.value:type_name -> zenoss.cloud.Scalar
	52,  // 76: zenoss.cloud.FrequencyResponse.Result.key:type_name -> zenoss.cloud.FrequencyResponse.Result.KeyEntry
	63,  // 77: zenoss.cloud.FrequencyResponse.Result.KeyEntry.value:type_name -> zenoss.cloud.Scalar
	23,  // 78: zenoss.cloud.YamrItem.RelationshipsEntry.value:type_name -> zenoss.cloud.YamrRelated
	64,  // 79: zenoss.cloud.YamrItem.DataEntry.value:type_name -> zenoss.cloud.ScalarArray
	27,  // 80: zenoss.cloud.YamrResult.Value.when:type_name -> zenoss.cloud.When
	57,  // 81: zenoss.cloud.YamrResult.Value.data:type_name -> zenoss.cloud.YamrResult.Value.DataEntry
	63,  // 82: zenoss.cloud.YamrResult.MetadataEntry.value:type_name -> zenoss.cloud.Scalar
	64,  // 83: zenoss.cloud.YamrResult.Value.DataEntry.value:type_name -> zenoss.cloud.ScalarArray
	0,   // 84: zenoss.cloud.When.Bound.bound_type:type_name -> zenoss.cloud.BoundType
	1,   // 85: zenoss.cloud.Sort.Aggregate.aggregator:type_name -> zenoss.cloud.Aggregator
	4,   // 86: zenoss.cloud.Sort.Aggregate.value_order:type_name -> zenoss.cloud.Sort.Order
	4,   // 87: zenoss.cloud.Sort.Aggregate.temporal_order:type_name -> zenoss.cloud.Sort.Order
	21,  // 88: zenoss.cloud.Sort.Relevance.key:type_name -> zenoss.cloud.YamrID
	30,  // 89: zenoss.cloud.Suggest.Scope.subqueries:type_name -> zenoss.cloud.Query
	32,  // 90: zenoss.cloud.Suggest.Scope.clause:type_name -> zenoss.cloud.Clause
	0,   // 91: zenoss.cloud.Range.Bound.bound_type:type_name -> zenoss.cloud.BoundType
	63,  // 92: zenoss.cloud.Range.Bound.value:type_name -> zenoss.cloud.Scalar
	5,   // 93: zenoss.cloud.YamrService.Put:input_type -> zenoss.cloud.PutRequest
	7,   // 94: zenoss.cloud.YamrService.PutBulk:input_type -> zenoss.cloud.PutBulkRequest
	9,   // 95: zenoss.cloud.YamrService.Search:input_type -> zenoss.cloud.SearchRequest
	9,   // 96: zenoss.cloud.YamrService.StreamingSearch:input_type -> zenoss.cloud.SearchRequest
	11,  // 97: zenoss.cloud.YamrService.Get:input_type -> zenoss.cloud.GetRequest
	13,  // 98: zenoss.cloud.YamrService.GetBulk:input_type -> zenoss.cloud.GetBulkRequest
	15,  // 99: zenoss.cloud.YamrService.Count:input_type -> zenoss.cloud.CountRequest
	5,   // 100: zenoss.cloud.YamrIngest.Put:input_type -> zenoss.cloud.PutRequest
	7,   // 101: zenoss.cloud.YamrIngest.PutBulk:input_type -> zenoss.cloud.PutBulkRequest
	6,   // 102: zenoss.cloud.YamrService.Put:output_type -> zenoss.cloud.PutResponse
	8,   // 103: zenoss.cloud.YamrService.PutBulk:output_type -> zenoss.cloud.PutBulkResponse
	10,  // 104: zenoss.cloud.YamrService.Search:output_type -> zenoss.cloud.SearchResponse
	10,  // 105: zenoss.cloud.YamrService.StreamingSearch:output_type -> zenoss.cloud.SearchResponse
	12,  // 106: zenoss.cloud.YamrService.Get:output_type -> zenoss.cloud.GetResponse
	14,  // 107: zenoss.cloud.YamrService.GetBulk:output_type -> zenoss.cloud.GetBulkResponse
	16,  // 108: zenoss.cloud.YamrService.Count:output_type -> zenoss.cloud.CountResponse
	6,   // 109: zenoss.cloud.YamrIngest.Put:output_type -> zenoss.cloud.PutResponse
	8,   // 110: zenoss.cloud.YamrIngest.PutBulk:output_type -> zenoss.cloud.PutBulkResponse
	102, // [102:111] is the sub-list for method output_type
	93,  // [93:102] is the sub-list for method input_type
	93,  // [93:93] is the sub-list for extension type_name
	93,  // [93:93] is the sub-list for extension extendee
	0,   // [0:93] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_yamr_proto_init() }
func file_zenoss_zing_proto_cloud_yamr_proto_init() {
	if File_zenoss_zing_proto_cloud_yamr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrNamedEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrRelated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*When); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suggest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Not); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regexp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutBulkResponse_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest_PageInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrResult_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*When_Bound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort_Aggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort_Relevance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suggest_Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range_Bound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Sort_Aggregate_)(nil),
		(*Sort_Relevance_)(nil),
	}
	file_zenoss_zing_proto_cloud_yamr_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Clause_And)(nil),
		(*Clause_Or)(nil),
		(*Clause_Not)(nil),
		(*Clause_Equals)(nil),
		(*Clause_Map)(nil),
		(*Clause_Range)(nil),
		(*Clause_Exists)(nil),
		(*Clause_Prefix)(nil),
		(*Clause_Regexp)(nil),
		(*Clause_Deleted)(nil),
		(*Clause_WithIds)(nil),
		(*Clause_RelatedTo)(nil),
		(*Clause_WithCursor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_yamr_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_yamr_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_yamr_proto_depIdxs,
		EnumInfos:         file_zenoss_zing_proto_cloud_yamr_proto_enumTypes,
		MessageInfos:      file_zenoss_zing_proto_cloud_yamr_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_yamr_proto = out.File
	file_zenoss_zing_proto_cloud_yamr_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_yamr_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_yamr_proto_depIdxs = nil
}
