// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/yamr_executor.proto

package yamr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YamrExecutorClient is the client API for YamrExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YamrExecutorClient interface {
	Execute(ctx context.Context, in *YamrExecuteRequest, opts ...grpc.CallOption) (YamrExecutor_ExecuteClient, error)
}

type yamrExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrExecutorClient(cc grpc.ClientConnInterface) YamrExecutorClient {
	return &yamrExecutorClient{cc}
}

func (c *yamrExecutorClient) Execute(ctx context.Context, in *YamrExecuteRequest, opts ...grpc.CallOption) (YamrExecutor_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &YamrExecutor_ServiceDesc.Streams[0], "/zenoss.cloud.YamrExecutor/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrExecutorExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrExecutor_ExecuteClient interface {
	Recv() (*YamrExecuteResponse, error)
	grpc.ClientStream
}

type yamrExecutorExecuteClient struct {
	grpc.ClientStream
}

func (x *yamrExecutorExecuteClient) Recv() (*YamrExecuteResponse, error) {
	m := new(YamrExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YamrExecutorServer is the server API for YamrExecutor service.
// All implementations must embed UnimplementedYamrExecutorServer
// for forward compatibility
type YamrExecutorServer interface {
	Execute(*YamrExecuteRequest, YamrExecutor_ExecuteServer) error
	mustEmbedUnimplementedYamrExecutorServer()
}

// UnimplementedYamrExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedYamrExecutorServer struct {
}

func (UnimplementedYamrExecutorServer) Execute(*YamrExecuteRequest, YamrExecutor_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedYamrExecutorServer) mustEmbedUnimplementedYamrExecutorServer() {}

// UnsafeYamrExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YamrExecutorServer will
// result in compilation errors.
type UnsafeYamrExecutorServer interface {
	mustEmbedUnimplementedYamrExecutorServer()
}

func RegisterYamrExecutorServer(s grpc.ServiceRegistrar, srv YamrExecutorServer) {
	s.RegisterService(&YamrExecutor_ServiceDesc, srv)
}

func _YamrExecutor_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(YamrExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrExecutorServer).Execute(m, &yamrExecutorExecuteServer{stream})
}

type YamrExecutor_ExecuteServer interface {
	Send(*YamrExecuteResponse) error
	grpc.ServerStream
}

type yamrExecutorExecuteServer struct {
	grpc.ServerStream
}

func (x *yamrExecutorExecuteServer) Send(m *YamrExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// YamrExecutor_ServiceDesc is the grpc.ServiceDesc for YamrExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YamrExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrExecutor",
	HandlerType: (*YamrExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _YamrExecutor_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_executor.proto",
}
