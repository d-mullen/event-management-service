// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zenoss/zing/proto/cloud/yamr_resolver.proto

package yamr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type YamrResolveRequest struct {
	Items                []*YamrResolveRequest_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *YamrResolveRequest) Reset()         { *m = YamrResolveRequest{} }
func (m *YamrResolveRequest) String() string { return proto.CompactTextString(m) }
func (*YamrResolveRequest) ProtoMessage()    {}
func (*YamrResolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89eba793596b0092, []int{0}
}

func (m *YamrResolveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YamrResolveRequest.Unmarshal(m, b)
}
func (m *YamrResolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YamrResolveRequest.Marshal(b, m, deterministic)
}
func (m *YamrResolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YamrResolveRequest.Merge(m, src)
}
func (m *YamrResolveRequest) XXX_Size() int {
	return xxx_messageInfo_YamrResolveRequest.Size(m)
}
func (m *YamrResolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_YamrResolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_YamrResolveRequest proto.InternalMessageInfo

func (m *YamrResolveRequest) GetItems() []*YamrResolveRequest_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type YamrResolveRequest_Item struct {
	Id                   *YamrID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Intervals            []uint64 `protobuf:"varint,3,rep,packed,name=intervals,proto3" json:"intervals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YamrResolveRequest_Item) Reset()         { *m = YamrResolveRequest_Item{} }
func (m *YamrResolveRequest_Item) String() string { return proto.CompactTextString(m) }
func (*YamrResolveRequest_Item) ProtoMessage()    {}
func (*YamrResolveRequest_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_89eba793596b0092, []int{0, 0}
}

func (m *YamrResolveRequest_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YamrResolveRequest_Item.Unmarshal(m, b)
}
func (m *YamrResolveRequest_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YamrResolveRequest_Item.Marshal(b, m, deterministic)
}
func (m *YamrResolveRequest_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YamrResolveRequest_Item.Merge(m, src)
}
func (m *YamrResolveRequest_Item) XXX_Size() int {
	return xxx_messageInfo_YamrResolveRequest_Item.Size(m)
}
func (m *YamrResolveRequest_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_YamrResolveRequest_Item.DiscardUnknown(m)
}

var xxx_messageInfo_YamrResolveRequest_Item proto.InternalMessageInfo

func (m *YamrResolveRequest_Item) GetId() *YamrID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *YamrResolveRequest_Item) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *YamrResolveRequest_Item) GetIntervals() []uint64 {
	if m != nil {
		return m.Intervals
	}
	return nil
}

type YamrResolveResponse struct {
	Id                   *YamrID                                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Field                string                                      `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Values               map[string]*YamrResolveResponse_IntervalSet `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *YamrResolveResponse) Reset()         { *m = YamrResolveResponse{} }
func (m *YamrResolveResponse) String() string { return proto.CompactTextString(m) }
func (*YamrResolveResponse) ProtoMessage()    {}
func (*YamrResolveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89eba793596b0092, []int{1}
}

func (m *YamrResolveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YamrResolveResponse.Unmarshal(m, b)
}
func (m *YamrResolveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YamrResolveResponse.Marshal(b, m, deterministic)
}
func (m *YamrResolveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YamrResolveResponse.Merge(m, src)
}
func (m *YamrResolveResponse) XXX_Size() int {
	return xxx_messageInfo_YamrResolveResponse.Size(m)
}
func (m *YamrResolveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_YamrResolveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_YamrResolveResponse proto.InternalMessageInfo

func (m *YamrResolveResponse) GetId() *YamrID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *YamrResolveResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *YamrResolveResponse) GetValues() map[string]*YamrResolveResponse_IntervalSet {
	if m != nil {
		return m.Values
	}
	return nil
}

type YamrResolveResponse_IntervalSet struct {
	Intervals            []uint64 `protobuf:"varint,1,rep,packed,name=intervals,proto3" json:"intervals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YamrResolveResponse_IntervalSet) Reset()         { *m = YamrResolveResponse_IntervalSet{} }
func (m *YamrResolveResponse_IntervalSet) String() string { return proto.CompactTextString(m) }
func (*YamrResolveResponse_IntervalSet) ProtoMessage()    {}
func (*YamrResolveResponse_IntervalSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_89eba793596b0092, []int{1, 0}
}

func (m *YamrResolveResponse_IntervalSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YamrResolveResponse_IntervalSet.Unmarshal(m, b)
}
func (m *YamrResolveResponse_IntervalSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YamrResolveResponse_IntervalSet.Marshal(b, m, deterministic)
}
func (m *YamrResolveResponse_IntervalSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YamrResolveResponse_IntervalSet.Merge(m, src)
}
func (m *YamrResolveResponse_IntervalSet) XXX_Size() int {
	return xxx_messageInfo_YamrResolveResponse_IntervalSet.Size(m)
}
func (m *YamrResolveResponse_IntervalSet) XXX_DiscardUnknown() {
	xxx_messageInfo_YamrResolveResponse_IntervalSet.DiscardUnknown(m)
}

var xxx_messageInfo_YamrResolveResponse_IntervalSet proto.InternalMessageInfo

func (m *YamrResolveResponse_IntervalSet) GetIntervals() []uint64 {
	if m != nil {
		return m.Intervals
	}
	return nil
}

func init() {
	proto.RegisterType((*YamrResolveRequest)(nil), "zenoss.cloud.YamrResolveRequest")
	proto.RegisterType((*YamrResolveRequest_Item)(nil), "zenoss.cloud.YamrResolveRequest.Item")
	proto.RegisterType((*YamrResolveResponse)(nil), "zenoss.cloud.YamrResolveResponse")
	proto.RegisterMapType((map[string]*YamrResolveResponse_IntervalSet)(nil), "zenoss.cloud.YamrResolveResponse.ValuesEntry")
	proto.RegisterType((*YamrResolveResponse_IntervalSet)(nil), "zenoss.cloud.YamrResolveResponse.IntervalSet")
}

func init() {
	proto.RegisterFile("zenoss/zing/proto/cloud/yamr_resolver.proto", fileDescriptor_89eba793596b0092)
}

var fileDescriptor_89eba793596b0092 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4f, 0x6b, 0xdb, 0x30,
	0x14, 0x47, 0x76, 0x92, 0x91, 0xe7, 0x1c, 0x86, 0x96, 0x83, 0x31, 0x3b, 0x78, 0x61, 0x03, 0x43,
	0x88, 0xbc, 0x78, 0x97, 0xb1, 0xdd, 0xb6, 0xe5, 0x90, 0x5b, 0xd0, 0x4a, 0xa1, 0xbd, 0x34, 0x4e,
	0xac, 0x3a, 0xa6, 0xb6, 0x95, 0x4a, 0xb2, 0x21, 0xf9, 0x52, 0x3d, 0xf4, 0x0b, 0x16, 0x5b, 0x2e,
	0x75, 0x1a, 0x48, 0x0a, 0xbd, 0xe9, 0xf9, 0xfd, 0xfe, 0x3d, 0xfc, 0x83, 0xf1, 0x9e, 0xe5, 0x5c,
	0x4a, 0x7f, 0x9f, 0xe4, 0xb1, 0xbf, 0x15, 0x5c, 0x71, 0x7f, 0x9d, 0xf2, 0x22, 0xf2, 0x77, 0x61,
	0x26, 0x6e, 0x04, 0x93, 0x3c, 0x2d, 0x99, 0x20, 0xf5, 0x06, 0x0f, 0x34, 0x98, 0xd4, 0x08, 0x67,
	0x74, 0x8a, 0xaa, 0x19, 0xa3, 0x47, 0x04, 0xf8, 0x2a, 0xcc, 0x04, 0xd5, 0x42, 0x94, 0xdd, 0x17,
	0x4c, 0x2a, 0xfc, 0x1b, 0xba, 0x89, 0x62, 0x99, 0xb4, 0x91, 0x6b, 0x7a, 0x56, 0xf0, 0x8d, 0xb4,
	0x85, 0xc9, 0x31, 0x81, 0xcc, 0x15, 0xcb, 0xa8, 0xe6, 0x38, 0x4b, 0xe8, 0x54, 0x23, 0xfe, 0x0a,
	0x46, 0x12, 0xd9, 0xc8, 0x45, 0x9e, 0x15, 0x0c, 0x8f, 0x15, 0xe6, 0xff, 0xa8, 0x91, 0x44, 0x78,
	0x08, 0xdd, 0xdb, 0x84, 0xa5, 0x91, 0x6d, 0xb8, 0xc8, 0xeb, 0x53, 0x3d, 0xe0, 0xcf, 0xd0, 0x4f,
	0x72, 0xc5, 0x44, 0x19, 0xa6, 0xd2, 0x36, 0x5d, 0xd3, 0xeb, 0xd0, 0x97, 0x0f, 0xa3, 0x07, 0x03,
	0x3e, 0x1d, 0x84, 0x90, 0x5b, 0x9e, 0x4b, 0xf6, 0x2e, 0xc7, 0x19, 0xf4, 0xca, 0x30, 0x2d, 0x98,
	0xb6, 0xb3, 0x82, 0xc9, 0x89, 0x9b, 0xb5, 0x1d, 0xb9, 0xac, 0xf1, 0xb3, 0x5c, 0x89, 0x1d, 0x6d,
	0xc8, 0xce, 0x18, 0xac, 0x79, 0x93, 0xf3, 0x3f, 0x53, 0x87, 0x77, 0xa0, 0x57, 0x77, 0x38, 0x1b,
	0xb0, 0x5a, 0x1a, 0xf8, 0x23, 0x98, 0x77, 0x6c, 0x57, 0xe7, 0xef, 0xd3, 0xea, 0x89, 0xff, 0x42,
	0xb7, 0xd6, 0xad, 0xa3, 0xbe, 0x29, 0x53, 0xcb, 0x9c, 0x6a, 0xee, 0x2f, 0xe3, 0x27, 0x0a, 0x96,
	0x30, 0x68, 0xa1, 0x05, 0x5e, 0xc0, 0x87, 0xe6, 0x8d, 0xdd, 0x73, 0x3f, 0xd7, 0xf9, 0x72, 0xd6,
	0xf6, 0x3b, 0xfa, 0x73, 0x01, 0x2e, 0x17, 0xf1, 0x33, 0xb2, 0xea, 0x9c, 0xae, 0x58, 0x43, 0xaa,
	0x3a, 0xb7, 0x40, 0xd7, 0x24, 0x4e, 0xd4, 0xa6, 0x58, 0x91, 0x35, 0xcf, 0xfc, 0x56, 0x3d, 0x27,
	0xba, 0x9e, 0xe5, 0x74, 0xea, 0xc7, 0xed, 0x96, 0xae, 0x7a, 0xf5, 0xe2, 0xc7, 0x53, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0xc8, 0x40, 0xc8, 0x07, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YamrResolverClient is the client API for YamrResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YamrResolverClient interface {
	Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error)
}

type yamrResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrResolverClient(cc grpc.ClientConnInterface) YamrResolverClient {
	return &yamrResolverClient{cc}
}

func (c *yamrResolverClient) Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YamrResolver_serviceDesc.Streams[0], "/zenoss.cloud.YamrResolver/Resolve", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrResolverResolveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrResolver_ResolveClient interface {
	Recv() (*YamrResolveResponse, error)
	grpc.ClientStream
}

type yamrResolverResolveClient struct {
	grpc.ClientStream
}

func (x *yamrResolverResolveClient) Recv() (*YamrResolveResponse, error) {
	m := new(YamrResolveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YamrResolverServer is the server API for YamrResolver service.
type YamrResolverServer interface {
	Resolve(*YamrResolveRequest, YamrResolver_ResolveServer) error
}

// UnimplementedYamrResolverServer can be embedded to have forward compatible implementations.
type UnimplementedYamrResolverServer struct {
}

func (*UnimplementedYamrResolverServer) Resolve(req *YamrResolveRequest, srv YamrResolver_ResolveServer) error {
	return status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}

func RegisterYamrResolverServer(s *grpc.Server, srv YamrResolverServer) {
	s.RegisterService(&_YamrResolver_serviceDesc, srv)
}

func _YamrResolver_Resolve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(YamrResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrResolverServer).Resolve(m, &yamrResolverResolveServer{stream})
}

type YamrResolver_ResolveServer interface {
	Send(*YamrResolveResponse) error
	grpc.ServerStream
}

type yamrResolverResolveServer struct {
	grpc.ServerStream
}

func (x *yamrResolverResolveServer) Send(m *YamrResolveResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _YamrResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrResolver",
	HandlerType: (*YamrResolverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Resolve",
			Handler:       _YamrResolver_Resolve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_resolver.proto",
}
