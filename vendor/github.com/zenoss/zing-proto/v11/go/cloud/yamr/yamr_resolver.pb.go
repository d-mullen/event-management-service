// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zenoss/zing/proto/cloud/yamr_resolver.proto

package yamr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type YamrResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*YamrResolveRequest_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *YamrResolveRequest) Reset() {
	*x = YamrResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrResolveRequest) ProtoMessage() {}

func (x *YamrResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrResolveRequest.ProtoReflect.Descriptor instead.
func (*YamrResolveRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescGZIP(), []int{0}
}

func (x *YamrResolveRequest) GetItems() []*YamrResolveRequest_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type YamrResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *YamrID                                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Field  string                                      `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Values map[string]*YamrResolveResponse_IntervalSet `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *YamrResolveResponse) Reset() {
	*x = YamrResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrResolveResponse) ProtoMessage() {}

func (x *YamrResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrResolveResponse.ProtoReflect.Descriptor instead.
func (*YamrResolveResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescGZIP(), []int{1}
}

func (x *YamrResolveResponse) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *YamrResolveResponse) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *YamrResolveResponse) GetValues() map[string]*YamrResolveResponse_IntervalSet {
	if x != nil {
		return x.Values
	}
	return nil
}

type YamrResolveRequest_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *YamrID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Field     string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Intervals []uint64 `protobuf:"varint,3,rep,packed,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *YamrResolveRequest_Item) Reset() {
	*x = YamrResolveRequest_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrResolveRequest_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrResolveRequest_Item) ProtoMessage() {}

func (x *YamrResolveRequest_Item) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrResolveRequest_Item.ProtoReflect.Descriptor instead.
func (*YamrResolveRequest_Item) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescGZIP(), []int{0, 0}
}

func (x *YamrResolveRequest_Item) GetId() *YamrID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *YamrResolveRequest_Item) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *YamrResolveRequest_Item) GetIntervals() []uint64 {
	if x != nil {
		return x.Intervals
	}
	return nil
}

type YamrResolveResponse_IntervalSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intervals []uint64 `protobuf:"varint,1,rep,packed,name=intervals,proto3" json:"intervals,omitempty"`
}

func (x *YamrResolveResponse_IntervalSet) Reset() {
	*x = YamrResolveResponse_IntervalSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YamrResolveResponse_IntervalSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamrResolveResponse_IntervalSet) ProtoMessage() {}

func (x *YamrResolveResponse_IntervalSet) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamrResolveResponse_IntervalSet.ProtoReflect.Descriptor instead.
func (*YamrResolveResponse_IntervalSet) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescGZIP(), []int{1, 0}
}

func (x *YamrResolveResponse_IntervalSet) GetIntervals() []uint64 {
	if x != nil {
		return x.Intervals
	}
	return nil
}

var File_zenoss_zing_proto_cloud_yamr_resolver_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x22, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x01, 0x0a, 0x12, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x60, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x13, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x2b, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x68, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x60, 0x0a, 0x0c, 0x59, 0x61, 0x6d, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x59, 0x61, 0x6d, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x54, 0x0a, 0x20, 0x6f, 0x72, 0x67,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x61, 0x6d, 0x72, 0x50, 0x01, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x31, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescData = file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_zenoss_zing_proto_cloud_yamr_resolver_proto_goTypes = []interface{}{
	(*YamrResolveRequest)(nil),              // 0: zenoss.cloud.YamrResolveRequest
	(*YamrResolveResponse)(nil),             // 1: zenoss.cloud.YamrResolveResponse
	(*YamrResolveRequest_Item)(nil),         // 2: zenoss.cloud.YamrResolveRequest.Item
	(*YamrResolveResponse_IntervalSet)(nil), // 3: zenoss.cloud.YamrResolveResponse.IntervalSet
	nil,                                     // 4: zenoss.cloud.YamrResolveResponse.ValuesEntry
	(*YamrID)(nil),                          // 5: zenoss.cloud.YamrID
}
var file_zenoss_zing_proto_cloud_yamr_resolver_proto_depIdxs = []int32{
	2, // 0: zenoss.cloud.YamrResolveRequest.items:type_name -> zenoss.cloud.YamrResolveRequest.Item
	5, // 1: zenoss.cloud.YamrResolveResponse.id:type_name -> zenoss.cloud.YamrID
	4, // 2: zenoss.cloud.YamrResolveResponse.values:type_name -> zenoss.cloud.YamrResolveResponse.ValuesEntry
	5, // 3: zenoss.cloud.YamrResolveRequest.Item.id:type_name -> zenoss.cloud.YamrID
	3, // 4: zenoss.cloud.YamrResolveResponse.ValuesEntry.value:type_name -> zenoss.cloud.YamrResolveResponse.IntervalSet
	0, // 5: zenoss.cloud.YamrResolver.Resolve:input_type -> zenoss.cloud.YamrResolveRequest
	1, // 6: zenoss.cloud.YamrResolver.Resolve:output_type -> zenoss.cloud.YamrResolveResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_yamr_resolver_proto_init() }
func file_zenoss_zing_proto_cloud_yamr_resolver_proto_init() {
	if File_zenoss_zing_proto_cloud_yamr_resolver_proto != nil {
		return
	}
	file_zenoss_zing_proto_cloud_yamr_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrResolveRequest_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YamrResolveResponse_IntervalSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_yamr_resolver_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_yamr_resolver_proto_depIdxs,
		MessageInfos:      file_zenoss_zing_proto_cloud_yamr_resolver_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_yamr_resolver_proto = out.File
	file_zenoss_zing_proto_cloud_yamr_resolver_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_yamr_resolver_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_yamr_resolver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YamrResolverClient is the client API for YamrResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YamrResolverClient interface {
	Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error)
}

type yamrResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrResolverClient(cc grpc.ClientConnInterface) YamrResolverClient {
	return &yamrResolverClient{cc}
}

func (c *yamrResolverClient) Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YamrResolver_serviceDesc.Streams[0], "/zenoss.cloud.YamrResolver/Resolve", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrResolverResolveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrResolver_ResolveClient interface {
	Recv() (*YamrResolveResponse, error)
	grpc.ClientStream
}

type yamrResolverResolveClient struct {
	grpc.ClientStream
}

func (x *yamrResolverResolveClient) Recv() (*YamrResolveResponse, error) {
	m := new(YamrResolveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YamrResolverServer is the server API for YamrResolver service.
type YamrResolverServer interface {
	Resolve(*YamrResolveRequest, YamrResolver_ResolveServer) error
}

// UnimplementedYamrResolverServer can be embedded to have forward compatible implementations.
type UnimplementedYamrResolverServer struct {
}

func (*UnimplementedYamrResolverServer) Resolve(*YamrResolveRequest, YamrResolver_ResolveServer) error {
	return status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}

func RegisterYamrResolverServer(s *grpc.Server, srv YamrResolverServer) {
	s.RegisterService(&_YamrResolver_serviceDesc, srv)
}

func _YamrResolver_Resolve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(YamrResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrResolverServer).Resolve(m, &yamrResolverResolveServer{stream})
}

type YamrResolver_ResolveServer interface {
	Send(*YamrResolveResponse) error
	grpc.ServerStream
}

type yamrResolverResolveServer struct {
	grpc.ServerStream
}

func (x *yamrResolverResolveServer) Send(m *YamrResolveResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _YamrResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrResolver",
	HandlerType: (*YamrResolverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Resolve",
			Handler:       _YamrResolver_Resolve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_resolver.proto",
}
