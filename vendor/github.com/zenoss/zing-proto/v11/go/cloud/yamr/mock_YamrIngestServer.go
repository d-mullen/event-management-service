// Code generated by mockery v2.12.2. DO NOT EDIT.

package yamr

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockYamrIngestServer is an autogenerated mock type for the YamrIngestServer type
type MockYamrIngestServer struct {
	mock.Mock
}

type MockYamrIngestServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYamrIngestServer) EXPECT() *MockYamrIngestServer_Expecter {
	return &MockYamrIngestServer_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *MockYamrIngestServer) Put(_a0 context.Context, _a1 *PutRequest) (*PutResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PutRequest) *PutResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PutRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrIngestServer_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockYamrIngestServer_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *PutRequest
func (_e *MockYamrIngestServer_Expecter) Put(_a0 interface{}, _a1 interface{}) *MockYamrIngestServer_Put_Call {
	return &MockYamrIngestServer_Put_Call{Call: _e.mock.On("Put", _a0, _a1)}
}

func (_c *MockYamrIngestServer_Put_Call) Run(run func(_a0 context.Context, _a1 *PutRequest)) *MockYamrIngestServer_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*PutRequest))
	})
	return _c
}

func (_c *MockYamrIngestServer_Put_Call) Return(_a0 *PutResponse, _a1 error) *MockYamrIngestServer_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutBulk provides a mock function with given fields: _a0, _a1
func (_m *MockYamrIngestServer) PutBulk(_a0 context.Context, _a1 *PutBulkRequest) (*PutBulkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *PutBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PutBulkRequest) *PutBulkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PutBulkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrIngestServer_PutBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBulk'
type MockYamrIngestServer_PutBulk_Call struct {
	*mock.Call
}

// PutBulk is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *PutBulkRequest
func (_e *MockYamrIngestServer_Expecter) PutBulk(_a0 interface{}, _a1 interface{}) *MockYamrIngestServer_PutBulk_Call {
	return &MockYamrIngestServer_PutBulk_Call{Call: _e.mock.On("PutBulk", _a0, _a1)}
}

func (_c *MockYamrIngestServer_PutBulk_Call) Run(run func(_a0 context.Context, _a1 *PutBulkRequest)) *MockYamrIngestServer_PutBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*PutBulkRequest))
	})
	return _c
}

func (_c *MockYamrIngestServer_PutBulk_Call) Return(_a0 *PutBulkResponse, _a1 error) *MockYamrIngestServer_PutBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// mustEmbedUnimplementedYamrIngestServer provides a mock function with given fields:
func (_m *MockYamrIngestServer) mustEmbedUnimplementedYamrIngestServer() {
	_m.Called()
}

// MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedYamrIngestServer'
type MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedYamrIngestServer is a helper method to define mock.On call
func (_e *MockYamrIngestServer_Expecter) mustEmbedUnimplementedYamrIngestServer() *MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call {
	return &MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call{Call: _e.mock.On("mustEmbedUnimplementedYamrIngestServer")}
}

func (_c *MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call) Run(run func()) *MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call) Return() *MockYamrIngestServer_mustEmbedUnimplementedYamrIngestServer_Call {
	_c.Call.Return()
	return _c
}

// NewMockYamrIngestServer creates a new instance of MockYamrIngestServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYamrIngestServer(t testing.TB) *MockYamrIngestServer {
	mock := &MockYamrIngestServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
