// Code generated by mockery v2.13.1. DO NOT EDIT.

package yamr

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockYamrServiceClient is an autogenerated mock type for the YamrServiceClient type
type MockYamrServiceClient struct {
	mock.Mock
}

type MockYamrServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYamrServiceClient) EXPECT() *MockYamrServiceClient_Expecter {
	return &MockYamrServiceClient_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CountRequest, ...grpc.CallOption) *CountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockYamrServiceClient_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - ctx context.Context
//  - in *CountRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) Count(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_Count_Call {
	return &MockYamrServiceClient_Count_Call{Call: _e.mock.On("Count",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_Count_Call) Run(run func(ctx context.Context, in *CountRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CountRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_Count_Call) Return(_a0 *CountResponse, _a1 error) *MockYamrServiceClient_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetRequest, ...grpc.CallOption) *GetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockYamrServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_Get_Call {
	return &MockYamrServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_Get_Call) Run(run func(ctx context.Context, in *GetRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_Get_Call) Return(_a0 *GetResponse, _a1 error) *MockYamrServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBulk provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) GetBulk(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption) (*GetBulkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetBulkRequest, ...grpc.CallOption) *GetBulkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetBulkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_GetBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBulk'
type MockYamrServiceClient_GetBulk_Call struct {
	*mock.Call
}

// GetBulk is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetBulkRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) GetBulk(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_GetBulk_Call {
	return &MockYamrServiceClient_GetBulk_Call{Call: _e.mock.On("GetBulk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_GetBulk_Call) Run(run func(ctx context.Context, in *GetBulkRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_GetBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetBulkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_GetBulk_Call) Return(_a0 *GetBulkResponse, _a1 error) *MockYamrServiceClient_GetBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Put provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *PutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PutRequest, ...grpc.CallOption) *PutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockYamrServiceClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//  - ctx context.Context
//  - in *PutRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) Put(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_Put_Call {
	return &MockYamrServiceClient_Put_Call{Call: _e.mock.On("Put",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_Put_Call) Run(run func(ctx context.Context, in *PutRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*PutRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_Put_Call) Return(_a0 *PutResponse, _a1 error) *MockYamrServiceClient_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutBulk provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) PutBulk(ctx context.Context, in *PutBulkRequest, opts ...grpc.CallOption) (*PutBulkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *PutBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *PutBulkRequest, ...grpc.CallOption) *PutBulkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PutBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *PutBulkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_PutBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBulk'
type MockYamrServiceClient_PutBulk_Call struct {
	*mock.Call
}

// PutBulk is a helper method to define mock.On call
//  - ctx context.Context
//  - in *PutBulkRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) PutBulk(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_PutBulk_Call {
	return &MockYamrServiceClient_PutBulk_Call{Call: _e.mock.On("PutBulk",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_PutBulk_Call) Run(run func(ctx context.Context, in *PutBulkRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_PutBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*PutBulkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_PutBulk_Call) Return(_a0 *PutBulkResponse, _a1 error) *MockYamrServiceClient_PutBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Search provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest, ...grpc.CallOption) *SearchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockYamrServiceClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//  - ctx context.Context
//  - in *SearchRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) Search(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_Search_Call {
	return &MockYamrServiceClient_Search_Call{Call: _e.mock.On("Search",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_Search_Call) Run(run func(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SearchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_Search_Call) Return(_a0 *SearchResponse, _a1 error) *MockYamrServiceClient_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// StreamingSearch provides a mock function with given fields: ctx, in, opts
func (_m *MockYamrServiceClient) StreamingSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (YamrService_StreamingSearchClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 YamrService_StreamingSearchClient
	if rf, ok := ret.Get(0).(func(context.Context, *SearchRequest, ...grpc.CallOption) YamrService_StreamingSearchClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(YamrService_StreamingSearchClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrServiceClient_StreamingSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamingSearch'
type MockYamrServiceClient_StreamingSearch_Call struct {
	*mock.Call
}

// StreamingSearch is a helper method to define mock.On call
//  - ctx context.Context
//  - in *SearchRequest
//  - opts ...grpc.CallOption
func (_e *MockYamrServiceClient_Expecter) StreamingSearch(ctx interface{}, in interface{}, opts ...interface{}) *MockYamrServiceClient_StreamingSearch_Call {
	return &MockYamrServiceClient_StreamingSearch_Call{Call: _e.mock.On("StreamingSearch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockYamrServiceClient_StreamingSearch_Call) Run(run func(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption)) *MockYamrServiceClient_StreamingSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SearchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockYamrServiceClient_StreamingSearch_Call) Return(_a0 YamrService_StreamingSearchClient, _a1 error) *MockYamrServiceClient_StreamingSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockYamrServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockYamrServiceClient creates a new instance of MockYamrServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYamrServiceClient(t mockConstructorTestingTNewMockYamrServiceClient) *MockYamrServiceClient {
	mock := &MockYamrServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
