// Code generated by mockery v2.12.2. DO NOT EDIT.

package yamr

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "google.golang.org/grpc/metadata"

	testing "testing"
)

// MockYamrService_StreamingSearchClient is an autogenerated mock type for the YamrService_StreamingSearchClient type
type MockYamrService_StreamingSearchClient struct {
	mock.Mock
}

type MockYamrService_StreamingSearchClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYamrService_StreamingSearchClient) EXPECT() *MockYamrService_StreamingSearchClient_Expecter {
	return &MockYamrService_StreamingSearchClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function with given fields:
func (_m *MockYamrService_StreamingSearchClient) CloseSend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockYamrService_StreamingSearchClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type MockYamrService_StreamingSearchClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *MockYamrService_StreamingSearchClient_Expecter) CloseSend() *MockYamrService_StreamingSearchClient_CloseSend_Call {
	return &MockYamrService_StreamingSearchClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *MockYamrService_StreamingSearchClient_CloseSend_Call) Run(run func()) *MockYamrService_StreamingSearchClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_CloseSend_Call) Return(_a0 error) *MockYamrService_StreamingSearchClient_CloseSend_Call {
	_c.Call.Return(_a0)
	return _c
}

// Context provides a mock function with given fields:
func (_m *MockYamrService_StreamingSearchClient) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockYamrService_StreamingSearchClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockYamrService_StreamingSearchClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockYamrService_StreamingSearchClient_Expecter) Context() *MockYamrService_StreamingSearchClient_Context_Call {
	return &MockYamrService_StreamingSearchClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockYamrService_StreamingSearchClient_Context_Call) Run(run func()) *MockYamrService_StreamingSearchClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_Context_Call) Return(_a0 context.Context) *MockYamrService_StreamingSearchClient_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

// Header provides a mock function with given fields:
func (_m *MockYamrService_StreamingSearchClient) Header() (metadata.MD, error) {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrService_StreamingSearchClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockYamrService_StreamingSearchClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockYamrService_StreamingSearchClient_Expecter) Header() *MockYamrService_StreamingSearchClient_Header_Call {
	return &MockYamrService_StreamingSearchClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockYamrService_StreamingSearchClient_Header_Call) Run(run func()) *MockYamrService_StreamingSearchClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_Header_Call) Return(_a0 metadata.MD, _a1 error) *MockYamrService_StreamingSearchClient_Header_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Recv provides a mock function with given fields:
func (_m *MockYamrService_StreamingSearchClient) Recv() (*SearchResponse, error) {
	ret := _m.Called()

	var r0 *SearchResponse
	if rf, ok := ret.Get(0).(func() *SearchResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYamrService_StreamingSearchClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type MockYamrService_StreamingSearchClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *MockYamrService_StreamingSearchClient_Expecter) Recv() *MockYamrService_StreamingSearchClient_Recv_Call {
	return &MockYamrService_StreamingSearchClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *MockYamrService_StreamingSearchClient_Recv_Call) Run(run func()) *MockYamrService_StreamingSearchClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_Recv_Call) Return(_a0 *SearchResponse, _a1 error) *MockYamrService_StreamingSearchClient_Recv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RecvMsg provides a mock function with given fields: m
func (_m *MockYamrService_StreamingSearchClient) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockYamrService_StreamingSearchClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type MockYamrService_StreamingSearchClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//  - m interface{}
func (_e *MockYamrService_StreamingSearchClient_Expecter) RecvMsg(m interface{}) *MockYamrService_StreamingSearchClient_RecvMsg_Call {
	return &MockYamrService_StreamingSearchClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *MockYamrService_StreamingSearchClient_RecvMsg_Call) Run(run func(m interface{})) *MockYamrService_StreamingSearchClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_RecvMsg_Call) Return(_a0 error) *MockYamrService_StreamingSearchClient_RecvMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

// SendMsg provides a mock function with given fields: m
func (_m *MockYamrService_StreamingSearchClient) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockYamrService_StreamingSearchClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type MockYamrService_StreamingSearchClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//  - m interface{}
func (_e *MockYamrService_StreamingSearchClient_Expecter) SendMsg(m interface{}) *MockYamrService_StreamingSearchClient_SendMsg_Call {
	return &MockYamrService_StreamingSearchClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *MockYamrService_StreamingSearchClient_SendMsg_Call) Run(run func(m interface{})) *MockYamrService_StreamingSearchClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_SendMsg_Call) Return(_a0 error) *MockYamrService_StreamingSearchClient_SendMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

// Trailer provides a mock function with given fields:
func (_m *MockYamrService_StreamingSearchClient) Trailer() metadata.MD {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}

// MockYamrService_StreamingSearchClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type MockYamrService_StreamingSearchClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *MockYamrService_StreamingSearchClient_Expecter) Trailer() *MockYamrService_StreamingSearchClient_Trailer_Call {
	return &MockYamrService_StreamingSearchClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *MockYamrService_StreamingSearchClient_Trailer_Call) Run(run func()) *MockYamrService_StreamingSearchClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYamrService_StreamingSearchClient_Trailer_Call) Return(_a0 metadata.MD) *MockYamrService_StreamingSearchClient_Trailer_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewMockYamrService_StreamingSearchClient creates a new instance of MockYamrService_StreamingSearchClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYamrService_StreamingSearchClient(t testing.TB) *MockYamrService_StreamingSearchClient {
	mock := &MockYamrService_StreamingSearchClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
