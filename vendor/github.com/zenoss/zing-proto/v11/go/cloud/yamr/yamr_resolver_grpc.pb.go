// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/yamr_resolver.proto

package yamr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YamrResolverClient is the client API for YamrResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YamrResolverClient interface {
	Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error)
}

type yamrResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrResolverClient(cc grpc.ClientConnInterface) YamrResolverClient {
	return &yamrResolverClient{cc}
}

func (c *yamrResolverClient) Resolve(ctx context.Context, in *YamrResolveRequest, opts ...grpc.CallOption) (YamrResolver_ResolveClient, error) {
	stream, err := c.cc.NewStream(ctx, &YamrResolver_ServiceDesc.Streams[0], "/zenoss.cloud.YamrResolver/Resolve", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrResolverResolveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YamrResolver_ResolveClient interface {
	Recv() (*YamrResolveResponse, error)
	grpc.ClientStream
}

type yamrResolverResolveClient struct {
	grpc.ClientStream
}

func (x *yamrResolverResolveClient) Recv() (*YamrResolveResponse, error) {
	m := new(YamrResolveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YamrResolverServer is the server API for YamrResolver service.
// All implementations must embed UnimplementedYamrResolverServer
// for forward compatibility
type YamrResolverServer interface {
	Resolve(*YamrResolveRequest, YamrResolver_ResolveServer) error
	mustEmbedUnimplementedYamrResolverServer()
}

// UnimplementedYamrResolverServer must be embedded to have forward compatible implementations.
type UnimplementedYamrResolverServer struct {
}

func (UnimplementedYamrResolverServer) Resolve(*YamrResolveRequest, YamrResolver_ResolveServer) error {
	return status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedYamrResolverServer) mustEmbedUnimplementedYamrResolverServer() {}

// UnsafeYamrResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YamrResolverServer will
// result in compilation errors.
type UnsafeYamrResolverServer interface {
	mustEmbedUnimplementedYamrResolverServer()
}

func RegisterYamrResolverServer(s grpc.ServiceRegistrar, srv YamrResolverServer) {
	s.RegisterService(&YamrResolver_ServiceDesc, srv)
}

func _YamrResolver_Resolve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(YamrResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YamrResolverServer).Resolve(m, &yamrResolverResolveServer{stream})
}

type YamrResolver_ResolveServer interface {
	Send(*YamrResolveResponse) error
	grpc.ServerStream
}

type yamrResolverResolveServer struct {
	grpc.ServerStream
}

func (x *yamrResolverResolveServer) Send(m *YamrResolveResponse) error {
	return x.ServerStream.SendMsg(m)
}

// YamrResolver_ServiceDesc is the grpc.ServiceDesc for YamrResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YamrResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrResolver",
	HandlerType: (*YamrResolverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Resolve",
			Handler:       _YamrResolver_Resolve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_resolver.proto",
}
