// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/yamr_relevance.proto

package yamr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YamrPageRankIngestClient is the client API for YamrPageRankIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YamrPageRankIngestClient interface {
	Update(ctx context.Context, opts ...grpc.CallOption) (YamrPageRankIngest_UpdateClient, error)
}

type yamrPageRankIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrPageRankIngestClient(cc grpc.ClientConnInterface) YamrPageRankIngestClient {
	return &yamrPageRankIngestClient{cc}
}

func (c *yamrPageRankIngestClient) Update(ctx context.Context, opts ...grpc.CallOption) (YamrPageRankIngest_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &YamrPageRankIngest_ServiceDesc.Streams[0], "/zenoss.cloud.YamrPageRankIngest/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &yamrPageRankIngestUpdateClient{stream}
	return x, nil
}

type YamrPageRankIngest_UpdateClient interface {
	Send(*YamrPageRankUpdateRequest) error
	CloseAndRecv() (*YamrPageRankUpdateResponse, error)
	grpc.ClientStream
}

type yamrPageRankIngestUpdateClient struct {
	grpc.ClientStream
}

func (x *yamrPageRankIngestUpdateClient) Send(m *YamrPageRankUpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *yamrPageRankIngestUpdateClient) CloseAndRecv() (*YamrPageRankUpdateResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(YamrPageRankUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YamrPageRankIngestServer is the server API for YamrPageRankIngest service.
// All implementations must embed UnimplementedYamrPageRankIngestServer
// for forward compatibility
type YamrPageRankIngestServer interface {
	Update(YamrPageRankIngest_UpdateServer) error
	mustEmbedUnimplementedYamrPageRankIngestServer()
}

// UnimplementedYamrPageRankIngestServer must be embedded to have forward compatible implementations.
type UnimplementedYamrPageRankIngestServer struct {
}

func (UnimplementedYamrPageRankIngestServer) Update(YamrPageRankIngest_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedYamrPageRankIngestServer) mustEmbedUnimplementedYamrPageRankIngestServer() {}

// UnsafeYamrPageRankIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YamrPageRankIngestServer will
// result in compilation errors.
type UnsafeYamrPageRankIngestServer interface {
	mustEmbedUnimplementedYamrPageRankIngestServer()
}

func RegisterYamrPageRankIngestServer(s grpc.ServiceRegistrar, srv YamrPageRankIngestServer) {
	s.RegisterService(&YamrPageRankIngest_ServiceDesc, srv)
}

func _YamrPageRankIngest_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YamrPageRankIngestServer).Update(&yamrPageRankIngestUpdateServer{stream})
}

type YamrPageRankIngest_UpdateServer interface {
	SendAndClose(*YamrPageRankUpdateResponse) error
	Recv() (*YamrPageRankUpdateRequest, error)
	grpc.ServerStream
}

type yamrPageRankIngestUpdateServer struct {
	grpc.ServerStream
}

func (x *yamrPageRankIngestUpdateServer) SendAndClose(m *YamrPageRankUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *yamrPageRankIngestUpdateServer) Recv() (*YamrPageRankUpdateRequest, error) {
	m := new(YamrPageRankUpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// YamrPageRankIngest_ServiceDesc is the grpc.ServiceDesc for YamrPageRankIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YamrPageRankIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrPageRankIngest",
	HandlerType: (*YamrPageRankIngestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _YamrPageRankIngest_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/yamr_relevance.proto",
}

// YamrPageRankQueryClient is the client API for YamrPageRankQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YamrPageRankQueryClient interface {
	GetTopN(ctx context.Context, in *YamrPageRankGetTopNRequest, opts ...grpc.CallOption) (*YamrPageRankGetTopNResponse, error)
}

type yamrPageRankQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewYamrPageRankQueryClient(cc grpc.ClientConnInterface) YamrPageRankQueryClient {
	return &yamrPageRankQueryClient{cc}
}

func (c *yamrPageRankQueryClient) GetTopN(ctx context.Context, in *YamrPageRankGetTopNRequest, opts ...grpc.CallOption) (*YamrPageRankGetTopNResponse, error) {
	out := new(YamrPageRankGetTopNResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.YamrPageRankQuery/GetTopN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YamrPageRankQueryServer is the server API for YamrPageRankQuery service.
// All implementations must embed UnimplementedYamrPageRankQueryServer
// for forward compatibility
type YamrPageRankQueryServer interface {
	GetTopN(context.Context, *YamrPageRankGetTopNRequest) (*YamrPageRankGetTopNResponse, error)
	mustEmbedUnimplementedYamrPageRankQueryServer()
}

// UnimplementedYamrPageRankQueryServer must be embedded to have forward compatible implementations.
type UnimplementedYamrPageRankQueryServer struct {
}

func (UnimplementedYamrPageRankQueryServer) GetTopN(context.Context, *YamrPageRankGetTopNRequest) (*YamrPageRankGetTopNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopN not implemented")
}
func (UnimplementedYamrPageRankQueryServer) mustEmbedUnimplementedYamrPageRankQueryServer() {}

// UnsafeYamrPageRankQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YamrPageRankQueryServer will
// result in compilation errors.
type UnsafeYamrPageRankQueryServer interface {
	mustEmbedUnimplementedYamrPageRankQueryServer()
}

func RegisterYamrPageRankQueryServer(s grpc.ServiceRegistrar, srv YamrPageRankQueryServer) {
	s.RegisterService(&YamrPageRankQuery_ServiceDesc, srv)
}

func _YamrPageRankQuery_GetTopN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YamrPageRankGetTopNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YamrPageRankQueryServer).GetTopN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.YamrPageRankQuery/GetTopN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YamrPageRankQueryServer).GetTopN(ctx, req.(*YamrPageRankGetTopNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YamrPageRankQuery_ServiceDesc is the grpc.ServiceDesc for YamrPageRankQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YamrPageRankQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.YamrPageRankQuery",
	HandlerType: (*YamrPageRankQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopN",
			Handler:    _YamrPageRankQuery_GetTopN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/yamr_relevance.proto",
}
