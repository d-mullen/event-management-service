// Code generated by mockery v1.0.0. DO NOT EDIT.

package tenant

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantServiceServer is an autogenerated mock type for the TenantServiceServer type
type MockTenantServiceServer struct {
	mock.Mock
}

// ChangeTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) ChangeTenantName(_a0 context.Context, _a1 *ChangeTenantNameRequest) (*ChangeTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ChangeTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ChangeTenantNameRequest) *ChangeTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChangeTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ChangeTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) CreateAuthInfo(_a0 context.Context, _a1 *CreateAuthRequest) (*CreateAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateAuthRequest) *CreateAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) CreateTenant(_a0 context.Context, _a1 *CreateTenantRequest) (*CreateTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateTenantRequest) *CreateTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) DeleteAuthInfo(_a0 context.Context, _a1 *DeleteAuthRequest) (*DeleteAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteAuthRequest) *DeleteAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) DeleteTenantName(_a0 context.Context, _a1 *DeleteTenantNameRequest) (*DeleteTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantNameRequest) *DeleteTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetAuthInfo(_a0 context.Context, _a1 *GetAuthRequest) (*GetAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetAuthRequest) *GetAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionZones provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetCollectionZones(_a0 context.Context, _a1 *GetCollectionZonesRequest) (*GetCollectionZonesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetCollectionZonesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetCollectionZonesRequest) *GetCollectionZonesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCollectionZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetCollectionZonesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLandingPage provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetLandingPage(_a0 context.Context, _a1 *GetLandingPageRequest) (*LandingPageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LandingPageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetLandingPageRequest) *LandingPageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LandingPageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetLandingPageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginMessage provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetLoginMessage(_a0 context.Context, _a1 *GetLoginMessageRequest) (*LoginMessageProto, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoginMessageProto
	if rf, ok := ret.Get(0).(func(context.Context, *GetLoginMessageRequest) *LoginMessageProto); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginMessageProto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetLoginMessageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetLogo(_a0 context.Context, _a1 *GetLogoRequest) (*LogoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LogoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetLogoRequest) *LogoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LogoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetLogoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionSettings provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetSessionSettings(_a0 context.Context, _a1 *GetSessionSettingsRequest) (*GetSessionSettingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetSessionSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetSessionSettingsRequest) *GetSessionSettingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSessionSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetSessionSettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantDataId provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantDataId(_a0 context.Context, _a1 *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantDataIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdRequest) *GetTenantDataIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantDataIds provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantDataIds(_a0 context.Context, _a1 *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantDataIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdsRequest) *GetTenantDataIdsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantId provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantId(_a0 context.Context, _a1 *GetTenantIdRequest) (*GetTenantIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdRequest) *GetTenantIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantIds provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantIds(_a0 context.Context, _a1 *GetTenantIdsRequest) (*GetTenantIdsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdsRequest) *GetTenantIdsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantName(_a0 context.Context, _a1 *GetTenantNameRequest) (*GetTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNameRequest) *GetTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantNames provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantNames(_a0 context.Context, _a1 *GetTenantNamesRequest) (*GetTenantNamesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantNamesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNamesRequest) *GetTenantNamesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNamesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNamesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantTheme provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) GetTenantTheme(_a0 context.Context, _a1 *GetTenantThemeRequest) (*TenantThemeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *TenantThemeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantThemeRequest) *TenantThemeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantThemeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantThemeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) LoadAuthInfo(_a0 context.Context, _a1 *LoadAuthRequest) (*LoadAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoadAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LoadAuthRequest) *LoadAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoadAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LoadAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) UpdateAuthInfo(_a0 context.Context, _a1 *UpdateAuthRequest) (*UpdateAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *UpdateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateAuthRequest) *UpdateAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLandingPage provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) UpdateLandingPage(_a0 context.Context, _a1 *LandingPageResponse) (*LandingPageResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LandingPageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LandingPageResponse) *LandingPageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LandingPageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LandingPageResponse) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoginMessage provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) UpdateLoginMessage(_a0 context.Context, _a1 *LoginMessageProto) (*LoginMessageProto, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoginMessageProto
	if rf, ok := ret.Get(0).(func(context.Context, *LoginMessageProto) *LoginMessageProto); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginMessageProto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LoginMessageProto) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) UpdateLogo(_a0 context.Context, _a1 *LogoResponse) (*LogoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LogoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LogoResponse) *LogoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LogoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LogoResponse) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSessionSettings provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) UpdateSessionSettings(_a0 context.Context, _a1 *UpdateSessionSettingsRequest) (*UpdateSessionSettingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *UpdateSessionSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateSessionSettingsRequest) *UpdateSessionSettingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateSessionSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateSessionSettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTenantTheme provides a mock function with given fields: _a0, _a1
func (_m *MockTenantServiceServer) UpdateTenantTheme(_a0 context.Context, _a1 *TenantThemeResponse) (*TenantThemeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *TenantThemeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *TenantThemeResponse) *TenantThemeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantThemeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *TenantThemeResponse) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
