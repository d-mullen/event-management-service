// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: zenoss/zing/proto/cloud/tenant.proto

package tenant

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLoginMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoginMessageRequest) Reset() {
	*x = GetLoginMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginMessageRequest) ProtoMessage() {}

func (x *GetLoginMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginMessageRequest.ProtoReflect.Descriptor instead.
func (*GetLoginMessageRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{0}
}

type LoginMessageProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginMessageEnabled bool   `protobuf:"varint,1,opt,name=login_message_enabled,json=loginMessageEnabled,proto3" json:"login_message_enabled,omitempty"`
	LoginMessage        string `protobuf:"bytes,2,opt,name=login_message,json=loginMessage,proto3" json:"login_message,omitempty"`
}

func (x *LoginMessageProto) Reset() {
	*x = LoginMessageProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginMessageProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginMessageProto) ProtoMessage() {}

func (x *LoginMessageProto) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginMessageProto.ProtoReflect.Descriptor instead.
func (*LoginMessageProto) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{1}
}

func (x *LoginMessageProto) GetLoginMessageEnabled() bool {
	if x != nil {
		return x.LoginMessageEnabled
	}
	return false
}

func (x *LoginMessageProto) GetLoginMessage() string {
	if x != nil {
		return x.LoginMessage
	}
	return ""
}

type GetLogoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLogoRequest) Reset() {
	*x = GetLogoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogoRequest) ProtoMessage() {}

func (x *GetLogoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogoRequest.ProtoReflect.Descriptor instead.
func (*GetLogoRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{2}
}

type LogoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseOneLogo bool   `protobuf:"varint,1,opt,name=use_one_logo,json=useOneLogo,proto3" json:"use_one_logo,omitempty"`
	LogoDark   string `protobuf:"bytes,2,opt,name=logo_dark,json=logoDark,proto3" json:"logo_dark,omitempty"`
	LogoLight  string `protobuf:"bytes,3,opt,name=logo_light,json=logoLight,proto3" json:"logo_light,omitempty"`
	FavIcon    string `protobuf:"bytes,4,opt,name=fav_icon,json=favIcon,proto3" json:"fav_icon,omitempty"`
}

func (x *LogoResponse) Reset() {
	*x = LogoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoResponse) ProtoMessage() {}

func (x *LogoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoResponse.ProtoReflect.Descriptor instead.
func (*LogoResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{3}
}

func (x *LogoResponse) GetUseOneLogo() bool {
	if x != nil {
		return x.UseOneLogo
	}
	return false
}

func (x *LogoResponse) GetLogoDark() string {
	if x != nil {
		return x.LogoDark
	}
	return ""
}

func (x *LogoResponse) GetLogoLight() string {
	if x != nil {
		return x.LogoLight
	}
	return ""
}

func (x *LogoResponse) GetFavIcon() string {
	if x != nil {
		return x.FavIcon
	}
	return ""
}

type GetLandingPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLandingPageRequest) Reset() {
	*x = GetLandingPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLandingPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLandingPageRequest) ProtoMessage() {}

func (x *GetLandingPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLandingPageRequest.ProtoReflect.Descriptor instead.
func (*GetLandingPageRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{4}
}

type LandingPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LandingPage string `protobuf:"bytes,1,opt,name=landing_page,json=landingPage,proto3" json:"landing_page,omitempty"`
}

func (x *LandingPageResponse) Reset() {
	*x = LandingPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandingPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandingPageResponse) ProtoMessage() {}

func (x *LandingPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandingPageResponse.ProtoReflect.Descriptor instead.
func (*LandingPageResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{5}
}

func (x *LandingPageResponse) GetLandingPage() string {
	if x != nil {
		return x.LandingPage
	}
	return ""
}

type GetTenantThemeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTenantThemeRequest) Reset() {
	*x = GetTenantThemeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantThemeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantThemeRequest) ProtoMessage() {}

func (x *GetTenantThemeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantThemeRequest.ProtoReflect.Descriptor instead.
func (*GetTenantThemeRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{6}
}

type TenantThemeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantTheme string `protobuf:"bytes,1,opt,name=tenant_theme,json=tenantTheme,proto3" json:"tenant_theme,omitempty"`
}

func (x *TenantThemeResponse) Reset() {
	*x = TenantThemeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantThemeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantThemeResponse) ProtoMessage() {}

func (x *TenantThemeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantThemeResponse.ProtoReflect.Descriptor instead.
func (*TenantThemeResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{7}
}

func (x *TenantThemeResponse) GetTenantTheme() string {
	if x != nil {
		return x.TenantTheme
	}
	return ""
}

// Contains general tenant settings stored in datastore. This may be expanded later to contain additional settings.
type TenantSettingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginMessage *LoginMessageProto   `protobuf:"bytes,1,opt,name=login_message,json=loginMessage,proto3" json:"login_message,omitempty"`
	Logo         *LogoResponse        `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	LandingPage  *LandingPageResponse `protobuf:"bytes,3,opt,name=landing_page,json=landingPage,proto3" json:"landing_page,omitempty"`
	TenantTheme  *TenantThemeResponse `protobuf:"bytes,4,opt,name=tenant_theme,json=tenantTheme,proto3" json:"tenant_theme,omitempty"`
}

func (x *TenantSettingProto) Reset() {
	*x = TenantSettingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantSettingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantSettingProto) ProtoMessage() {}

func (x *TenantSettingProto) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantSettingProto.ProtoReflect.Descriptor instead.
func (*TenantSettingProto) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{8}
}

func (x *TenantSettingProto) GetLoginMessage() *LoginMessageProto {
	if x != nil {
		return x.LoginMessage
	}
	return nil
}

func (x *TenantSettingProto) GetLogo() *LogoResponse {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *TenantSettingProto) GetLandingPage() *LandingPageResponse {
	if x != nil {
		return x.LandingPage
	}
	return nil
}

func (x *TenantSettingProto) GetTenantTheme() *TenantThemeResponse {
	if x != nil {
		return x.TenantTheme
	}
	return nil
}

type GetCollectionZonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCollectionZonesRequest) Reset() {
	*x = GetCollectionZonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionZonesRequest) ProtoMessage() {}

func (x *GetCollectionZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionZonesRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionZonesRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{9}
}

type GetCollectionZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Czs []*CZ `protobuf:"bytes,1,rep,name=czs,proto3" json:"czs,omitempty"`
}

func (x *GetCollectionZonesResponse) Reset() {
	*x = GetCollectionZonesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionZonesResponse) ProtoMessage() {}

func (x *GetCollectionZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionZonesResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionZonesResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{10}
}

func (x *GetCollectionZonesResponse) GetCzs() []*CZ {
	if x != nil {
		return x.Czs
	}
	return nil
}

type RegisterCollectionZonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string                               `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Czs      []*RegisterCollectionZonesRequest_CZ `protobuf:"bytes,2,rep,name=czs,proto3" json:"czs,omitempty"`
}

func (x *RegisterCollectionZonesRequest) Reset() {
	*x = RegisterCollectionZonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCollectionZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCollectionZonesRequest) ProtoMessage() {}

func (x *RegisterCollectionZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCollectionZonesRequest.ProtoReflect.Descriptor instead.
func (*RegisterCollectionZonesRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterCollectionZonesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RegisterCollectionZonesRequest) GetCzs() []*RegisterCollectionZonesRequest_CZ {
	if x != nil {
		return x.Czs
	}
	return nil
}

// Get Session settings request
type GetSessionSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSessionSettingsRequest) Reset() {
	*x = GetSessionSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionSettingsRequest) ProtoMessage() {}

func (x *GetSessionSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSessionSettingsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{12}
}

// Get Session settings response
type GetSessionSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionSettings *SessionSettings `protobuf:"bytes,1,opt,name=sessionSettings,proto3" json:"sessionSettings,omitempty"`
}

func (x *GetSessionSettingsResponse) Reset() {
	*x = GetSessionSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionSettingsResponse) ProtoMessage() {}

func (x *GetSessionSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSessionSettingsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{13}
}

func (x *GetSessionSettingsResponse) GetSessionSettings() *SessionSettings {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

// Update Session settings request
type UpdateSessionSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdleTimeout    *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	SessionTimeout *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	MaxSessions    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`
}

func (x *UpdateSessionSettingsRequest) Reset() {
	*x = UpdateSessionSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionSettingsRequest) ProtoMessage() {}

func (x *UpdateSessionSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSessionSettingsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSessionSettingsRequest) GetIdleTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *UpdateSessionSettingsRequest) GetSessionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionTimeout
	}
	return nil
}

func (x *UpdateSessionSettingsRequest) GetMaxSessions() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxSessions
	}
	return nil
}

// Update Session settings response
type UpdateSessionSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSessionSettingsResponse) Reset() {
	*x = UpdateSessionSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSessionSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSessionSettingsResponse) ProtoMessage() {}

func (x *UpdateSessionSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSessionSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSessionSettingsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{15}
}

// This is the CZ response object acquired from GET calls
type CZ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url     string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CcIp    string `protobuf:"bytes,4,opt,name=cc_ip,json=ccIp,proto3" json:"cc_ip,omitempty"`
	Created int64  `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CZ) Reset() {
	*x = CZ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CZ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CZ) ProtoMessage() {}

func (x *CZ) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CZ.ProtoReflect.Descriptor instead.
func (*CZ) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{16}
}

func (x *CZ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CZ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CZ) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CZ) GetCcIp() string {
	if x != nil {
		return x.CcIp
	}
	return ""
}

func (x *CZ) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// This is the CZ entity that is written to datastore
type CZRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	CcIp    string `protobuf:"bytes,3,opt,name=cc_ip,json=ccIp,proto3" json:"cc_ip,omitempty"`
	Created int64  `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CZRecord) Reset() {
	*x = CZRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CZRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CZRecord) ProtoMessage() {}

func (x *CZRecord) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CZRecord.ProtoReflect.Descriptor instead.
func (*CZRecord) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{17}
}

func (x *CZRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CZRecord) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CZRecord) GetCcIp() string {
	if x != nil {
		return x.CcIp
	}
	return ""
}

func (x *CZRecord) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// Object for storing configuration settings
type SessionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// idle timeout value in seconds for user session
	IdleTimeout int64 `protobuf:"varint,1,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// timeout value in seconds for user session
	SessionTimeout int64 `protobuf:"varint,2,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	// max number of sessions per user per tenant
	MaxSessions int32 `protobuf:"varint,3,opt,name=max_sessions,json=maxSessions,proto3" json:"max_sessions,omitempty"`
}

func (x *SessionSettings) Reset() {
	*x = SessionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSettings) ProtoMessage() {}

func (x *SessionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSettings.ProtoReflect.Descriptor instead.
func (*SessionSettings) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{18}
}

func (x *SessionSettings) GetIdleTimeout() int64 {
	if x != nil {
		return x.IdleTimeout
	}
	return 0
}

func (x *SessionSettings) GetSessionTimeout() int64 {
	if x != nil {
		return x.SessionTimeout
	}
	return 0
}

func (x *SessionSettings) GetMaxSessions() int32 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

// Object for storing admin settings
type AdminSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of months to retain a tenant's data
	RetentionMonths int32 `protobuf:"varint,1,opt,name=retention_months,json=retentionMonths,proto3" json:"retention_months,omitempty"`
}

func (x *AdminSettings) Reset() {
	*x = AdminSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminSettings) ProtoMessage() {}

func (x *AdminSettings) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminSettings.ProtoReflect.Descriptor instead.
func (*AdminSettings) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{19}
}

func (x *AdminSettings) GetRetentionMonths() int32 {
	if x != nil {
		return x.RetentionMonths
	}
	return 0
}

type GetTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo *TenantInfo `protobuf:"bytes,1,opt,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantRequest) Reset() {
	*x = GetTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRequest) ProtoMessage() {}

func (x *GetTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRequest.ProtoReflect.Descriptor instead.
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{20}
}

func (x *GetTenantRequest) GetTenantInfo() *TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantResult *TenantResult `protobuf:"bytes,1,opt,name=tenant_result,json=tenantResult,proto3" json:"tenant_result,omitempty"`
}

func (x *GetTenantResponse) Reset() {
	*x = GetTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantResponse) ProtoMessage() {}

func (x *GetTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantResponse.ProtoReflect.Descriptor instead.
func (*GetTenantResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{21}
}

func (x *GetTenantResponse) GetTenantResult() *TenantResult {
	if x != nil {
		return x.TenantResult
	}
	return nil
}

type ListTenantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTenantsRequest) Reset() {
	*x = ListTenantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsRequest) ProtoMessage() {}

func (x *ListTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsRequest.ProtoReflect.Descriptor instead.
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{22}
}

type ListTenantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants []string `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
}

func (x *ListTenantsResponse) Reset() {
	*x = ListTenantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsResponse) ProtoMessage() {}

func (x *ListTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsResponse.ProtoReflect.Descriptor instead.
func (*ListTenantsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{23}
}

func (x *ListTenantsResponse) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

type GetAllTenantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTenantsRequest) Reset() {
	*x = GetAllTenantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTenantsRequest) ProtoMessage() {}

func (x *GetAllTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTenantsRequest.ProtoReflect.Descriptor instead.
func (*GetAllTenantsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{24}
}

type GetAllTenantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantResults []*TenantResult `protobuf:"bytes,1,rep,name=tenant_results,json=tenantResults,proto3" json:"tenant_results,omitempty"`
}

func (x *GetAllTenantsResponse) Reset() {
	*x = GetAllTenantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTenantsResponse) ProtoMessage() {}

func (x *GetAllTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTenantsResponse.ProtoReflect.Descriptor instead.
func (*GetAllTenantsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{25}
}

func (x *GetAllTenantsResponse) GetTenantResults() []*TenantResult {
	if x != nil {
		return x.TenantResults
	}
	return nil
}

type DeleteTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant  string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	DryRun  bool   `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Confirm bool   `protobuf:"varint,3,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (x *DeleteTenantRequest) Reset() {
	*x = DeleteTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantRequest) ProtoMessage() {}

func (x *DeleteTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantRequest.ProtoReflect.Descriptor instead.
func (*DeleteTenantRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteTenantRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *DeleteTenantRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *DeleteTenantRequest) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

type DeleteTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsFound   int64 `protobuf:"varint,1,opt,name=rows_found,json=rowsFound,proto3" json:"rows_found,omitempty"`
	RowsDeleted int64 `protobuf:"varint,2,opt,name=rows_deleted,json=rowsDeleted,proto3" json:"rows_deleted,omitempty"`
}

func (x *DeleteTenantResponse) Reset() {
	*x = DeleteTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantResponse) ProtoMessage() {}

func (x *DeleteTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantResponse.ProtoReflect.Descriptor instead.
func (*DeleteTenantResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteTenantResponse) GetRowsFound() int64 {
	if x != nil {
		return x.RowsFound
	}
	return 0
}

func (x *DeleteTenantResponse) GetRowsDeleted() int64 {
	if x != nil {
		return x.RowsDeleted
	}
	return 0
}

type DeleteTenantEverywhereResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []*DeleteTenantEverywhereStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteTenantEverywhereResponse) Reset() {
	*x = DeleteTenantEverywhereResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantEverywhereResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantEverywhereResponse) ProtoMessage() {}

func (x *DeleteTenantEverywhereResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantEverywhereResponse.ProtoReflect.Descriptor instead.
func (*DeleteTenantEverywhereResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteTenantEverywhereResponse) GetStatus() []*DeleteTenantEverywhereStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteTenantEverywhereStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service  string                `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Response *DeleteTenantResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	Error    string                `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteTenantEverywhereStatus) Reset() {
	*x = DeleteTenantEverywhereStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantEverywhereStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantEverywhereStatus) ProtoMessage() {}

func (x *DeleteTenantEverywhereStatus) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantEverywhereStatus.ProtoReflect.Descriptor instead.
func (*DeleteTenantEverywhereStatus) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteTenantEverywhereStatus) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *DeleteTenantEverywhereStatus) GetResponse() *DeleteTenantResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *DeleteTenantEverywhereStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection   string `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	DefaultRealm string `protobuf:"bytes,3,opt,name=defaultRealm,proto3" json:"defaultRealm,omitempty"`
	OrgId        string `protobuf:"bytes,4,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *AuthInfo) Reset() {
	*x = AuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInfo) ProtoMessage() {}

func (x *AuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInfo.ProtoReflect.Descriptor instead.
func (*AuthInfo) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{30}
}

func (x *AuthInfo) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *AuthInfo) GetDefaultRealm() string {
	if x != nil {
		return x.DefaultRealm
	}
	return ""
}

func (x *AuthInfo) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type GetAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *GetAuthRequest) Reset() {
	*x = GetAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthRequest) ProtoMessage() {}

func (x *GetAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthRequest.ProtoReflect.Descriptor instead.
func (*GetAuthRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{31}
}

func (x *GetAuthRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type GetAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *AuthInfo `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetAuthResponse) Reset() {
	*x = GetAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthResponse) ProtoMessage() {}

func (x *GetAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthResponse.ProtoReflect.Descriptor instead.
func (*GetAuthResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{32}
}

func (x *GetAuthResponse) GetAuth() *AuthInfo {
	if x != nil {
		return x.Auth
	}
	return nil
}

type CreateAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string    `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Auth   *AuthInfo `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CreateAuthRequest) Reset() {
	*x = CreateAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthRequest) ProtoMessage() {}

func (x *CreateAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthRequest.ProtoReflect.Descriptor instead.
func (*CreateAuthRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{33}
}

func (x *CreateAuthRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateAuthRequest) GetAuth() *AuthInfo {
	if x != nil {
		return x.Auth
	}
	return nil
}

type CreateAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAuthResponse) Reset() {
	*x = CreateAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthResponse) ProtoMessage() {}

func (x *CreateAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthResponse.ProtoReflect.Descriptor instead.
func (*CreateAuthResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{34}
}

type UpdateAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string    `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Auth   *AuthInfo `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *UpdateAuthRequest) Reset() {
	*x = UpdateAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuthRequest) ProtoMessage() {}

func (x *UpdateAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuthRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuthRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateAuthRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateAuthRequest) GetAuth() *AuthInfo {
	if x != nil {
		return x.Auth
	}
	return nil
}

type UpdateAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAuthResponse) Reset() {
	*x = UpdateAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuthResponse) ProtoMessage() {}

func (x *UpdateAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuthResponse.ProtoReflect.Descriptor instead.
func (*UpdateAuthResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{36}
}

type DeleteAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *DeleteAuthRequest) Reset() {
	*x = DeleteAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthRequest) ProtoMessage() {}

func (x *DeleteAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuthRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteAuthRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type DeleteAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAuthResponse) Reset() {
	*x = DeleteAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuthResponse) ProtoMessage() {}

func (x *DeleteAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuthResponse.ProtoReflect.Descriptor instead.
func (*DeleteAuthResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{38}
}

type TenantAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant string    `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Auth   *AuthInfo `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *TenantAuthInfo) Reset() {
	*x = TenantAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantAuthInfo) ProtoMessage() {}

func (x *TenantAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantAuthInfo.ProtoReflect.Descriptor instead.
func (*TenantAuthInfo) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{39}
}

func (x *TenantAuthInfo) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TenantAuthInfo) GetAuth() *AuthInfo {
	if x != nil {
		return x.Auth
	}
	return nil
}

type LoadAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth []*TenantAuthInfo `protobuf:"bytes,1,rep,name=auth,proto3" json:"auth,omitempty"`
}

func (x *LoadAuthRequest) Reset() {
	*x = LoadAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadAuthRequest) ProtoMessage() {}

func (x *LoadAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadAuthRequest.ProtoReflect.Descriptor instead.
func (*LoadAuthRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{40}
}

func (x *LoadAuthRequest) GetAuth() []*TenantAuthInfo {
	if x != nil {
		return x.Auth
	}
	return nil
}

type LoadAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *LoadAuthResponse) Reset() {
	*x = LoadAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadAuthResponse) ProtoMessage() {}

func (x *LoadAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadAuthResponse.ProtoReflect.Descriptor instead.
func (*LoadAuthResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{41}
}

func (x *LoadAuthResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetTenantIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo *TenantInfo `protobuf:"bytes,1,opt,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantIdRequest) Reset() {
	*x = GetTenantIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantIdRequest) ProtoMessage() {}

func (x *GetTenantIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantIdRequest.ProtoReflect.Descriptor instead.
func (*GetTenantIdRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{42}
}

func (x *GetTenantIdRequest) GetTenantInfo() *TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *GetTenantIdResponse) Reset() {
	*x = GetTenantIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantIdResponse) ProtoMessage() {}

func (x *GetTenantIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantIdResponse.ProtoReflect.Descriptor instead.
func (*GetTenantIdResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{43}
}

func (x *GetTenantIdResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetTenantNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo *TenantInfo `protobuf:"bytes,1,opt,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantNameRequest) Reset() {
	*x = GetTenantNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantNameRequest) ProtoMessage() {}

func (x *GetTenantNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantNameRequest.ProtoReflect.Descriptor instead.
func (*GetTenantNameRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{44}
}

func (x *GetTenantNameRequest) GetTenantInfo() *TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantName string `protobuf:"bytes,1,opt,name=tenant_name,json=tenantName,proto3" json:"tenant_name,omitempty"`
}

func (x *GetTenantNameResponse) Reset() {
	*x = GetTenantNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantNameResponse) ProtoMessage() {}

func (x *GetTenantNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantNameResponse.ProtoReflect.Descriptor instead.
func (*GetTenantNameResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{45}
}

func (x *GetTenantNameResponse) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

type GetTenantDataIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo *TenantInfo `protobuf:"bytes,1,opt,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantDataIdRequest) Reset() {
	*x = GetTenantDataIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantDataIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantDataIdRequest) ProtoMessage() {}

func (x *GetTenantDataIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantDataIdRequest.ProtoReflect.Descriptor instead.
func (*GetTenantDataIdRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{46}
}

func (x *GetTenantDataIdRequest) GetTenantInfo() *TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantDataIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantDataId string `protobuf:"bytes,1,opt,name=tenant_data_id,json=tenantDataId,proto3" json:"tenant_data_id,omitempty"`
}

func (x *GetTenantDataIdResponse) Reset() {
	*x = GetTenantDataIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantDataIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantDataIdResponse) ProtoMessage() {}

func (x *GetTenantDataIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantDataIdResponse.ProtoReflect.Descriptor instead.
func (*GetTenantDataIdResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{47}
}

func (x *GetTenantDataIdResponse) GetTenantDataId() string {
	if x != nil {
		return x.TenantDataId
	}
	return ""
}

type GetTenantIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo []*TenantInfo `protobuf:"bytes,1,rep,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantIdsRequest) Reset() {
	*x = GetTenantIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantIdsRequest) ProtoMessage() {}

func (x *GetTenantIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantIdsRequest.ProtoReflect.Descriptor instead.
func (*GetTenantIdsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{48}
}

func (x *GetTenantIdsRequest) GetTenantInfo() []*TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantIds []*TenantResult `protobuf:"bytes,1,rep,name=tenant_ids,json=tenantIds,proto3" json:"tenant_ids,omitempty"`
}

func (x *GetTenantIdsResponse) Reset() {
	*x = GetTenantIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantIdsResponse) ProtoMessage() {}

func (x *GetTenantIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantIdsResponse.ProtoReflect.Descriptor instead.
func (*GetTenantIdsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{49}
}

func (x *GetTenantIdsResponse) GetTenantIds() []*TenantResult {
	if x != nil {
		return x.TenantIds
	}
	return nil
}

type GetTenantNamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo []*TenantInfo `protobuf:"bytes,1,rep,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantNamesRequest) Reset() {
	*x = GetTenantNamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantNamesRequest) ProtoMessage() {}

func (x *GetTenantNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantNamesRequest.ProtoReflect.Descriptor instead.
func (*GetTenantNamesRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{50}
}

func (x *GetTenantNamesRequest) GetTenantInfo() []*TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantNames []*TenantResult `protobuf:"bytes,1,rep,name=tenant_names,json=tenantNames,proto3" json:"tenant_names,omitempty"`
}

func (x *GetTenantNamesResponse) Reset() {
	*x = GetTenantNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantNamesResponse) ProtoMessage() {}

func (x *GetTenantNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantNamesResponse.ProtoReflect.Descriptor instead.
func (*GetTenantNamesResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{51}
}

func (x *GetTenantNamesResponse) GetTenantNames() []*TenantResult {
	if x != nil {
		return x.TenantNames
	}
	return nil
}

type GetTenantDataIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo []*TenantInfo `protobuf:"bytes,1,rep,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
}

func (x *GetTenantDataIdsRequest) Reset() {
	*x = GetTenantDataIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantDataIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantDataIdsRequest) ProtoMessage() {}

func (x *GetTenantDataIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantDataIdsRequest.ProtoReflect.Descriptor instead.
func (*GetTenantDataIdsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{52}
}

func (x *GetTenantDataIdsRequest) GetTenantInfo() []*TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

type GetTenantDataIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantDataIds []*TenantResult `protobuf:"bytes,1,rep,name=tenant_data_ids,json=tenantDataIds,proto3" json:"tenant_data_ids,omitempty"`
}

func (x *GetTenantDataIdsResponse) Reset() {
	*x = GetTenantDataIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantDataIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantDataIdsResponse) ProtoMessage() {}

func (x *GetTenantDataIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantDataIdsResponse.ProtoReflect.Descriptor instead.
func (*GetTenantDataIdsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{53}
}

func (x *GetTenantDataIdsResponse) GetTenantDataIds() []*TenantResult {
	if x != nil {
		return x.TenantDataIds
	}
	return nil
}

type TenantResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantName      string `protobuf:"bytes,1,opt,name=tenant_name,json=tenantName,proto3" json:"tenant_name,omitempty"`
	TenantId        string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	TenantDataId    string `protobuf:"bytes,3,opt,name=tenant_data_id,json=tenantDataId,proto3" json:"tenant_data_id,omitempty"`
	TenantReference string `protobuf:"bytes,4,opt,name=tenant_reference,json=tenantReference,proto3" json:"tenant_reference,omitempty"`
}

func (x *TenantResult) Reset() {
	*x = TenantResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantResult) ProtoMessage() {}

func (x *TenantResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantResult.ProtoReflect.Descriptor instead.
func (*TenantResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{54}
}

func (x *TenantResult) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

func (x *TenantResult) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TenantResult) GetTenantDataId() string {
	if x != nil {
		return x.TenantDataId
	}
	return ""
}

func (x *TenantResult) GetTenantReference() string {
	if x != nil {
		return x.TenantReference
	}
	return ""
}

type TenantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//	*TenantInfo_TenantId
	//	*TenantInfo_TenantName
	//	*TenantInfo_TenantDataId
	//	*TenantInfo_TenantReference
	Field isTenantInfo_Field `protobuf_oneof:"field"`
}

func (x *TenantInfo) Reset() {
	*x = TenantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantInfo) ProtoMessage() {}

func (x *TenantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantInfo.ProtoReflect.Descriptor instead.
func (*TenantInfo) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{55}
}

func (m *TenantInfo) GetField() isTenantInfo_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *TenantInfo) GetTenantId() string {
	if x, ok := x.GetField().(*TenantInfo_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (x *TenantInfo) GetTenantName() string {
	if x, ok := x.GetField().(*TenantInfo_TenantName); ok {
		return x.TenantName
	}
	return ""
}

func (x *TenantInfo) GetTenantDataId() string {
	if x, ok := x.GetField().(*TenantInfo_TenantDataId); ok {
		return x.TenantDataId
	}
	return ""
}

func (x *TenantInfo) GetTenantReference() string {
	if x, ok := x.GetField().(*TenantInfo_TenantReference); ok {
		return x.TenantReference
	}
	return ""
}

type isTenantInfo_Field interface {
	isTenantInfo_Field()
}

type TenantInfo_TenantId struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3,oneof"` // Unique id for the tenant
}

type TenantInfo_TenantName struct {
	TenantName string `protobuf:"bytes,2,opt,name=tenant_name,json=tenantName,proto3,oneof"` // Primary name or an alias for the tenant
}

type TenantInfo_TenantDataId struct {
	TenantDataId string `protobuf:"bytes,3,opt,name=tenant_data_id,json=tenantDataId,proto3,oneof"` // tenant id as referenced in a datapoint
}

type TenantInfo_TenantReference struct {
	TenantReference string `protobuf:"bytes,4,opt,name=tenant_reference,json=tenantReference,proto3,oneof"` // A generic reference for the tenant where the specific id type (has to be one of the above) is unknown. For better performance, use one of the other fields wherever possible.
}

func (*TenantInfo_TenantId) isTenantInfo_Field() {}

func (*TenantInfo_TenantName) isTenantInfo_Field() {}

func (*TenantInfo_TenantDataId) isTenantInfo_Field() {}

func (*TenantInfo_TenantReference) isTenantInfo_Field() {}

type CreateTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantName string `protobuf:"bytes,1,opt,name=tenant_name,json=tenantName,proto3" json:"tenant_name,omitempty"`
}

func (x *CreateTenantRequest) Reset() {
	*x = CreateTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantRequest) ProtoMessage() {}

func (x *CreateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantRequest.ProtoReflect.Descriptor instead.
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{56}
}

func (x *CreateTenantRequest) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

type CreateTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *CreateTenantResponse) Reset() {
	*x = CreateTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTenantResponse) ProtoMessage() {}

func (x *CreateTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTenantResponse.ProtoReflect.Descriptor instead.
func (*CreateTenantResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{57}
}

func (x *CreateTenantResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ChangeTenantNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TenantIdentifier:
	//	*ChangeTenantNameRequest_TenantId
	//	*ChangeTenantNameRequest_CurrentName
	TenantIdentifier isChangeTenantNameRequest_TenantIdentifier `protobuf_oneof:"tenant_identifier"`
	NewName          string                                     `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *ChangeTenantNameRequest) Reset() {
	*x = ChangeTenantNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTenantNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTenantNameRequest) ProtoMessage() {}

func (x *ChangeTenantNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTenantNameRequest.ProtoReflect.Descriptor instead.
func (*ChangeTenantNameRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{58}
}

func (m *ChangeTenantNameRequest) GetTenantIdentifier() isChangeTenantNameRequest_TenantIdentifier {
	if m != nil {
		return m.TenantIdentifier
	}
	return nil
}

func (x *ChangeTenantNameRequest) GetTenantId() string {
	if x, ok := x.GetTenantIdentifier().(*ChangeTenantNameRequest_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (x *ChangeTenantNameRequest) GetCurrentName() string {
	if x, ok := x.GetTenantIdentifier().(*ChangeTenantNameRequest_CurrentName); ok {
		return x.CurrentName
	}
	return ""
}

func (x *ChangeTenantNameRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type isChangeTenantNameRequest_TenantIdentifier interface {
	isChangeTenantNameRequest_TenantIdentifier()
}

type ChangeTenantNameRequest_TenantId struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3,oneof"`
}

type ChangeTenantNameRequest_CurrentName struct {
	CurrentName string `protobuf:"bytes,2,opt,name=current_name,json=currentName,proto3,oneof"`
}

func (*ChangeTenantNameRequest_TenantId) isChangeTenantNameRequest_TenantIdentifier() {}

func (*ChangeTenantNameRequest_CurrentName) isChangeTenantNameRequest_TenantIdentifier() {}

type ChangeTenantNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldName string `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *ChangeTenantNameResponse) Reset() {
	*x = ChangeTenantNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTenantNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTenantNameResponse) ProtoMessage() {}

func (x *ChangeTenantNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTenantNameResponse.ProtoReflect.Descriptor instead.
func (*ChangeTenantNameResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{59}
}

func (x *ChangeTenantNameResponse) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *ChangeTenantNameResponse) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type DeleteTenantNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TenantIdentifier:
	//	*DeleteTenantNameRequest_TenantId
	//	*DeleteTenantNameRequest_CurrentName
	TenantIdentifier isDeleteTenantNameRequest_TenantIdentifier `protobuf_oneof:"tenant_identifier"`
	Name             string                                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTenantNameRequest) Reset() {
	*x = DeleteTenantNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantNameRequest) ProtoMessage() {}

func (x *DeleteTenantNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantNameRequest.ProtoReflect.Descriptor instead.
func (*DeleteTenantNameRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{60}
}

func (m *DeleteTenantNameRequest) GetTenantIdentifier() isDeleteTenantNameRequest_TenantIdentifier {
	if m != nil {
		return m.TenantIdentifier
	}
	return nil
}

func (x *DeleteTenantNameRequest) GetTenantId() string {
	if x, ok := x.GetTenantIdentifier().(*DeleteTenantNameRequest_TenantId); ok {
		return x.TenantId
	}
	return ""
}

func (x *DeleteTenantNameRequest) GetCurrentName() string {
	if x, ok := x.GetTenantIdentifier().(*DeleteTenantNameRequest_CurrentName); ok {
		return x.CurrentName
	}
	return ""
}

func (x *DeleteTenantNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type isDeleteTenantNameRequest_TenantIdentifier interface {
	isDeleteTenantNameRequest_TenantIdentifier()
}

type DeleteTenantNameRequest_TenantId struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3,oneof"`
}

type DeleteTenantNameRequest_CurrentName struct {
	CurrentName string `protobuf:"bytes,2,opt,name=current_name,json=currentName,proto3,oneof"`
}

func (*DeleteTenantNameRequest_TenantId) isDeleteTenantNameRequest_TenantIdentifier() {}

func (*DeleteTenantNameRequest_CurrentName) isDeleteTenantNameRequest_TenantIdentifier() {}

type DeleteTenantNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTenantNameResponse) Reset() {
	*x = DeleteTenantNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTenantNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTenantNameResponse) ProtoMessage() {}

func (x *DeleteTenantNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTenantNameResponse.ProtoReflect.Descriptor instead.
func (*DeleteTenantNameResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{61}
}

type RegisterCollectionZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterCollectionZonesResponse) Reset() {
	*x = RegisterCollectionZonesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCollectionZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCollectionZonesResponse) ProtoMessage() {}

func (x *RegisterCollectionZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCollectionZonesResponse.ProtoReflect.Descriptor instead.
func (*RegisterCollectionZonesResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{62}
}

type DeleteCollectionZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo *TenantInfo `protobuf:"bytes,1,opt,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
	CzId       string      `protobuf:"bytes,2,opt,name=cz_id,json=czId,proto3" json:"cz_id,omitempty"`
}

func (x *DeleteCollectionZoneRequest) Reset() {
	*x = DeleteCollectionZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionZoneRequest) ProtoMessage() {}

func (x *DeleteCollectionZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionZoneRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollectionZoneRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{63}
}

func (x *DeleteCollectionZoneRequest) GetTenantInfo() *TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

func (x *DeleteCollectionZoneRequest) GetCzId() string {
	if x != nil {
		return x.CzId
	}
	return ""
}

type DeleteCollectionZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCollectionZoneResponse) Reset() {
	*x = DeleteCollectionZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionZoneResponse) ProtoMessage() {}

func (x *DeleteCollectionZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionZoneResponse.ProtoReflect.Descriptor instead.
func (*DeleteCollectionZoneResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{64}
}

type SetAdminSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantInfo      *TenantInfo `protobuf:"bytes,1,opt,name=tenant_info,json=tenantInfo,proto3" json:"tenant_info,omitempty"`
	RetentionMonths int32       `protobuf:"varint,2,opt,name=retention_months,json=retentionMonths,proto3" json:"retention_months,omitempty"`
}

func (x *SetAdminSettingsRequest) Reset() {
	*x = SetAdminSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdminSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdminSettingsRequest) ProtoMessage() {}

func (x *SetAdminSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdminSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetAdminSettingsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{65}
}

func (x *SetAdminSettingsRequest) GetTenantInfo() *TenantInfo {
	if x != nil {
		return x.TenantInfo
	}
	return nil
}

func (x *SetAdminSettingsRequest) GetRetentionMonths() int32 {
	if x != nil {
		return x.RetentionMonths
	}
	return 0
}

type SetAdminSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAdminSettingsResponse) Reset() {
	*x = SetAdminSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAdminSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAdminSettingsResponse) ProtoMessage() {}

func (x *SetAdminSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAdminSettingsResponse.ProtoReflect.Descriptor instead.
func (*SetAdminSettingsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{66}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{67}
}

type RegisterCollectionZonesRequest_CZ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CcIp string `protobuf:"bytes,4,opt,name=cc_ip,json=ccIp,proto3" json:"cc_ip,omitempty"`
}

func (x *RegisterCollectionZonesRequest_CZ) Reset() {
	*x = RegisterCollectionZonesRequest_CZ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCollectionZonesRequest_CZ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCollectionZonesRequest_CZ) ProtoMessage() {}

func (x *RegisterCollectionZonesRequest_CZ) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCollectionZonesRequest_CZ.ProtoReflect.Descriptor instead.
func (*RegisterCollectionZonesRequest_CZ) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RegisterCollectionZonesRequest_CZ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterCollectionZonesRequest_CZ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterCollectionZonesRequest_CZ) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RegisterCollectionZonesRequest_CZ) GetCcIp() string {
	if x != nil {
		return x.CcIp
	}
	return ""
}

var File_zenoss_zing_proto_cloud_tenant_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_tenant_proto_rawDesc = []byte{
	0x0a, 0x24, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x11,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x61, 0x76, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x61, 0x76, 0x49, 0x63, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x38, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x38, 0x0a, 0x13, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x96, 0x02, 0x0a,
	0x12, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6c, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x03, 0x63, 0x7a, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x5a, 0x52,
	0x03, 0x63, 0x7a, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x03, 0x63, 0x7a, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x5a, 0x52, 0x03, 0x63, 0x7a, 0x73, 0x1a, 0x4f, 0x0a, 0x02, 0x43, 0x5a, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x63, 0x49, 0x70, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xe4, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x44, 0x0a,
	0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x02, 0x43, 0x5a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x13, 0x0a, 0x05, 0x63, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x63, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x5f, 0x0a, 0x08, 0x43, 0x5a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x63, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22,
	0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x60, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x22, 0x58, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x77,
	0x73, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x6f, 0x77, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x64, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x43, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x2a, 0x0a,
	0x10, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x38, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x3f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x22, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x36, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x1f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x7a, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x7a, 0x49, 0x64, 0x22, 0x1e,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22,
	0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x88, 0x0c, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c,
	0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x58, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01,
	0x12, 0x58, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x58, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x21,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0x87, 0x17, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x74, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x72, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x7d, 0x3a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x72, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x12, 0x75, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x7d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73,
	0x3a, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x85, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x12, 0x24, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x81,
	0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x91,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x73, 0x12, 0x7a, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x91,
	0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01,
	0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x7a, 0x73, 0x3a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x9d, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x7a, 0x73, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a,
	0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x73, 0x65, 0x74, 0x12, 0x7d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x69,
	0x6e, 0x66, 0x6f, 0x3a, 0x67, 0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x89, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a,
	0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2d,
	0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x7c, 0x0a, 0x0c, 0x4c,
	0x6f, 0x61, 0x64, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f,
	0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x32, 0xc6, 0x06, 0x0a, 0x15, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x58, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_tenant_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_tenant_proto_rawDescData = file_zenoss_zing_proto_cloud_tenant_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_tenant_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_tenant_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_tenant_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_tenant_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_tenant_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_tenant_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_zenoss_zing_proto_cloud_tenant_proto_goTypes = []interface{}{
	(*GetLoginMessageRequest)(nil),            // 0: zenoss.cloud.GetLoginMessageRequest
	(*LoginMessageProto)(nil),                 // 1: zenoss.cloud.LoginMessageProto
	(*GetLogoRequest)(nil),                    // 2: zenoss.cloud.GetLogoRequest
	(*LogoResponse)(nil),                      // 3: zenoss.cloud.LogoResponse
	(*GetLandingPageRequest)(nil),             // 4: zenoss.cloud.GetLandingPageRequest
	(*LandingPageResponse)(nil),               // 5: zenoss.cloud.LandingPageResponse
	(*GetTenantThemeRequest)(nil),             // 6: zenoss.cloud.GetTenantThemeRequest
	(*TenantThemeResponse)(nil),               // 7: zenoss.cloud.TenantThemeResponse
	(*TenantSettingProto)(nil),                // 8: zenoss.cloud.TenantSettingProto
	(*GetCollectionZonesRequest)(nil),         // 9: zenoss.cloud.GetCollectionZonesRequest
	(*GetCollectionZonesResponse)(nil),        // 10: zenoss.cloud.GetCollectionZonesResponse
	(*RegisterCollectionZonesRequest)(nil),    // 11: zenoss.cloud.RegisterCollectionZonesRequest
	(*GetSessionSettingsRequest)(nil),         // 12: zenoss.cloud.GetSessionSettingsRequest
	(*GetSessionSettingsResponse)(nil),        // 13: zenoss.cloud.GetSessionSettingsResponse
	(*UpdateSessionSettingsRequest)(nil),      // 14: zenoss.cloud.UpdateSessionSettingsRequest
	(*UpdateSessionSettingsResponse)(nil),     // 15: zenoss.cloud.UpdateSessionSettingsResponse
	(*CZ)(nil),                                // 16: zenoss.cloud.CZ
	(*CZRecord)(nil),                          // 17: zenoss.cloud.CZRecord
	(*SessionSettings)(nil),                   // 18: zenoss.cloud.SessionSettings
	(*AdminSettings)(nil),                     // 19: zenoss.cloud.AdminSettings
	(*GetTenantRequest)(nil),                  // 20: zenoss.cloud.GetTenantRequest
	(*GetTenantResponse)(nil),                 // 21: zenoss.cloud.GetTenantResponse
	(*ListTenantsRequest)(nil),                // 22: zenoss.cloud.ListTenantsRequest
	(*ListTenantsResponse)(nil),               // 23: zenoss.cloud.ListTenantsResponse
	(*GetAllTenantsRequest)(nil),              // 24: zenoss.cloud.GetAllTenantsRequest
	(*GetAllTenantsResponse)(nil),             // 25: zenoss.cloud.GetAllTenantsResponse
	(*DeleteTenantRequest)(nil),               // 26: zenoss.cloud.DeleteTenantRequest
	(*DeleteTenantResponse)(nil),              // 27: zenoss.cloud.DeleteTenantResponse
	(*DeleteTenantEverywhereResponse)(nil),    // 28: zenoss.cloud.DeleteTenantEverywhereResponse
	(*DeleteTenantEverywhereStatus)(nil),      // 29: zenoss.cloud.DeleteTenantEverywhereStatus
	(*AuthInfo)(nil),                          // 30: zenoss.cloud.AuthInfo
	(*GetAuthRequest)(nil),                    // 31: zenoss.cloud.GetAuthRequest
	(*GetAuthResponse)(nil),                   // 32: zenoss.cloud.GetAuthResponse
	(*CreateAuthRequest)(nil),                 // 33: zenoss.cloud.CreateAuthRequest
	(*CreateAuthResponse)(nil),                // 34: zenoss.cloud.CreateAuthResponse
	(*UpdateAuthRequest)(nil),                 // 35: zenoss.cloud.UpdateAuthRequest
	(*UpdateAuthResponse)(nil),                // 36: zenoss.cloud.UpdateAuthResponse
	(*DeleteAuthRequest)(nil),                 // 37: zenoss.cloud.DeleteAuthRequest
	(*DeleteAuthResponse)(nil),                // 38: zenoss.cloud.DeleteAuthResponse
	(*TenantAuthInfo)(nil),                    // 39: zenoss.cloud.TenantAuthInfo
	(*LoadAuthRequest)(nil),                   // 40: zenoss.cloud.LoadAuthRequest
	(*LoadAuthResponse)(nil),                  // 41: zenoss.cloud.LoadAuthResponse
	(*GetTenantIdRequest)(nil),                // 42: zenoss.cloud.GetTenantIdRequest
	(*GetTenantIdResponse)(nil),               // 43: zenoss.cloud.GetTenantIdResponse
	(*GetTenantNameRequest)(nil),              // 44: zenoss.cloud.GetTenantNameRequest
	(*GetTenantNameResponse)(nil),             // 45: zenoss.cloud.GetTenantNameResponse
	(*GetTenantDataIdRequest)(nil),            // 46: zenoss.cloud.GetTenantDataIdRequest
	(*GetTenantDataIdResponse)(nil),           // 47: zenoss.cloud.GetTenantDataIdResponse
	(*GetTenantIdsRequest)(nil),               // 48: zenoss.cloud.GetTenantIdsRequest
	(*GetTenantIdsResponse)(nil),              // 49: zenoss.cloud.GetTenantIdsResponse
	(*GetTenantNamesRequest)(nil),             // 50: zenoss.cloud.GetTenantNamesRequest
	(*GetTenantNamesResponse)(nil),            // 51: zenoss.cloud.GetTenantNamesResponse
	(*GetTenantDataIdsRequest)(nil),           // 52: zenoss.cloud.GetTenantDataIdsRequest
	(*GetTenantDataIdsResponse)(nil),          // 53: zenoss.cloud.GetTenantDataIdsResponse
	(*TenantResult)(nil),                      // 54: zenoss.cloud.TenantResult
	(*TenantInfo)(nil),                        // 55: zenoss.cloud.TenantInfo
	(*CreateTenantRequest)(nil),               // 56: zenoss.cloud.CreateTenantRequest
	(*CreateTenantResponse)(nil),              // 57: zenoss.cloud.CreateTenantResponse
	(*ChangeTenantNameRequest)(nil),           // 58: zenoss.cloud.ChangeTenantNameRequest
	(*ChangeTenantNameResponse)(nil),          // 59: zenoss.cloud.ChangeTenantNameResponse
	(*DeleteTenantNameRequest)(nil),           // 60: zenoss.cloud.DeleteTenantNameRequest
	(*DeleteTenantNameResponse)(nil),          // 61: zenoss.cloud.DeleteTenantNameResponse
	(*RegisterCollectionZonesResponse)(nil),   // 62: zenoss.cloud.RegisterCollectionZonesResponse
	(*DeleteCollectionZoneRequest)(nil),       // 63: zenoss.cloud.DeleteCollectionZoneRequest
	(*DeleteCollectionZoneResponse)(nil),      // 64: zenoss.cloud.DeleteCollectionZoneResponse
	(*SetAdminSettingsRequest)(nil),           // 65: zenoss.cloud.SetAdminSettingsRequest
	(*SetAdminSettingsResponse)(nil),          // 66: zenoss.cloud.SetAdminSettingsResponse
	(*Empty)(nil),                             // 67: zenoss.cloud.Empty
	(*RegisterCollectionZonesRequest_CZ)(nil), // 68: zenoss.cloud.RegisterCollectionZonesRequest.CZ
	(*wrapperspb.Int64Value)(nil),             // 69: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),             // 70: google.protobuf.Int32Value
}
var file_zenoss_zing_proto_cloud_tenant_proto_depIdxs = []int32{
	1,  // 0: zenoss.cloud.TenantSettingProto.login_message:type_name -> zenoss.cloud.LoginMessageProto
	3,  // 1: zenoss.cloud.TenantSettingProto.logo:type_name -> zenoss.cloud.LogoResponse
	5,  // 2: zenoss.cloud.TenantSettingProto.landing_page:type_name -> zenoss.cloud.LandingPageResponse
	7,  // 3: zenoss.cloud.TenantSettingProto.tenant_theme:type_name -> zenoss.cloud.TenantThemeResponse
	16, // 4: zenoss.cloud.GetCollectionZonesResponse.czs:type_name -> zenoss.cloud.CZ
	68, // 5: zenoss.cloud.RegisterCollectionZonesRequest.czs:type_name -> zenoss.cloud.RegisterCollectionZonesRequest.CZ
	18, // 6: zenoss.cloud.GetSessionSettingsResponse.sessionSettings:type_name -> zenoss.cloud.SessionSettings
	69, // 7: zenoss.cloud.UpdateSessionSettingsRequest.idle_timeout:type_name -> google.protobuf.Int64Value
	69, // 8: zenoss.cloud.UpdateSessionSettingsRequest.session_timeout:type_name -> google.protobuf.Int64Value
	70, // 9: zenoss.cloud.UpdateSessionSettingsRequest.max_sessions:type_name -> google.protobuf.Int32Value
	55, // 10: zenoss.cloud.GetTenantRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	54, // 11: zenoss.cloud.GetTenantResponse.tenant_result:type_name -> zenoss.cloud.TenantResult
	54, // 12: zenoss.cloud.GetAllTenantsResponse.tenant_results:type_name -> zenoss.cloud.TenantResult
	29, // 13: zenoss.cloud.DeleteTenantEverywhereResponse.status:type_name -> zenoss.cloud.DeleteTenantEverywhereStatus
	27, // 14: zenoss.cloud.DeleteTenantEverywhereStatus.response:type_name -> zenoss.cloud.DeleteTenantResponse
	30, // 15: zenoss.cloud.GetAuthResponse.auth:type_name -> zenoss.cloud.AuthInfo
	30, // 16: zenoss.cloud.CreateAuthRequest.auth:type_name -> zenoss.cloud.AuthInfo
	30, // 17: zenoss.cloud.UpdateAuthRequest.auth:type_name -> zenoss.cloud.AuthInfo
	30, // 18: zenoss.cloud.TenantAuthInfo.auth:type_name -> zenoss.cloud.AuthInfo
	39, // 19: zenoss.cloud.LoadAuthRequest.auth:type_name -> zenoss.cloud.TenantAuthInfo
	55, // 20: zenoss.cloud.GetTenantIdRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	55, // 21: zenoss.cloud.GetTenantNameRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	55, // 22: zenoss.cloud.GetTenantDataIdRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	55, // 23: zenoss.cloud.GetTenantIdsRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	54, // 24: zenoss.cloud.GetTenantIdsResponse.tenant_ids:type_name -> zenoss.cloud.TenantResult
	55, // 25: zenoss.cloud.GetTenantNamesRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	54, // 26: zenoss.cloud.GetTenantNamesResponse.tenant_names:type_name -> zenoss.cloud.TenantResult
	55, // 27: zenoss.cloud.GetTenantDataIdsRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	54, // 28: zenoss.cloud.GetTenantDataIdsResponse.tenant_data_ids:type_name -> zenoss.cloud.TenantResult
	55, // 29: zenoss.cloud.DeleteCollectionZoneRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	55, // 30: zenoss.cloud.SetAdminSettingsRequest.tenant_info:type_name -> zenoss.cloud.TenantInfo
	9,  // 31: zenoss.cloud.TenantService.GetCollectionZones:input_type -> zenoss.cloud.GetCollectionZonesRequest
	12, // 32: zenoss.cloud.TenantService.GetSessionSettings:input_type -> zenoss.cloud.GetSessionSettingsRequest
	14, // 33: zenoss.cloud.TenantService.UpdateSessionSettings:input_type -> zenoss.cloud.UpdateSessionSettingsRequest
	0,  // 34: zenoss.cloud.TenantService.GetLoginMessage:input_type -> zenoss.cloud.GetLoginMessageRequest
	1,  // 35: zenoss.cloud.TenantService.UpdateLoginMessage:input_type -> zenoss.cloud.LoginMessageProto
	2,  // 36: zenoss.cloud.TenantService.GetLogo:input_type -> zenoss.cloud.GetLogoRequest
	3,  // 37: zenoss.cloud.TenantService.UpdateLogo:input_type -> zenoss.cloud.LogoResponse
	31, // 38: zenoss.cloud.TenantService.GetAuthInfo:input_type -> zenoss.cloud.GetAuthRequest
	33, // 39: zenoss.cloud.TenantService.CreateAuthInfo:input_type -> zenoss.cloud.CreateAuthRequest
	35, // 40: zenoss.cloud.TenantService.UpdateAuthInfo:input_type -> zenoss.cloud.UpdateAuthRequest
	37, // 41: zenoss.cloud.TenantService.DeleteAuthInfo:input_type -> zenoss.cloud.DeleteAuthRequest
	4,  // 42: zenoss.cloud.TenantService.GetLandingPage:input_type -> zenoss.cloud.GetLandingPageRequest
	5,  // 43: zenoss.cloud.TenantService.UpdateLandingPage:input_type -> zenoss.cloud.LandingPageResponse
	6,  // 44: zenoss.cloud.TenantService.GetTenantTheme:input_type -> zenoss.cloud.GetTenantThemeRequest
	7,  // 45: zenoss.cloud.TenantService.UpdateTenantTheme:input_type -> zenoss.cloud.TenantThemeResponse
	40, // 46: zenoss.cloud.TenantService.LoadAuthInfo:input_type -> zenoss.cloud.LoadAuthRequest
	67, // 47: zenoss.cloud.TenantService.GetTenant:input_type -> zenoss.cloud.Empty
	22, // 48: zenoss.cloud.TenantAdmin.ListTenants:input_type -> zenoss.cloud.ListTenantsRequest
	26, // 49: zenoss.cloud.TenantAdmin.DeleteTenant:input_type -> zenoss.cloud.DeleteTenantRequest
	26, // 50: zenoss.cloud.TenantAdmin.DeleteTenantEverywhere:input_type -> zenoss.cloud.DeleteTenantRequest
	20, // 51: zenoss.cloud.TenantAdmin.GetTenant:input_type -> zenoss.cloud.GetTenantRequest
	42, // 52: zenoss.cloud.TenantAdmin.GetTenantId:input_type -> zenoss.cloud.GetTenantIdRequest
	44, // 53: zenoss.cloud.TenantAdmin.GetTenantName:input_type -> zenoss.cloud.GetTenantNameRequest
	46, // 54: zenoss.cloud.TenantAdmin.GetTenantDataId:input_type -> zenoss.cloud.GetTenantDataIdRequest
	48, // 55: zenoss.cloud.TenantAdmin.GetTenantIds:input_type -> zenoss.cloud.GetTenantIdsRequest
	50, // 56: zenoss.cloud.TenantAdmin.GetTenantNames:input_type -> zenoss.cloud.GetTenantNamesRequest
	52, // 57: zenoss.cloud.TenantAdmin.GetTenantDataIds:input_type -> zenoss.cloud.GetTenantDataIdsRequest
	56, // 58: zenoss.cloud.TenantAdmin.CreateTenant:input_type -> zenoss.cloud.CreateTenantRequest
	58, // 59: zenoss.cloud.TenantAdmin.ChangeTenantName:input_type -> zenoss.cloud.ChangeTenantNameRequest
	60, // 60: zenoss.cloud.TenantAdmin.DeleteTenantName:input_type -> zenoss.cloud.DeleteTenantNameRequest
	11, // 61: zenoss.cloud.TenantAdmin.RegisterCollectionZones:input_type -> zenoss.cloud.RegisterCollectionZonesRequest
	63, // 62: zenoss.cloud.TenantAdmin.DeleteCollectionZone:input_type -> zenoss.cloud.DeleteCollectionZoneRequest
	65, // 63: zenoss.cloud.TenantAdmin.SetAdminSettings:input_type -> zenoss.cloud.SetAdminSettingsRequest
	31, // 64: zenoss.cloud.TenantAdmin.GetAuthInfo:input_type -> zenoss.cloud.GetAuthRequest
	33, // 65: zenoss.cloud.TenantAdmin.CreateAuthInfo:input_type -> zenoss.cloud.CreateAuthRequest
	35, // 66: zenoss.cloud.TenantAdmin.UpdateAuthInfo:input_type -> zenoss.cloud.UpdateAuthRequest
	37, // 67: zenoss.cloud.TenantAdmin.DeleteAuthInfo:input_type -> zenoss.cloud.DeleteAuthRequest
	40, // 68: zenoss.cloud.TenantAdmin.LoadAuthInfo:input_type -> zenoss.cloud.LoadAuthRequest
	42, // 69: zenoss.cloud.TenantInternalService.GetTenantId:input_type -> zenoss.cloud.GetTenantIdRequest
	44, // 70: zenoss.cloud.TenantInternalService.GetTenantName:input_type -> zenoss.cloud.GetTenantNameRequest
	46, // 71: zenoss.cloud.TenantInternalService.GetTenantDataId:input_type -> zenoss.cloud.GetTenantDataIdRequest
	48, // 72: zenoss.cloud.TenantInternalService.GetTenantIds:input_type -> zenoss.cloud.GetTenantIdsRequest
	50, // 73: zenoss.cloud.TenantInternalService.GetTenantNames:input_type -> zenoss.cloud.GetTenantNamesRequest
	52, // 74: zenoss.cloud.TenantInternalService.GetTenantDataIds:input_type -> zenoss.cloud.GetTenantDataIdsRequest
	22, // 75: zenoss.cloud.TenantInternalService.ListTenants:input_type -> zenoss.cloud.ListTenantsRequest
	24, // 76: zenoss.cloud.TenantInternalService.GetAllTenants:input_type -> zenoss.cloud.GetAllTenantsRequest
	31, // 77: zenoss.cloud.TenantInternalService.GetAuthInfo:input_type -> zenoss.cloud.GetAuthRequest
	10, // 78: zenoss.cloud.TenantService.GetCollectionZones:output_type -> zenoss.cloud.GetCollectionZonesResponse
	13, // 79: zenoss.cloud.TenantService.GetSessionSettings:output_type -> zenoss.cloud.GetSessionSettingsResponse
	15, // 80: zenoss.cloud.TenantService.UpdateSessionSettings:output_type -> zenoss.cloud.UpdateSessionSettingsResponse
	1,  // 81: zenoss.cloud.TenantService.GetLoginMessage:output_type -> zenoss.cloud.LoginMessageProto
	1,  // 82: zenoss.cloud.TenantService.UpdateLoginMessage:output_type -> zenoss.cloud.LoginMessageProto
	3,  // 83: zenoss.cloud.TenantService.GetLogo:output_type -> zenoss.cloud.LogoResponse
	3,  // 84: zenoss.cloud.TenantService.UpdateLogo:output_type -> zenoss.cloud.LogoResponse
	32, // 85: zenoss.cloud.TenantService.GetAuthInfo:output_type -> zenoss.cloud.GetAuthResponse
	34, // 86: zenoss.cloud.TenantService.CreateAuthInfo:output_type -> zenoss.cloud.CreateAuthResponse
	36, // 87: zenoss.cloud.TenantService.UpdateAuthInfo:output_type -> zenoss.cloud.UpdateAuthResponse
	38, // 88: zenoss.cloud.TenantService.DeleteAuthInfo:output_type -> zenoss.cloud.DeleteAuthResponse
	5,  // 89: zenoss.cloud.TenantService.GetLandingPage:output_type -> zenoss.cloud.LandingPageResponse
	5,  // 90: zenoss.cloud.TenantService.UpdateLandingPage:output_type -> zenoss.cloud.LandingPageResponse
	7,  // 91: zenoss.cloud.TenantService.GetTenantTheme:output_type -> zenoss.cloud.TenantThemeResponse
	7,  // 92: zenoss.cloud.TenantService.UpdateTenantTheme:output_type -> zenoss.cloud.TenantThemeResponse
	41, // 93: zenoss.cloud.TenantService.LoadAuthInfo:output_type -> zenoss.cloud.LoadAuthResponse
	21, // 94: zenoss.cloud.TenantService.GetTenant:output_type -> zenoss.cloud.GetTenantResponse
	23, // 95: zenoss.cloud.TenantAdmin.ListTenants:output_type -> zenoss.cloud.ListTenantsResponse
	27, // 96: zenoss.cloud.TenantAdmin.DeleteTenant:output_type -> zenoss.cloud.DeleteTenantResponse
	28, // 97: zenoss.cloud.TenantAdmin.DeleteTenantEverywhere:output_type -> zenoss.cloud.DeleteTenantEverywhereResponse
	21, // 98: zenoss.cloud.TenantAdmin.GetTenant:output_type -> zenoss.cloud.GetTenantResponse
	43, // 99: zenoss.cloud.TenantAdmin.GetTenantId:output_type -> zenoss.cloud.GetTenantIdResponse
	45, // 100: zenoss.cloud.TenantAdmin.GetTenantName:output_type -> zenoss.cloud.GetTenantNameResponse
	47, // 101: zenoss.cloud.TenantAdmin.GetTenantDataId:output_type -> zenoss.cloud.GetTenantDataIdResponse
	49, // 102: zenoss.cloud.TenantAdmin.GetTenantIds:output_type -> zenoss.cloud.GetTenantIdsResponse
	51, // 103: zenoss.cloud.TenantAdmin.GetTenantNames:output_type -> zenoss.cloud.GetTenantNamesResponse
	53, // 104: zenoss.cloud.TenantAdmin.GetTenantDataIds:output_type -> zenoss.cloud.GetTenantDataIdsResponse
	57, // 105: zenoss.cloud.TenantAdmin.CreateTenant:output_type -> zenoss.cloud.CreateTenantResponse
	59, // 106: zenoss.cloud.TenantAdmin.ChangeTenantName:output_type -> zenoss.cloud.ChangeTenantNameResponse
	61, // 107: zenoss.cloud.TenantAdmin.DeleteTenantName:output_type -> zenoss.cloud.DeleteTenantNameResponse
	62, // 108: zenoss.cloud.TenantAdmin.RegisterCollectionZones:output_type -> zenoss.cloud.RegisterCollectionZonesResponse
	64, // 109: zenoss.cloud.TenantAdmin.DeleteCollectionZone:output_type -> zenoss.cloud.DeleteCollectionZoneResponse
	66, // 110: zenoss.cloud.TenantAdmin.SetAdminSettings:output_type -> zenoss.cloud.SetAdminSettingsResponse
	32, // 111: zenoss.cloud.TenantAdmin.GetAuthInfo:output_type -> zenoss.cloud.GetAuthResponse
	34, // 112: zenoss.cloud.TenantAdmin.CreateAuthInfo:output_type -> zenoss.cloud.CreateAuthResponse
	36, // 113: zenoss.cloud.TenantAdmin.UpdateAuthInfo:output_type -> zenoss.cloud.UpdateAuthResponse
	38, // 114: zenoss.cloud.TenantAdmin.DeleteAuthInfo:output_type -> zenoss.cloud.DeleteAuthResponse
	41, // 115: zenoss.cloud.TenantAdmin.LoadAuthInfo:output_type -> zenoss.cloud.LoadAuthResponse
	43, // 116: zenoss.cloud.TenantInternalService.GetTenantId:output_type -> zenoss.cloud.GetTenantIdResponse
	45, // 117: zenoss.cloud.TenantInternalService.GetTenantName:output_type -> zenoss.cloud.GetTenantNameResponse
	47, // 118: zenoss.cloud.TenantInternalService.GetTenantDataId:output_type -> zenoss.cloud.GetTenantDataIdResponse
	49, // 119: zenoss.cloud.TenantInternalService.GetTenantIds:output_type -> zenoss.cloud.GetTenantIdsResponse
	51, // 120: zenoss.cloud.TenantInternalService.GetTenantNames:output_type -> zenoss.cloud.GetTenantNamesResponse
	53, // 121: zenoss.cloud.TenantInternalService.GetTenantDataIds:output_type -> zenoss.cloud.GetTenantDataIdsResponse
	23, // 122: zenoss.cloud.TenantInternalService.ListTenants:output_type -> zenoss.cloud.ListTenantsResponse
	25, // 123: zenoss.cloud.TenantInternalService.GetAllTenants:output_type -> zenoss.cloud.GetAllTenantsResponse
	32, // 124: zenoss.cloud.TenantInternalService.GetAuthInfo:output_type -> zenoss.cloud.GetAuthResponse
	78, // [78:125] is the sub-list for method output_type
	31, // [31:78] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_tenant_proto_init() }
func file_zenoss_zing_proto_cloud_tenant_proto_init() {
	if File_zenoss_zing_proto_cloud_tenant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginMessageProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLandingPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandingPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantThemeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantThemeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantSettingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionZonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionZonesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCollectionZonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSessionSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CZ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CZRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTenantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTenantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTenantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTenantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantEverywhereResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantEverywhereStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantDataIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantDataIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantNamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantDataIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantDataIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTenantNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTenantNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTenantNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCollectionZonesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectionZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectionZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdminSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAdminSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCollectionZonesRequest_CZ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*TenantInfo_TenantId)(nil),
		(*TenantInfo_TenantName)(nil),
		(*TenantInfo_TenantDataId)(nil),
		(*TenantInfo_TenantReference)(nil),
	}
	file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*ChangeTenantNameRequest_TenantId)(nil),
		(*ChangeTenantNameRequest_CurrentName)(nil),
	}
	file_zenoss_zing_proto_cloud_tenant_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*DeleteTenantNameRequest_TenantId)(nil),
		(*DeleteTenantNameRequest_CurrentName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_tenant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_tenant_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_tenant_proto_depIdxs,
		MessageInfos:      file_zenoss_zing_proto_cloud_tenant_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_tenant_proto = out.File
	file_zenoss_zing_proto_cloud_tenant_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_tenant_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_tenant_proto_depIdxs = nil
}
