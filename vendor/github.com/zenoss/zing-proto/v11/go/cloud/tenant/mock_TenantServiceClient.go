// Code generated by mockery v1.0.0. DO NOT EDIT.

package tenant

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantServiceClient is an autogenerated mock type for the TenantServiceClient type
type MockTenantServiceClient struct {
	mock.Mock
}

// ChangeTenantName provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) ChangeTenantName(ctx context.Context, in *ChangeTenantNameRequest, opts ...grpc.CallOption) (*ChangeTenantNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ChangeTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ChangeTenantNameRequest, ...grpc.CallOption) *ChangeTenantNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChangeTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ChangeTenantNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) CreateAuthInfo(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateAuthRequest, ...grpc.CallOption) *CreateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTenant provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateTenantRequest, ...grpc.CallOption) *CreateTenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) DeleteAuthInfo(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteAuthRequest, ...grpc.CallOption) *DeleteAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenantName provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) DeleteTenantName(ctx context.Context, in *DeleteTenantNameRequest, opts ...grpc.CallOption) (*DeleteTenantNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantNameRequest, ...grpc.CallOption) *DeleteTenantNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetAuthInfo(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption) (*GetAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetAuthRequest, ...grpc.CallOption) *GetAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionZones provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetCollectionZones(ctx context.Context, in *GetCollectionZonesRequest, opts ...grpc.CallOption) (*GetCollectionZonesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetCollectionZonesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetCollectionZonesRequest, ...grpc.CallOption) *GetCollectionZonesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetCollectionZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetCollectionZonesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLandingPage provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetLandingPage(ctx context.Context, in *GetLandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LandingPageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetLandingPageRequest, ...grpc.CallOption) *LandingPageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LandingPageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetLandingPageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoginMessage provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetLoginMessage(ctx context.Context, in *GetLoginMessageRequest, opts ...grpc.CallOption) (*LoginMessageProto, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LoginMessageProto
	if rf, ok := ret.Get(0).(func(context.Context, *GetLoginMessageRequest, ...grpc.CallOption) *LoginMessageProto); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginMessageProto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetLoginMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetLogo(ctx context.Context, in *GetLogoRequest, opts ...grpc.CallOption) (*LogoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LogoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetLogoRequest, ...grpc.CallOption) *LogoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LogoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetLogoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionSettings provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetSessionSettings(ctx context.Context, in *GetSessionSettingsRequest, opts ...grpc.CallOption) (*GetSessionSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetSessionSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetSessionSettingsRequest, ...grpc.CallOption) *GetSessionSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetSessionSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetSessionSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantDataId provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantDataId(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption) (*GetTenantDataIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantDataIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdRequest, ...grpc.CallOption) *GetTenantDataIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantDataIds provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantDataIds(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption) (*GetTenantDataIdsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantDataIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdsRequest, ...grpc.CallOption) *GetTenantDataIdsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantId provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantId(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption) (*GetTenantIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdRequest, ...grpc.CallOption) *GetTenantIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantIds provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantIds(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption) (*GetTenantIdsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdsRequest, ...grpc.CallOption) *GetTenantIdsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantName provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantName(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption) (*GetTenantNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNameRequest, ...grpc.CallOption) *GetTenantNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantNames provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantNames(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption) (*GetTenantNamesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantNamesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNamesRequest, ...grpc.CallOption) *GetTenantNamesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNamesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNamesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantTheme provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) GetTenantTheme(ctx context.Context, in *GetTenantThemeRequest, opts ...grpc.CallOption) (*TenantThemeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TenantThemeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantThemeRequest, ...grpc.CallOption) *TenantThemeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantThemeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantThemeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) LoadAuthInfo(ctx context.Context, in *LoadAuthRequest, opts ...grpc.CallOption) (*LoadAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LoadAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LoadAuthRequest, ...grpc.CallOption) *LoadAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoadAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LoadAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) UpdateAuthInfo(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption) (*UpdateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *UpdateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateAuthRequest, ...grpc.CallOption) *UpdateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLandingPage provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) UpdateLandingPage(ctx context.Context, in *LandingPageResponse, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LandingPageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LandingPageResponse, ...grpc.CallOption) *LandingPageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LandingPageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LandingPageResponse, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoginMessage provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) UpdateLoginMessage(ctx context.Context, in *LoginMessageProto, opts ...grpc.CallOption) (*LoginMessageProto, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LoginMessageProto
	if rf, ok := ret.Get(0).(func(context.Context, *LoginMessageProto, ...grpc.CallOption) *LoginMessageProto); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginMessageProto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LoginMessageProto, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLogo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) UpdateLogo(ctx context.Context, in *LogoResponse, opts ...grpc.CallOption) (*LogoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LogoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LogoResponse, ...grpc.CallOption) *LogoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LogoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LogoResponse, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSessionSettings provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) UpdateSessionSettings(ctx context.Context, in *UpdateSessionSettingsRequest, opts ...grpc.CallOption) (*UpdateSessionSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *UpdateSessionSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateSessionSettingsRequest, ...grpc.CallOption) *UpdateSessionSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateSessionSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateSessionSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTenantTheme provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantServiceClient) UpdateTenantTheme(ctx context.Context, in *TenantThemeResponse, opts ...grpc.CallOption) (*TenantThemeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *TenantThemeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *TenantThemeResponse, ...grpc.CallOption) *TenantThemeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TenantThemeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *TenantThemeResponse, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
