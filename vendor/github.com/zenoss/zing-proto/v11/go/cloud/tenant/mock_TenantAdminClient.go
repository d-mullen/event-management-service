// Code generated by mockery v2.13.1. DO NOT EDIT.

package tenant

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantAdminClient is an autogenerated mock type for the TenantAdminClient type
type MockTenantAdminClient struct {
	mock.Mock
}

type MockTenantAdminClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantAdminClient) EXPECT() *MockTenantAdminClient_Expecter {
	return &MockTenantAdminClient_Expecter{mock: &_m.Mock}
}

// ChangeTenantName provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) ChangeTenantName(ctx context.Context, in *ChangeTenantNameRequest, opts ...grpc.CallOption) (*ChangeTenantNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ChangeTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ChangeTenantNameRequest, ...grpc.CallOption) *ChangeTenantNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChangeTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ChangeTenantNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_ChangeTenantName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeTenantName'
type MockTenantAdminClient_ChangeTenantName_Call struct {
	*mock.Call
}

// ChangeTenantName is a helper method to define mock.On call
//  - ctx context.Context
//  - in *ChangeTenantNameRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) ChangeTenantName(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_ChangeTenantName_Call {
	return &MockTenantAdminClient_ChangeTenantName_Call{Call: _e.mock.On("ChangeTenantName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_ChangeTenantName_Call) Run(run func(ctx context.Context, in *ChangeTenantNameRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_ChangeTenantName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ChangeTenantNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_ChangeTenantName_Call) Return(_a0 *ChangeTenantNameResponse, _a1 error) *MockTenantAdminClient_ChangeTenantName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) CreateAuthInfo(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateAuthRequest, ...grpc.CallOption) *CreateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_CreateAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthInfo'
type MockTenantAdminClient_CreateAuthInfo_Call struct {
	*mock.Call
}

// CreateAuthInfo is a helper method to define mock.On call
//  - ctx context.Context
//  - in *CreateAuthRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) CreateAuthInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_CreateAuthInfo_Call {
	return &MockTenantAdminClient_CreateAuthInfo_Call{Call: _e.mock.On("CreateAuthInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_CreateAuthInfo_Call) Run(run func(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_CreateAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_CreateAuthInfo_Call) Return(_a0 *CreateAuthResponse, _a1 error) *MockTenantAdminClient_CreateAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTenant provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *CreateTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateTenantRequest, ...grpc.CallOption) *CreateTenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_CreateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenant'
type MockTenantAdminClient_CreateTenant_Call struct {
	*mock.Call
}

// CreateTenant is a helper method to define mock.On call
//  - ctx context.Context
//  - in *CreateTenantRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) CreateTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_CreateTenant_Call {
	return &MockTenantAdminClient_CreateTenant_Call{Call: _e.mock.On("CreateTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_CreateTenant_Call) Run(run func(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_CreateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateTenantRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_CreateTenant_Call) Return(_a0 *CreateTenantResponse, _a1 error) *MockTenantAdminClient_CreateTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) DeleteAuthInfo(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteAuthRequest, ...grpc.CallOption) *DeleteAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_DeleteAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthInfo'
type MockTenantAdminClient_DeleteAuthInfo_Call struct {
	*mock.Call
}

// DeleteAuthInfo is a helper method to define mock.On call
//  - ctx context.Context
//  - in *DeleteAuthRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) DeleteAuthInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_DeleteAuthInfo_Call {
	return &MockTenantAdminClient_DeleteAuthInfo_Call{Call: _e.mock.On("DeleteAuthInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_DeleteAuthInfo_Call) Run(run func(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_DeleteAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*DeleteAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_DeleteAuthInfo_Call) Return(_a0 *DeleteAuthResponse, _a1 error) *MockTenantAdminClient_DeleteAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteCollectionZone provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) DeleteCollectionZone(ctx context.Context, in *DeleteCollectionZoneRequest, opts ...grpc.CallOption) (*DeleteCollectionZoneResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteCollectionZoneResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteCollectionZoneRequest, ...grpc.CallOption) *DeleteCollectionZoneResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteCollectionZoneResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteCollectionZoneRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_DeleteCollectionZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollectionZone'
type MockTenantAdminClient_DeleteCollectionZone_Call struct {
	*mock.Call
}

// DeleteCollectionZone is a helper method to define mock.On call
//  - ctx context.Context
//  - in *DeleteCollectionZoneRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) DeleteCollectionZone(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_DeleteCollectionZone_Call {
	return &MockTenantAdminClient_DeleteCollectionZone_Call{Call: _e.mock.On("DeleteCollectionZone",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_DeleteCollectionZone_Call) Run(run func(ctx context.Context, in *DeleteCollectionZoneRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_DeleteCollectionZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*DeleteCollectionZoneRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_DeleteCollectionZone_Call) Return(_a0 *DeleteCollectionZoneResponse, _a1 error) *MockTenantAdminClient_DeleteCollectionZone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTenant provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantRequest, ...grpc.CallOption) *DeleteTenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_DeleteTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenant'
type MockTenantAdminClient_DeleteTenant_Call struct {
	*mock.Call
}

// DeleteTenant is a helper method to define mock.On call
//  - ctx context.Context
//  - in *DeleteTenantRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) DeleteTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_DeleteTenant_Call {
	return &MockTenantAdminClient_DeleteTenant_Call{Call: _e.mock.On("DeleteTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_DeleteTenant_Call) Run(run func(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_DeleteTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*DeleteTenantRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_DeleteTenant_Call) Return(_a0 *DeleteTenantResponse, _a1 error) *MockTenantAdminClient_DeleteTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTenantEverywhere provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) DeleteTenantEverywhere(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantEverywhereResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteTenantEverywhereResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantRequest, ...grpc.CallOption) *DeleteTenantEverywhereResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantEverywhereResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_DeleteTenantEverywhere_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenantEverywhere'
type MockTenantAdminClient_DeleteTenantEverywhere_Call struct {
	*mock.Call
}

// DeleteTenantEverywhere is a helper method to define mock.On call
//  - ctx context.Context
//  - in *DeleteTenantRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) DeleteTenantEverywhere(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_DeleteTenantEverywhere_Call {
	return &MockTenantAdminClient_DeleteTenantEverywhere_Call{Call: _e.mock.On("DeleteTenantEverywhere",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_DeleteTenantEverywhere_Call) Run(run func(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_DeleteTenantEverywhere_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*DeleteTenantRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_DeleteTenantEverywhere_Call) Return(_a0 *DeleteTenantEverywhereResponse, _a1 error) *MockTenantAdminClient_DeleteTenantEverywhere_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTenantName provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) DeleteTenantName(ctx context.Context, in *DeleteTenantNameRequest, opts ...grpc.CallOption) (*DeleteTenantNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *DeleteTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantNameRequest, ...grpc.CallOption) *DeleteTenantNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_DeleteTenantName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenantName'
type MockTenantAdminClient_DeleteTenantName_Call struct {
	*mock.Call
}

// DeleteTenantName is a helper method to define mock.On call
//  - ctx context.Context
//  - in *DeleteTenantNameRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) DeleteTenantName(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_DeleteTenantName_Call {
	return &MockTenantAdminClient_DeleteTenantName_Call{Call: _e.mock.On("DeleteTenantName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_DeleteTenantName_Call) Run(run func(ctx context.Context, in *DeleteTenantNameRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_DeleteTenantName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*DeleteTenantNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_DeleteTenantName_Call) Return(_a0 *DeleteTenantNameResponse, _a1 error) *MockTenantAdminClient_DeleteTenantName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetAuthInfo(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption) (*GetAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetAuthRequest, ...grpc.CallOption) *GetAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthInfo'
type MockTenantAdminClient_GetAuthInfo_Call struct {
	*mock.Call
}

// GetAuthInfo is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetAuthRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetAuthInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetAuthInfo_Call {
	return &MockTenantAdminClient_GetAuthInfo_Call{Call: _e.mock.On("GetAuthInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetAuthInfo_Call) Run(run func(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetAuthInfo_Call) Return(_a0 *GetAuthResponse, _a1 error) *MockTenantAdminClient_GetAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenant provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantRequest, ...grpc.CallOption) *GetTenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type MockTenantAdminClient_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenant_Call {
	return &MockTenantAdminClient_GetTenant_Call{Call: _e.mock.On("GetTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenant_Call) Run(run func(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenant_Call) Return(_a0 *GetTenantResponse, _a1 error) *MockTenantAdminClient_GetTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantDataId provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenantDataId(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption) (*GetTenantDataIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantDataIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdRequest, ...grpc.CallOption) *GetTenantDataIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenantDataId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantDataId'
type MockTenantAdminClient_GetTenantDataId_Call struct {
	*mock.Call
}

// GetTenantDataId is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantDataIdRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenantDataId(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenantDataId_Call {
	return &MockTenantAdminClient_GetTenantDataId_Call{Call: _e.mock.On("GetTenantDataId",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenantDataId_Call) Run(run func(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenantDataId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantDataIdRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenantDataId_Call) Return(_a0 *GetTenantDataIdResponse, _a1 error) *MockTenantAdminClient_GetTenantDataId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantDataIds provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenantDataIds(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption) (*GetTenantDataIdsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantDataIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdsRequest, ...grpc.CallOption) *GetTenantDataIdsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenantDataIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantDataIds'
type MockTenantAdminClient_GetTenantDataIds_Call struct {
	*mock.Call
}

// GetTenantDataIds is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantDataIdsRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenantDataIds(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenantDataIds_Call {
	return &MockTenantAdminClient_GetTenantDataIds_Call{Call: _e.mock.On("GetTenantDataIds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenantDataIds_Call) Run(run func(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenantDataIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantDataIdsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenantDataIds_Call) Return(_a0 *GetTenantDataIdsResponse, _a1 error) *MockTenantAdminClient_GetTenantDataIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantId provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenantId(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption) (*GetTenantIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdRequest, ...grpc.CallOption) *GetTenantIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenantId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantId'
type MockTenantAdminClient_GetTenantId_Call struct {
	*mock.Call
}

// GetTenantId is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantIdRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenantId(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenantId_Call {
	return &MockTenantAdminClient_GetTenantId_Call{Call: _e.mock.On("GetTenantId",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenantId_Call) Run(run func(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenantId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantIdRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenantId_Call) Return(_a0 *GetTenantIdResponse, _a1 error) *MockTenantAdminClient_GetTenantId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantIds provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenantIds(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption) (*GetTenantIdsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdsRequest, ...grpc.CallOption) *GetTenantIdsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenantIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantIds'
type MockTenantAdminClient_GetTenantIds_Call struct {
	*mock.Call
}

// GetTenantIds is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantIdsRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenantIds(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenantIds_Call {
	return &MockTenantAdminClient_GetTenantIds_Call{Call: _e.mock.On("GetTenantIds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenantIds_Call) Run(run func(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenantIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantIdsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenantIds_Call) Return(_a0 *GetTenantIdsResponse, _a1 error) *MockTenantAdminClient_GetTenantIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantName provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenantName(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption) (*GetTenantNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNameRequest, ...grpc.CallOption) *GetTenantNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenantName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantName'
type MockTenantAdminClient_GetTenantName_Call struct {
	*mock.Call
}

// GetTenantName is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantNameRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenantName(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenantName_Call {
	return &MockTenantAdminClient_GetTenantName_Call{Call: _e.mock.On("GetTenantName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenantName_Call) Run(run func(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenantName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenantName_Call) Return(_a0 *GetTenantNameResponse, _a1 error) *MockTenantAdminClient_GetTenantName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantNames provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) GetTenantNames(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption) (*GetTenantNamesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *GetTenantNamesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNamesRequest, ...grpc.CallOption) *GetTenantNamesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNamesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNamesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_GetTenantNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantNames'
type MockTenantAdminClient_GetTenantNames_Call struct {
	*mock.Call
}

// GetTenantNames is a helper method to define mock.On call
//  - ctx context.Context
//  - in *GetTenantNamesRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) GetTenantNames(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_GetTenantNames_Call {
	return &MockTenantAdminClient_GetTenantNames_Call{Call: _e.mock.On("GetTenantNames",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_GetTenantNames_Call) Run(run func(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_GetTenantNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetTenantNamesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_GetTenantNames_Call) Return(_a0 *GetTenantNamesResponse, _a1 error) *MockTenantAdminClient_GetTenantNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListTenants provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ListTenantsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ListTenantsRequest, ...grpc.CallOption) *ListTenantsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTenantsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ListTenantsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type MockTenantAdminClient_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//  - ctx context.Context
//  - in *ListTenantsRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) ListTenants(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_ListTenants_Call {
	return &MockTenantAdminClient_ListTenants_Call{Call: _e.mock.On("ListTenants",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_ListTenants_Call) Run(run func(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ListTenantsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_ListTenants_Call) Return(_a0 *ListTenantsResponse, _a1 error) *MockTenantAdminClient_ListTenants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LoadAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) LoadAuthInfo(ctx context.Context, in *LoadAuthRequest, opts ...grpc.CallOption) (*LoadAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *LoadAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LoadAuthRequest, ...grpc.CallOption) *LoadAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoadAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LoadAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_LoadAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAuthInfo'
type MockTenantAdminClient_LoadAuthInfo_Call struct {
	*mock.Call
}

// LoadAuthInfo is a helper method to define mock.On call
//  - ctx context.Context
//  - in *LoadAuthRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) LoadAuthInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_LoadAuthInfo_Call {
	return &MockTenantAdminClient_LoadAuthInfo_Call{Call: _e.mock.On("LoadAuthInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_LoadAuthInfo_Call) Run(run func(ctx context.Context, in *LoadAuthRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_LoadAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*LoadAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_LoadAuthInfo_Call) Return(_a0 *LoadAuthResponse, _a1 error) *MockTenantAdminClient_LoadAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterCollectionZones provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) RegisterCollectionZones(ctx context.Context, in *RegisterCollectionZonesRequest, opts ...grpc.CallOption) (*RegisterCollectionZonesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *RegisterCollectionZonesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterCollectionZonesRequest, ...grpc.CallOption) *RegisterCollectionZonesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterCollectionZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterCollectionZonesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_RegisterCollectionZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCollectionZones'
type MockTenantAdminClient_RegisterCollectionZones_Call struct {
	*mock.Call
}

// RegisterCollectionZones is a helper method to define mock.On call
//  - ctx context.Context
//  - in *RegisterCollectionZonesRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) RegisterCollectionZones(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_RegisterCollectionZones_Call {
	return &MockTenantAdminClient_RegisterCollectionZones_Call{Call: _e.mock.On("RegisterCollectionZones",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_RegisterCollectionZones_Call) Run(run func(ctx context.Context, in *RegisterCollectionZonesRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_RegisterCollectionZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*RegisterCollectionZonesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_RegisterCollectionZones_Call) Return(_a0 *RegisterCollectionZonesResponse, _a1 error) *MockTenantAdminClient_RegisterCollectionZones_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetAdminSettings provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) SetAdminSettings(ctx context.Context, in *SetAdminSettingsRequest, opts ...grpc.CallOption) (*SetAdminSettingsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *SetAdminSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SetAdminSettingsRequest, ...grpc.CallOption) *SetAdminSettingsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetAdminSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SetAdminSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_SetAdminSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAdminSettings'
type MockTenantAdminClient_SetAdminSettings_Call struct {
	*mock.Call
}

// SetAdminSettings is a helper method to define mock.On call
//  - ctx context.Context
//  - in *SetAdminSettingsRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) SetAdminSettings(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_SetAdminSettings_Call {
	return &MockTenantAdminClient_SetAdminSettings_Call{Call: _e.mock.On("SetAdminSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_SetAdminSettings_Call) Run(run func(ctx context.Context, in *SetAdminSettingsRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_SetAdminSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SetAdminSettingsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_SetAdminSettings_Call) Return(_a0 *SetAdminSettingsResponse, _a1 error) *MockTenantAdminClient_SetAdminSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAuthInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockTenantAdminClient) UpdateAuthInfo(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption) (*UpdateAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *UpdateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateAuthRequest, ...grpc.CallOption) *UpdateAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminClient_UpdateAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthInfo'
type MockTenantAdminClient_UpdateAuthInfo_Call struct {
	*mock.Call
}

// UpdateAuthInfo is a helper method to define mock.On call
//  - ctx context.Context
//  - in *UpdateAuthRequest
//  - opts ...grpc.CallOption
func (_e *MockTenantAdminClient_Expecter) UpdateAuthInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantAdminClient_UpdateAuthInfo_Call {
	return &MockTenantAdminClient_UpdateAuthInfo_Call{Call: _e.mock.On("UpdateAuthInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantAdminClient_UpdateAuthInfo_Call) Run(run func(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption)) *MockTenantAdminClient_UpdateAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*UpdateAuthRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockTenantAdminClient_UpdateAuthInfo_Call) Return(_a0 *UpdateAuthResponse, _a1 error) *MockTenantAdminClient_UpdateAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockTenantAdminClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTenantAdminClient creates a new instance of MockTenantAdminClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTenantAdminClient(t mockConstructorTestingTNewMockTenantAdminClient) *MockTenantAdminClient {
	mock := &MockTenantAdminClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
