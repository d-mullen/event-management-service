// Code generated by mockery v1.0.0. DO NOT EDIT.

package tenant

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantAdminServer is an autogenerated mock type for the TenantAdminServer type
type MockTenantAdminServer struct {
	mock.Mock
}

// ChangeTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) ChangeTenantName(_a0 context.Context, _a1 *ChangeTenantNameRequest) (*ChangeTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ChangeTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ChangeTenantNameRequest) *ChangeTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChangeTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ChangeTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) CreateTenant(_a0 context.Context, _a1 *CreateTenantRequest) (*CreateTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateTenantRequest) *CreateTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollectionZone provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteCollectionZone(_a0 context.Context, _a1 *DeleteCollectionZoneRequest) (*DeleteCollectionZoneResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteCollectionZoneResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteCollectionZoneRequest) *DeleteCollectionZoneResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteCollectionZoneResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteCollectionZoneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteTenant(_a0 context.Context, _a1 *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantRequest) *DeleteTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenantEverywhere provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteTenantEverywhere(_a0 context.Context, _a1 *DeleteTenantRequest) (*DeleteTenantEverywhereResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantEverywhereResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantRequest) *DeleteTenantEverywhereResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantEverywhereResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteTenantName(_a0 context.Context, _a1 *DeleteTenantNameRequest) (*DeleteTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantNameRequest) *DeleteTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenant(_a0 context.Context, _a1 *GetTenantRequest) (*GetTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantRequest) *GetTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantDataId provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantDataId(_a0 context.Context, _a1 *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantDataIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdRequest) *GetTenantDataIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantDataIds provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantDataIds(_a0 context.Context, _a1 *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantDataIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdsRequest) *GetTenantDataIdsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantId provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantId(_a0 context.Context, _a1 *GetTenantIdRequest) (*GetTenantIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdRequest) *GetTenantIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantIds provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantIds(_a0 context.Context, _a1 *GetTenantIdsRequest) (*GetTenantIdsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdsRequest) *GetTenantIdsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantName(_a0 context.Context, _a1 *GetTenantNameRequest) (*GetTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNameRequest) *GetTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantNames provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantNames(_a0 context.Context, _a1 *GetTenantNamesRequest) (*GetTenantNamesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantNamesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNamesRequest) *GetTenantNamesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNamesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNamesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTenants provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) ListTenants(_a0 context.Context, _a1 *ListTenantsRequest) (*ListTenantsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ListTenantsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ListTenantsRequest) *ListTenantsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTenantsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ListTenantsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCollectionZones provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) RegisterCollectionZones(_a0 context.Context, _a1 *RegisterCollectionZonesRequest) (*RegisterCollectionZonesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterCollectionZonesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterCollectionZonesRequest) *RegisterCollectionZonesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterCollectionZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterCollectionZonesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAdminSettings provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) SetAdminSettings(_a0 context.Context, _a1 *SetAdminSettingsRequest) (*SetAdminSettingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *SetAdminSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SetAdminSettingsRequest) *SetAdminSettingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetAdminSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SetAdminSettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
