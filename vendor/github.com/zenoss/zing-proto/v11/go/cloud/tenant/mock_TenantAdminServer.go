// Code generated by mockery v2.14.0. DO NOT EDIT.

package tenant

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTenantAdminServer is an autogenerated mock type for the TenantAdminServer type
type MockTenantAdminServer struct {
	mock.Mock
}

type MockTenantAdminServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantAdminServer) EXPECT() *MockTenantAdminServer_Expecter {
	return &MockTenantAdminServer_Expecter{mock: &_m.Mock}
}

// ChangeTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) ChangeTenantName(_a0 context.Context, _a1 *ChangeTenantNameRequest) (*ChangeTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ChangeTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ChangeTenantNameRequest) *ChangeTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ChangeTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ChangeTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_ChangeTenantName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeTenantName'
type MockTenantAdminServer_ChangeTenantName_Call struct {
	*mock.Call
}

// ChangeTenantName is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ChangeTenantNameRequest
func (_e *MockTenantAdminServer_Expecter) ChangeTenantName(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_ChangeTenantName_Call {
	return &MockTenantAdminServer_ChangeTenantName_Call{Call: _e.mock.On("ChangeTenantName", _a0, _a1)}
}

func (_c *MockTenantAdminServer_ChangeTenantName_Call) Run(run func(_a0 context.Context, _a1 *ChangeTenantNameRequest)) *MockTenantAdminServer_ChangeTenantName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ChangeTenantNameRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_ChangeTenantName_Call) Return(_a0 *ChangeTenantNameResponse, _a1 error) *MockTenantAdminServer_ChangeTenantName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) CreateAuthInfo(_a0 context.Context, _a1 *CreateAuthRequest) (*CreateAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateAuthRequest) *CreateAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_CreateAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthInfo'
type MockTenantAdminServer_CreateAuthInfo_Call struct {
	*mock.Call
}

// CreateAuthInfo is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *CreateAuthRequest
func (_e *MockTenantAdminServer_Expecter) CreateAuthInfo(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_CreateAuthInfo_Call {
	return &MockTenantAdminServer_CreateAuthInfo_Call{Call: _e.mock.On("CreateAuthInfo", _a0, _a1)}
}

func (_c *MockTenantAdminServer_CreateAuthInfo_Call) Run(run func(_a0 context.Context, _a1 *CreateAuthRequest)) *MockTenantAdminServer_CreateAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateAuthRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_CreateAuthInfo_Call) Return(_a0 *CreateAuthResponse, _a1 error) *MockTenantAdminServer_CreateAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) CreateTenant(_a0 context.Context, _a1 *CreateTenantRequest) (*CreateTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *CreateTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *CreateTenantRequest) *CreateTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *CreateTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_CreateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenant'
type MockTenantAdminServer_CreateTenant_Call struct {
	*mock.Call
}

// CreateTenant is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *CreateTenantRequest
func (_e *MockTenantAdminServer_Expecter) CreateTenant(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_CreateTenant_Call {
	return &MockTenantAdminServer_CreateTenant_Call{Call: _e.mock.On("CreateTenant", _a0, _a1)}
}

func (_c *MockTenantAdminServer_CreateTenant_Call) Run(run func(_a0 context.Context, _a1 *CreateTenantRequest)) *MockTenantAdminServer_CreateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateTenantRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_CreateTenant_Call) Return(_a0 *CreateTenantResponse, _a1 error) *MockTenantAdminServer_CreateTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteAuthInfo(_a0 context.Context, _a1 *DeleteAuthRequest) (*DeleteAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteAuthRequest) *DeleteAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_DeleteAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthInfo'
type MockTenantAdminServer_DeleteAuthInfo_Call struct {
	*mock.Call
}

// DeleteAuthInfo is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *DeleteAuthRequest
func (_e *MockTenantAdminServer_Expecter) DeleteAuthInfo(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_DeleteAuthInfo_Call {
	return &MockTenantAdminServer_DeleteAuthInfo_Call{Call: _e.mock.On("DeleteAuthInfo", _a0, _a1)}
}

func (_c *MockTenantAdminServer_DeleteAuthInfo_Call) Run(run func(_a0 context.Context, _a1 *DeleteAuthRequest)) *MockTenantAdminServer_DeleteAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteAuthRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_DeleteAuthInfo_Call) Return(_a0 *DeleteAuthResponse, _a1 error) *MockTenantAdminServer_DeleteAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteCollectionZone provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteCollectionZone(_a0 context.Context, _a1 *DeleteCollectionZoneRequest) (*DeleteCollectionZoneResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteCollectionZoneResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteCollectionZoneRequest) *DeleteCollectionZoneResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteCollectionZoneResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteCollectionZoneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_DeleteCollectionZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollectionZone'
type MockTenantAdminServer_DeleteCollectionZone_Call struct {
	*mock.Call
}

// DeleteCollectionZone is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *DeleteCollectionZoneRequest
func (_e *MockTenantAdminServer_Expecter) DeleteCollectionZone(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_DeleteCollectionZone_Call {
	return &MockTenantAdminServer_DeleteCollectionZone_Call{Call: _e.mock.On("DeleteCollectionZone", _a0, _a1)}
}

func (_c *MockTenantAdminServer_DeleteCollectionZone_Call) Run(run func(_a0 context.Context, _a1 *DeleteCollectionZoneRequest)) *MockTenantAdminServer_DeleteCollectionZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteCollectionZoneRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_DeleteCollectionZone_Call) Return(_a0 *DeleteCollectionZoneResponse, _a1 error) *MockTenantAdminServer_DeleteCollectionZone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteTenant(_a0 context.Context, _a1 *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantRequest) *DeleteTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_DeleteTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenant'
type MockTenantAdminServer_DeleteTenant_Call struct {
	*mock.Call
}

// DeleteTenant is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *DeleteTenantRequest
func (_e *MockTenantAdminServer_Expecter) DeleteTenant(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_DeleteTenant_Call {
	return &MockTenantAdminServer_DeleteTenant_Call{Call: _e.mock.On("DeleteTenant", _a0, _a1)}
}

func (_c *MockTenantAdminServer_DeleteTenant_Call) Run(run func(_a0 context.Context, _a1 *DeleteTenantRequest)) *MockTenantAdminServer_DeleteTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteTenantRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_DeleteTenant_Call) Return(_a0 *DeleteTenantResponse, _a1 error) *MockTenantAdminServer_DeleteTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTenantEverywhere provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteTenantEverywhere(_a0 context.Context, _a1 *DeleteTenantRequest) (*DeleteTenantEverywhereResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantEverywhereResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantRequest) *DeleteTenantEverywhereResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantEverywhereResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_DeleteTenantEverywhere_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenantEverywhere'
type MockTenantAdminServer_DeleteTenantEverywhere_Call struct {
	*mock.Call
}

// DeleteTenantEverywhere is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *DeleteTenantRequest
func (_e *MockTenantAdminServer_Expecter) DeleteTenantEverywhere(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_DeleteTenantEverywhere_Call {
	return &MockTenantAdminServer_DeleteTenantEverywhere_Call{Call: _e.mock.On("DeleteTenantEverywhere", _a0, _a1)}
}

func (_c *MockTenantAdminServer_DeleteTenantEverywhere_Call) Run(run func(_a0 context.Context, _a1 *DeleteTenantRequest)) *MockTenantAdminServer_DeleteTenantEverywhere_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteTenantRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_DeleteTenantEverywhere_Call) Return(_a0 *DeleteTenantEverywhereResponse, _a1 error) *MockTenantAdminServer_DeleteTenantEverywhere_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) DeleteTenantName(_a0 context.Context, _a1 *DeleteTenantNameRequest) (*DeleteTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *DeleteTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *DeleteTenantNameRequest) *DeleteTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DeleteTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *DeleteTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_DeleteTenantName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenantName'
type MockTenantAdminServer_DeleteTenantName_Call struct {
	*mock.Call
}

// DeleteTenantName is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *DeleteTenantNameRequest
func (_e *MockTenantAdminServer_Expecter) DeleteTenantName(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_DeleteTenantName_Call {
	return &MockTenantAdminServer_DeleteTenantName_Call{Call: _e.mock.On("DeleteTenantName", _a0, _a1)}
}

func (_c *MockTenantAdminServer_DeleteTenantName_Call) Run(run func(_a0 context.Context, _a1 *DeleteTenantNameRequest)) *MockTenantAdminServer_DeleteTenantName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*DeleteTenantNameRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_DeleteTenantName_Call) Return(_a0 *DeleteTenantNameResponse, _a1 error) *MockTenantAdminServer_DeleteTenantName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetAuthInfo(_a0 context.Context, _a1 *GetAuthRequest) (*GetAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetAuthRequest) *GetAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthInfo'
type MockTenantAdminServer_GetAuthInfo_Call struct {
	*mock.Call
}

// GetAuthInfo is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetAuthRequest
func (_e *MockTenantAdminServer_Expecter) GetAuthInfo(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetAuthInfo_Call {
	return &MockTenantAdminServer_GetAuthInfo_Call{Call: _e.mock.On("GetAuthInfo", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetAuthInfo_Call) Run(run func(_a0 context.Context, _a1 *GetAuthRequest)) *MockTenantAdminServer_GetAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetAuthRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetAuthInfo_Call) Return(_a0 *GetAuthResponse, _a1 error) *MockTenantAdminServer_GetAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenant provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenant(_a0 context.Context, _a1 *GetTenantRequest) (*GetTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantRequest) *GetTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type MockTenantAdminServer_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantRequest
func (_e *MockTenantAdminServer_Expecter) GetTenant(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenant_Call {
	return &MockTenantAdminServer_GetTenant_Call{Call: _e.mock.On("GetTenant", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenant_Call) Run(run func(_a0 context.Context, _a1 *GetTenantRequest)) *MockTenantAdminServer_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenant_Call) Return(_a0 *GetTenantResponse, _a1 error) *MockTenantAdminServer_GetTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantDataId provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantDataId(_a0 context.Context, _a1 *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantDataIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdRequest) *GetTenantDataIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenantDataId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantDataId'
type MockTenantAdminServer_GetTenantDataId_Call struct {
	*mock.Call
}

// GetTenantDataId is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantDataIdRequest
func (_e *MockTenantAdminServer_Expecter) GetTenantDataId(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenantDataId_Call {
	return &MockTenantAdminServer_GetTenantDataId_Call{Call: _e.mock.On("GetTenantDataId", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenantDataId_Call) Run(run func(_a0 context.Context, _a1 *GetTenantDataIdRequest)) *MockTenantAdminServer_GetTenantDataId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantDataIdRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenantDataId_Call) Return(_a0 *GetTenantDataIdResponse, _a1 error) *MockTenantAdminServer_GetTenantDataId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantDataIds provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantDataIds(_a0 context.Context, _a1 *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantDataIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantDataIdsRequest) *GetTenantDataIdsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantDataIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantDataIdsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenantDataIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantDataIds'
type MockTenantAdminServer_GetTenantDataIds_Call struct {
	*mock.Call
}

// GetTenantDataIds is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantDataIdsRequest
func (_e *MockTenantAdminServer_Expecter) GetTenantDataIds(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenantDataIds_Call {
	return &MockTenantAdminServer_GetTenantDataIds_Call{Call: _e.mock.On("GetTenantDataIds", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenantDataIds_Call) Run(run func(_a0 context.Context, _a1 *GetTenantDataIdsRequest)) *MockTenantAdminServer_GetTenantDataIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantDataIdsRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenantDataIds_Call) Return(_a0 *GetTenantDataIdsResponse, _a1 error) *MockTenantAdminServer_GetTenantDataIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantId provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantId(_a0 context.Context, _a1 *GetTenantIdRequest) (*GetTenantIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdRequest) *GetTenantIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenantId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantId'
type MockTenantAdminServer_GetTenantId_Call struct {
	*mock.Call
}

// GetTenantId is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantIdRequest
func (_e *MockTenantAdminServer_Expecter) GetTenantId(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenantId_Call {
	return &MockTenantAdminServer_GetTenantId_Call{Call: _e.mock.On("GetTenantId", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenantId_Call) Run(run func(_a0 context.Context, _a1 *GetTenantIdRequest)) *MockTenantAdminServer_GetTenantId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantIdRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenantId_Call) Return(_a0 *GetTenantIdResponse, _a1 error) *MockTenantAdminServer_GetTenantId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantIds provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantIds(_a0 context.Context, _a1 *GetTenantIdsRequest) (*GetTenantIdsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantIdsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantIdsRequest) *GetTenantIdsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantIdsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantIdsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenantIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantIds'
type MockTenantAdminServer_GetTenantIds_Call struct {
	*mock.Call
}

// GetTenantIds is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantIdsRequest
func (_e *MockTenantAdminServer_Expecter) GetTenantIds(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenantIds_Call {
	return &MockTenantAdminServer_GetTenantIds_Call{Call: _e.mock.On("GetTenantIds", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenantIds_Call) Run(run func(_a0 context.Context, _a1 *GetTenantIdsRequest)) *MockTenantAdminServer_GetTenantIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantIdsRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenantIds_Call) Return(_a0 *GetTenantIdsResponse, _a1 error) *MockTenantAdminServer_GetTenantIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantName provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantName(_a0 context.Context, _a1 *GetTenantNameRequest) (*GetTenantNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNameRequest) *GetTenantNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenantName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantName'
type MockTenantAdminServer_GetTenantName_Call struct {
	*mock.Call
}

// GetTenantName is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantNameRequest
func (_e *MockTenantAdminServer_Expecter) GetTenantName(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenantName_Call {
	return &MockTenantAdminServer_GetTenantName_Call{Call: _e.mock.On("GetTenantName", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenantName_Call) Run(run func(_a0 context.Context, _a1 *GetTenantNameRequest)) *MockTenantAdminServer_GetTenantName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantNameRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenantName_Call) Return(_a0 *GetTenantNameResponse, _a1 error) *MockTenantAdminServer_GetTenantName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTenantNames provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) GetTenantNames(_a0 context.Context, _a1 *GetTenantNamesRequest) (*GetTenantNamesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetTenantNamesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *GetTenantNamesRequest) *GetTenantNamesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetTenantNamesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *GetTenantNamesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_GetTenantNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantNames'
type MockTenantAdminServer_GetTenantNames_Call struct {
	*mock.Call
}

// GetTenantNames is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *GetTenantNamesRequest
func (_e *MockTenantAdminServer_Expecter) GetTenantNames(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_GetTenantNames_Call {
	return &MockTenantAdminServer_GetTenantNames_Call{Call: _e.mock.On("GetTenantNames", _a0, _a1)}
}

func (_c *MockTenantAdminServer_GetTenantNames_Call) Run(run func(_a0 context.Context, _a1 *GetTenantNamesRequest)) *MockTenantAdminServer_GetTenantNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetTenantNamesRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_GetTenantNames_Call) Return(_a0 *GetTenantNamesResponse, _a1 error) *MockTenantAdminServer_GetTenantNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListTenants provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) ListTenants(_a0 context.Context, _a1 *ListTenantsRequest) (*ListTenantsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ListTenantsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ListTenantsRequest) *ListTenantsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListTenantsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ListTenantsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type MockTenantAdminServer_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ListTenantsRequest
func (_e *MockTenantAdminServer_Expecter) ListTenants(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_ListTenants_Call {
	return &MockTenantAdminServer_ListTenants_Call{Call: _e.mock.On("ListTenants", _a0, _a1)}
}

func (_c *MockTenantAdminServer_ListTenants_Call) Run(run func(_a0 context.Context, _a1 *ListTenantsRequest)) *MockTenantAdminServer_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ListTenantsRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_ListTenants_Call) Return(_a0 *ListTenantsResponse, _a1 error) *MockTenantAdminServer_ListTenants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// LoadAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) LoadAuthInfo(_a0 context.Context, _a1 *LoadAuthRequest) (*LoadAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *LoadAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *LoadAuthRequest) *LoadAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoadAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *LoadAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_LoadAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAuthInfo'
type MockTenantAdminServer_LoadAuthInfo_Call struct {
	*mock.Call
}

// LoadAuthInfo is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *LoadAuthRequest
func (_e *MockTenantAdminServer_Expecter) LoadAuthInfo(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_LoadAuthInfo_Call {
	return &MockTenantAdminServer_LoadAuthInfo_Call{Call: _e.mock.On("LoadAuthInfo", _a0, _a1)}
}

func (_c *MockTenantAdminServer_LoadAuthInfo_Call) Run(run func(_a0 context.Context, _a1 *LoadAuthRequest)) *MockTenantAdminServer_LoadAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*LoadAuthRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_LoadAuthInfo_Call) Return(_a0 *LoadAuthResponse, _a1 error) *MockTenantAdminServer_LoadAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterCollectionZones provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) RegisterCollectionZones(_a0 context.Context, _a1 *RegisterCollectionZonesRequest) (*RegisterCollectionZonesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *RegisterCollectionZonesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterCollectionZonesRequest) *RegisterCollectionZonesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterCollectionZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *RegisterCollectionZonesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_RegisterCollectionZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCollectionZones'
type MockTenantAdminServer_RegisterCollectionZones_Call struct {
	*mock.Call
}

// RegisterCollectionZones is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *RegisterCollectionZonesRequest
func (_e *MockTenantAdminServer_Expecter) RegisterCollectionZones(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_RegisterCollectionZones_Call {
	return &MockTenantAdminServer_RegisterCollectionZones_Call{Call: _e.mock.On("RegisterCollectionZones", _a0, _a1)}
}

func (_c *MockTenantAdminServer_RegisterCollectionZones_Call) Run(run func(_a0 context.Context, _a1 *RegisterCollectionZonesRequest)) *MockTenantAdminServer_RegisterCollectionZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*RegisterCollectionZonesRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_RegisterCollectionZones_Call) Return(_a0 *RegisterCollectionZonesResponse, _a1 error) *MockTenantAdminServer_RegisterCollectionZones_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetAdminSettings provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) SetAdminSettings(_a0 context.Context, _a1 *SetAdminSettingsRequest) (*SetAdminSettingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *SetAdminSettingsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *SetAdminSettingsRequest) *SetAdminSettingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SetAdminSettingsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *SetAdminSettingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_SetAdminSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAdminSettings'
type MockTenantAdminServer_SetAdminSettings_Call struct {
	*mock.Call
}

// SetAdminSettings is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *SetAdminSettingsRequest
func (_e *MockTenantAdminServer_Expecter) SetAdminSettings(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_SetAdminSettings_Call {
	return &MockTenantAdminServer_SetAdminSettings_Call{Call: _e.mock.On("SetAdminSettings", _a0, _a1)}
}

func (_c *MockTenantAdminServer_SetAdminSettings_Call) Run(run func(_a0 context.Context, _a1 *SetAdminSettingsRequest)) *MockTenantAdminServer_SetAdminSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*SetAdminSettingsRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_SetAdminSettings_Call) Return(_a0 *SetAdminSettingsResponse, _a1 error) *MockTenantAdminServer_SetAdminSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAuthInfo provides a mock function with given fields: _a0, _a1
func (_m *MockTenantAdminServer) UpdateAuthInfo(_a0 context.Context, _a1 *UpdateAuthRequest) (*UpdateAuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *UpdateAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateAuthRequest) *UpdateAuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *UpdateAuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTenantAdminServer_UpdateAuthInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthInfo'
type MockTenantAdminServer_UpdateAuthInfo_Call struct {
	*mock.Call
}

// UpdateAuthInfo is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *UpdateAuthRequest
func (_e *MockTenantAdminServer_Expecter) UpdateAuthInfo(_a0 interface{}, _a1 interface{}) *MockTenantAdminServer_UpdateAuthInfo_Call {
	return &MockTenantAdminServer_UpdateAuthInfo_Call{Call: _e.mock.On("UpdateAuthInfo", _a0, _a1)}
}

func (_c *MockTenantAdminServer_UpdateAuthInfo_Call) Run(run func(_a0 context.Context, _a1 *UpdateAuthRequest)) *MockTenantAdminServer_UpdateAuthInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*UpdateAuthRequest))
	})
	return _c
}

func (_c *MockTenantAdminServer_UpdateAuthInfo_Call) Return(_a0 *UpdateAuthResponse, _a1 error) *MockTenantAdminServer_UpdateAuthInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// mustEmbedUnimplementedTenantAdminServer provides a mock function with given fields:
func (_m *MockTenantAdminServer) mustEmbedUnimplementedTenantAdminServer() {
	_m.Called()
}

// MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTenantAdminServer'
type MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTenantAdminServer is a helper method to define mock.On call
func (_e *MockTenantAdminServer_Expecter) mustEmbedUnimplementedTenantAdminServer() *MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call {
	return &MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTenantAdminServer")}
}

func (_c *MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call) Run(run func()) *MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call) Return() *MockTenantAdminServer_mustEmbedUnimplementedTenantAdminServer_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockTenantAdminServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTenantAdminServer creates a new instance of MockTenantAdminServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTenantAdminServer(t mockConstructorTestingTNewMockTenantAdminServer) *MockTenantAdminServer {
	mock := &MockTenantAdminServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
