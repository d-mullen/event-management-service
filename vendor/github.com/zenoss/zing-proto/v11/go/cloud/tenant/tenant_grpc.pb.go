// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/tenant.proto

package tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantServiceClient is the client API for TenantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantServiceClient interface {
	GetCollectionZones(ctx context.Context, in *GetCollectionZonesRequest, opts ...grpc.CallOption) (*GetCollectionZonesResponse, error)
	GetSessionSettings(ctx context.Context, in *GetSessionSettingsRequest, opts ...grpc.CallOption) (*GetSessionSettingsResponse, error)
	UpdateSessionSettings(ctx context.Context, in *UpdateSessionSettingsRequest, opts ...grpc.CallOption) (*UpdateSessionSettingsResponse, error)
	GetLoginMessage(ctx context.Context, in *GetLoginMessageRequest, opts ...grpc.CallOption) (*LoginMessageProto, error)
	UpdateLoginMessage(ctx context.Context, in *LoginMessageProto, opts ...grpc.CallOption) (*LoginMessageProto, error)
	GetLogo(ctx context.Context, in *GetLogoRequest, opts ...grpc.CallOption) (*LogoResponse, error)
	UpdateLogo(ctx context.Context, in *LogoResponse, opts ...grpc.CallOption) (*LogoResponse, error)
	GetAuthInfo(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption) (*GetAuthResponse, error)
	CreateAuthInfo(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error)
	UpdateAuthInfo(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption) (*UpdateAuthResponse, error)
	DeleteAuthInfo(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthResponse, error)
	GetLandingPage(ctx context.Context, in *GetLandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error)
	UpdateLandingPage(ctx context.Context, in *LandingPageResponse, opts ...grpc.CallOption) (*LandingPageResponse, error)
	GetTenantTheme(ctx context.Context, in *GetTenantThemeRequest, opts ...grpc.CallOption) (*TenantThemeResponse, error)
	UpdateTenantTheme(ctx context.Context, in *TenantThemeResponse, opts ...grpc.CallOption) (*TenantThemeResponse, error)
	LoadAuthInfo(ctx context.Context, in *LoadAuthRequest, opts ...grpc.CallOption) (*LoadAuthResponse, error)
}

type tenantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantServiceClient(cc grpc.ClientConnInterface) TenantServiceClient {
	return &tenantServiceClient{cc}
}

func (c *tenantServiceClient) GetCollectionZones(ctx context.Context, in *GetCollectionZonesRequest, opts ...grpc.CallOption) (*GetCollectionZonesResponse, error) {
	out := new(GetCollectionZonesResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetCollectionZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetSessionSettings(ctx context.Context, in *GetSessionSettingsRequest, opts ...grpc.CallOption) (*GetSessionSettingsResponse, error) {
	out := new(GetSessionSettingsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetSessionSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateSessionSettings(ctx context.Context, in *UpdateSessionSettingsRequest, opts ...grpc.CallOption) (*UpdateSessionSettingsResponse, error) {
	out := new(UpdateSessionSettingsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/UpdateSessionSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetLoginMessage(ctx context.Context, in *GetLoginMessageRequest, opts ...grpc.CallOption) (*LoginMessageProto, error) {
	out := new(LoginMessageProto)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetLoginMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateLoginMessage(ctx context.Context, in *LoginMessageProto, opts ...grpc.CallOption) (*LoginMessageProto, error) {
	out := new(LoginMessageProto)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/UpdateLoginMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetLogo(ctx context.Context, in *GetLogoRequest, opts ...grpc.CallOption) (*LogoResponse, error) {
	out := new(LogoResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateLogo(ctx context.Context, in *LogoResponse, opts ...grpc.CallOption) (*LogoResponse, error) {
	out := new(LogoResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/UpdateLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetAuthInfo(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption) (*GetAuthResponse, error) {
	out := new(GetAuthResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) CreateAuthInfo(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error) {
	out := new(CreateAuthResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/CreateAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateAuthInfo(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption) (*UpdateAuthResponse, error) {
	out := new(UpdateAuthResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/UpdateAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) DeleteAuthInfo(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthResponse, error) {
	out := new(DeleteAuthResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/DeleteAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetLandingPage(ctx context.Context, in *GetLandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	out := new(LandingPageResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetLandingPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateLandingPage(ctx context.Context, in *LandingPageResponse, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	out := new(LandingPageResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/UpdateLandingPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetTenantTheme(ctx context.Context, in *GetTenantThemeRequest, opts ...grpc.CallOption) (*TenantThemeResponse, error) {
	out := new(TenantThemeResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/GetTenantTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateTenantTheme(ctx context.Context, in *TenantThemeResponse, opts ...grpc.CallOption) (*TenantThemeResponse, error) {
	out := new(TenantThemeResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/UpdateTenantTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) LoadAuthInfo(ctx context.Context, in *LoadAuthRequest, opts ...grpc.CallOption) (*LoadAuthResponse, error) {
	out := new(LoadAuthResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantService/LoadAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServiceServer is the server API for TenantService service.
// All implementations must embed UnimplementedTenantServiceServer
// for forward compatibility
type TenantServiceServer interface {
	GetCollectionZones(context.Context, *GetCollectionZonesRequest) (*GetCollectionZonesResponse, error)
	GetSessionSettings(context.Context, *GetSessionSettingsRequest) (*GetSessionSettingsResponse, error)
	UpdateSessionSettings(context.Context, *UpdateSessionSettingsRequest) (*UpdateSessionSettingsResponse, error)
	GetLoginMessage(context.Context, *GetLoginMessageRequest) (*LoginMessageProto, error)
	UpdateLoginMessage(context.Context, *LoginMessageProto) (*LoginMessageProto, error)
	GetLogo(context.Context, *GetLogoRequest) (*LogoResponse, error)
	UpdateLogo(context.Context, *LogoResponse) (*LogoResponse, error)
	GetAuthInfo(context.Context, *GetAuthRequest) (*GetAuthResponse, error)
	CreateAuthInfo(context.Context, *CreateAuthRequest) (*CreateAuthResponse, error)
	UpdateAuthInfo(context.Context, *UpdateAuthRequest) (*UpdateAuthResponse, error)
	DeleteAuthInfo(context.Context, *DeleteAuthRequest) (*DeleteAuthResponse, error)
	GetLandingPage(context.Context, *GetLandingPageRequest) (*LandingPageResponse, error)
	UpdateLandingPage(context.Context, *LandingPageResponse) (*LandingPageResponse, error)
	GetTenantTheme(context.Context, *GetTenantThemeRequest) (*TenantThemeResponse, error)
	UpdateTenantTheme(context.Context, *TenantThemeResponse) (*TenantThemeResponse, error)
	LoadAuthInfo(context.Context, *LoadAuthRequest) (*LoadAuthResponse, error)
	mustEmbedUnimplementedTenantServiceServer()
}

// UnimplementedTenantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantServiceServer struct {
}

func (UnimplementedTenantServiceServer) GetCollectionZones(context.Context, *GetCollectionZonesRequest) (*GetCollectionZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionZones not implemented")
}
func (UnimplementedTenantServiceServer) GetSessionSettings(context.Context, *GetSessionSettingsRequest) (*GetSessionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionSettings not implemented")
}
func (UnimplementedTenantServiceServer) UpdateSessionSettings(context.Context, *UpdateSessionSettingsRequest) (*UpdateSessionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionSettings not implemented")
}
func (UnimplementedTenantServiceServer) GetLoginMessage(context.Context, *GetLoginMessageRequest) (*LoginMessageProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginMessage not implemented")
}
func (UnimplementedTenantServiceServer) UpdateLoginMessage(context.Context, *LoginMessageProto) (*LoginMessageProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginMessage not implemented")
}
func (UnimplementedTenantServiceServer) GetLogo(context.Context, *GetLogoRequest) (*LogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogo not implemented")
}
func (UnimplementedTenantServiceServer) UpdateLogo(context.Context, *LogoResponse) (*LogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogo not implemented")
}
func (UnimplementedTenantServiceServer) GetAuthInfo(context.Context, *GetAuthRequest) (*GetAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthInfo not implemented")
}
func (UnimplementedTenantServiceServer) CreateAuthInfo(context.Context, *CreateAuthRequest) (*CreateAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthInfo not implemented")
}
func (UnimplementedTenantServiceServer) UpdateAuthInfo(context.Context, *UpdateAuthRequest) (*UpdateAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthInfo not implemented")
}
func (UnimplementedTenantServiceServer) DeleteAuthInfo(context.Context, *DeleteAuthRequest) (*DeleteAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthInfo not implemented")
}
func (UnimplementedTenantServiceServer) GetLandingPage(context.Context, *GetLandingPageRequest) (*LandingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandingPage not implemented")
}
func (UnimplementedTenantServiceServer) UpdateLandingPage(context.Context, *LandingPageResponse) (*LandingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLandingPage not implemented")
}
func (UnimplementedTenantServiceServer) GetTenantTheme(context.Context, *GetTenantThemeRequest) (*TenantThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantTheme not implemented")
}
func (UnimplementedTenantServiceServer) UpdateTenantTheme(context.Context, *TenantThemeResponse) (*TenantThemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantTheme not implemented")
}
func (UnimplementedTenantServiceServer) LoadAuthInfo(context.Context, *LoadAuthRequest) (*LoadAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAuthInfo not implemented")
}
func (UnimplementedTenantServiceServer) mustEmbedUnimplementedTenantServiceServer() {}

// UnsafeTenantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServiceServer will
// result in compilation errors.
type UnsafeTenantServiceServer interface {
	mustEmbedUnimplementedTenantServiceServer()
}

func RegisterTenantServiceServer(s grpc.ServiceRegistrar, srv TenantServiceServer) {
	s.RegisterService(&TenantService_ServiceDesc, srv)
}

func _TenantService_GetCollectionZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetCollectionZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetCollectionZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetCollectionZones(ctx, req.(*GetCollectionZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetSessionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetSessionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetSessionSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetSessionSettings(ctx, req.(*GetSessionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateSessionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateSessionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/UpdateSessionSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateSessionSettings(ctx, req.(*UpdateSessionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetLoginMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetLoginMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetLoginMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetLoginMessage(ctx, req.(*GetLoginMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateLoginMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessageProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateLoginMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/UpdateLoginMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateLoginMessage(ctx, req.(*LoginMessageProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetLogo(ctx, req.(*GetLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/UpdateLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateLogo(ctx, req.(*LogoResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetAuthInfo(ctx, req.(*GetAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_CreateAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).CreateAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/CreateAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).CreateAuthInfo(ctx, req.(*CreateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/UpdateAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateAuthInfo(ctx, req.(*UpdateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_DeleteAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).DeleteAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/DeleteAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).DeleteAuthInfo(ctx, req.(*DeleteAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetLandingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetLandingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetLandingPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetLandingPage(ctx, req.(*GetLandingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateLandingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandingPageResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateLandingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/UpdateLandingPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateLandingPage(ctx, req.(*LandingPageResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetTenantTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetTenantTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/GetTenantTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetTenantTheme(ctx, req.(*GetTenantThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateTenantTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantThemeResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateTenantTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/UpdateTenantTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateTenantTheme(ctx, req.(*TenantThemeResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_LoadAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).LoadAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantService/LoadAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).LoadAuthInfo(ctx, req.(*LoadAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantService_ServiceDesc is the grpc.ServiceDesc for TenantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.TenantService",
	HandlerType: (*TenantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectionZones",
			Handler:    _TenantService_GetCollectionZones_Handler,
		},
		{
			MethodName: "GetSessionSettings",
			Handler:    _TenantService_GetSessionSettings_Handler,
		},
		{
			MethodName: "UpdateSessionSettings",
			Handler:    _TenantService_UpdateSessionSettings_Handler,
		},
		{
			MethodName: "GetLoginMessage",
			Handler:    _TenantService_GetLoginMessage_Handler,
		},
		{
			MethodName: "UpdateLoginMessage",
			Handler:    _TenantService_UpdateLoginMessage_Handler,
		},
		{
			MethodName: "GetLogo",
			Handler:    _TenantService_GetLogo_Handler,
		},
		{
			MethodName: "UpdateLogo",
			Handler:    _TenantService_UpdateLogo_Handler,
		},
		{
			MethodName: "GetAuthInfo",
			Handler:    _TenantService_GetAuthInfo_Handler,
		},
		{
			MethodName: "CreateAuthInfo",
			Handler:    _TenantService_CreateAuthInfo_Handler,
		},
		{
			MethodName: "UpdateAuthInfo",
			Handler:    _TenantService_UpdateAuthInfo_Handler,
		},
		{
			MethodName: "DeleteAuthInfo",
			Handler:    _TenantService_DeleteAuthInfo_Handler,
		},
		{
			MethodName: "GetLandingPage",
			Handler:    _TenantService_GetLandingPage_Handler,
		},
		{
			MethodName: "UpdateLandingPage",
			Handler:    _TenantService_UpdateLandingPage_Handler,
		},
		{
			MethodName: "GetTenantTheme",
			Handler:    _TenantService_GetTenantTheme_Handler,
		},
		{
			MethodName: "UpdateTenantTheme",
			Handler:    _TenantService_UpdateTenantTheme_Handler,
		},
		{
			MethodName: "LoadAuthInfo",
			Handler:    _TenantService_LoadAuthInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/tenant.proto",
}

// TenantAdminClient is the client API for TenantAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantAdminClient interface {
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error)
	DeleteTenantEverywhere(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantEverywhereResponse, error)
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	GetTenantId(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption) (*GetTenantIdResponse, error)
	GetTenantName(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption) (*GetTenantNameResponse, error)
	GetTenantDataId(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption) (*GetTenantDataIdResponse, error)
	GetTenantIds(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption) (*GetTenantIdsResponse, error)
	GetTenantNames(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption) (*GetTenantNamesResponse, error)
	GetTenantDataIds(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption) (*GetTenantDataIdsResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	ChangeTenantName(ctx context.Context, in *ChangeTenantNameRequest, opts ...grpc.CallOption) (*ChangeTenantNameResponse, error)
	DeleteTenantName(ctx context.Context, in *DeleteTenantNameRequest, opts ...grpc.CallOption) (*DeleteTenantNameResponse, error)
	RegisterCollectionZones(ctx context.Context, in *RegisterCollectionZonesRequest, opts ...grpc.CallOption) (*RegisterCollectionZonesResponse, error)
	DeleteCollectionZone(ctx context.Context, in *DeleteCollectionZoneRequest, opts ...grpc.CallOption) (*DeleteCollectionZoneResponse, error)
	SetAdminSettings(ctx context.Context, in *SetAdminSettingsRequest, opts ...grpc.CallOption) (*SetAdminSettingsResponse, error)
}

type tenantAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantAdminClient(cc grpc.ClientConnInterface) TenantAdminClient {
	return &tenantAdminClient{cc}
}

func (c *tenantAdminClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error) {
	out := new(DeleteTenantResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) DeleteTenantEverywhere(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantEverywhereResponse, error) {
	out := new(DeleteTenantEverywhereResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/DeleteTenantEverywhere", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenantId(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption) (*GetTenantIdResponse, error) {
	out := new(GetTenantIdResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenantId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenantName(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption) (*GetTenantNameResponse, error) {
	out := new(GetTenantNameResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenantName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenantDataId(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption) (*GetTenantDataIdResponse, error) {
	out := new(GetTenantDataIdResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenantDataId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenantIds(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption) (*GetTenantIdsResponse, error) {
	out := new(GetTenantIdsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenantIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenantNames(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption) (*GetTenantNamesResponse, error) {
	out := new(GetTenantNamesResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenantNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) GetTenantDataIds(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption) (*GetTenantDataIdsResponse, error) {
	out := new(GetTenantDataIdsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/GetTenantDataIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) ChangeTenantName(ctx context.Context, in *ChangeTenantNameRequest, opts ...grpc.CallOption) (*ChangeTenantNameResponse, error) {
	out := new(ChangeTenantNameResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/ChangeTenantName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) DeleteTenantName(ctx context.Context, in *DeleteTenantNameRequest, opts ...grpc.CallOption) (*DeleteTenantNameResponse, error) {
	out := new(DeleteTenantNameResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/DeleteTenantName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) RegisterCollectionZones(ctx context.Context, in *RegisterCollectionZonesRequest, opts ...grpc.CallOption) (*RegisterCollectionZonesResponse, error) {
	out := new(RegisterCollectionZonesResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/RegisterCollectionZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) DeleteCollectionZone(ctx context.Context, in *DeleteCollectionZoneRequest, opts ...grpc.CallOption) (*DeleteCollectionZoneResponse, error) {
	out := new(DeleteCollectionZoneResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/DeleteCollectionZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminClient) SetAdminSettings(ctx context.Context, in *SetAdminSettingsRequest, opts ...grpc.CallOption) (*SetAdminSettingsResponse, error) {
	out := new(SetAdminSettingsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantAdmin/SetAdminSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantAdminServer is the server API for TenantAdmin service.
// All implementations must embed UnimplementedTenantAdminServer
// for forward compatibility
type TenantAdminServer interface {
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error)
	DeleteTenantEverywhere(context.Context, *DeleteTenantRequest) (*DeleteTenantEverywhereResponse, error)
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
	GetTenantId(context.Context, *GetTenantIdRequest) (*GetTenantIdResponse, error)
	GetTenantName(context.Context, *GetTenantNameRequest) (*GetTenantNameResponse, error)
	GetTenantDataId(context.Context, *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error)
	GetTenantIds(context.Context, *GetTenantIdsRequest) (*GetTenantIdsResponse, error)
	GetTenantNames(context.Context, *GetTenantNamesRequest) (*GetTenantNamesResponse, error)
	GetTenantDataIds(context.Context, *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	ChangeTenantName(context.Context, *ChangeTenantNameRequest) (*ChangeTenantNameResponse, error)
	DeleteTenantName(context.Context, *DeleteTenantNameRequest) (*DeleteTenantNameResponse, error)
	RegisterCollectionZones(context.Context, *RegisterCollectionZonesRequest) (*RegisterCollectionZonesResponse, error)
	DeleteCollectionZone(context.Context, *DeleteCollectionZoneRequest) (*DeleteCollectionZoneResponse, error)
	SetAdminSettings(context.Context, *SetAdminSettingsRequest) (*SetAdminSettingsResponse, error)
	mustEmbedUnimplementedTenantAdminServer()
}

// UnimplementedTenantAdminServer must be embedded to have forward compatible implementations.
type UnimplementedTenantAdminServer struct {
}

func (UnimplementedTenantAdminServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedTenantAdminServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedTenantAdminServer) DeleteTenantEverywhere(context.Context, *DeleteTenantRequest) (*DeleteTenantEverywhereResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantEverywhere not implemented")
}
func (UnimplementedTenantAdminServer) GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedTenantAdminServer) GetTenantId(context.Context, *GetTenantIdRequest) (*GetTenantIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantId not implemented")
}
func (UnimplementedTenantAdminServer) GetTenantName(context.Context, *GetTenantNameRequest) (*GetTenantNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantName not implemented")
}
func (UnimplementedTenantAdminServer) GetTenantDataId(context.Context, *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDataId not implemented")
}
func (UnimplementedTenantAdminServer) GetTenantIds(context.Context, *GetTenantIdsRequest) (*GetTenantIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantIds not implemented")
}
func (UnimplementedTenantAdminServer) GetTenantNames(context.Context, *GetTenantNamesRequest) (*GetTenantNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantNames not implemented")
}
func (UnimplementedTenantAdminServer) GetTenantDataIds(context.Context, *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDataIds not implemented")
}
func (UnimplementedTenantAdminServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedTenantAdminServer) ChangeTenantName(context.Context, *ChangeTenantNameRequest) (*ChangeTenantNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTenantName not implemented")
}
func (UnimplementedTenantAdminServer) DeleteTenantName(context.Context, *DeleteTenantNameRequest) (*DeleteTenantNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantName not implemented")
}
func (UnimplementedTenantAdminServer) RegisterCollectionZones(context.Context, *RegisterCollectionZonesRequest) (*RegisterCollectionZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCollectionZones not implemented")
}
func (UnimplementedTenantAdminServer) DeleteCollectionZone(context.Context, *DeleteCollectionZoneRequest) (*DeleteCollectionZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionZone not implemented")
}
func (UnimplementedTenantAdminServer) SetAdminSettings(context.Context, *SetAdminSettingsRequest) (*SetAdminSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdminSettings not implemented")
}
func (UnimplementedTenantAdminServer) mustEmbedUnimplementedTenantAdminServer() {}

// UnsafeTenantAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantAdminServer will
// result in compilation errors.
type UnsafeTenantAdminServer interface {
	mustEmbedUnimplementedTenantAdminServer()
}

func RegisterTenantAdminServer(s grpc.ServiceRegistrar, srv TenantAdminServer) {
	s.RegisterService(&TenantAdmin_ServiceDesc, srv)
}

func _TenantAdmin_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_DeleteTenantEverywhere_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).DeleteTenantEverywhere(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/DeleteTenantEverywhere",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).DeleteTenantEverywhere(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenantId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenantId(ctx, req.(*GetTenantIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenantName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenantName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenantName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenantName(ctx, req.(*GetTenantNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenantDataId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantDataIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenantDataId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenantDataId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenantDataId(ctx, req.(*GetTenantDataIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenantIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenantIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenantIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenantIds(ctx, req.(*GetTenantIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenantNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenantNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenantNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenantNames(ctx, req.(*GetTenantNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_GetTenantDataIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantDataIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).GetTenantDataIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/GetTenantDataIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).GetTenantDataIds(ctx, req.(*GetTenantDataIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_ChangeTenantName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTenantNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).ChangeTenantName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/ChangeTenantName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).ChangeTenantName(ctx, req.(*ChangeTenantNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_DeleteTenantName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).DeleteTenantName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/DeleteTenantName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).DeleteTenantName(ctx, req.(*DeleteTenantNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_RegisterCollectionZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCollectionZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).RegisterCollectionZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/RegisterCollectionZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).RegisterCollectionZones(ctx, req.(*RegisterCollectionZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_DeleteCollectionZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).DeleteCollectionZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/DeleteCollectionZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).DeleteCollectionZone(ctx, req.(*DeleteCollectionZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdmin_SetAdminSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdminSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServer).SetAdminSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantAdmin/SetAdminSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServer).SetAdminSettings(ctx, req.(*SetAdminSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantAdmin_ServiceDesc is the grpc.ServiceDesc for TenantAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.TenantAdmin",
	HandlerType: (*TenantAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTenants",
			Handler:    _TenantAdmin_ListTenants_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _TenantAdmin_DeleteTenant_Handler,
		},
		{
			MethodName: "DeleteTenantEverywhere",
			Handler:    _TenantAdmin_DeleteTenantEverywhere_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _TenantAdmin_GetTenant_Handler,
		},
		{
			MethodName: "GetTenantId",
			Handler:    _TenantAdmin_GetTenantId_Handler,
		},
		{
			MethodName: "GetTenantName",
			Handler:    _TenantAdmin_GetTenantName_Handler,
		},
		{
			MethodName: "GetTenantDataId",
			Handler:    _TenantAdmin_GetTenantDataId_Handler,
		},
		{
			MethodName: "GetTenantIds",
			Handler:    _TenantAdmin_GetTenantIds_Handler,
		},
		{
			MethodName: "GetTenantNames",
			Handler:    _TenantAdmin_GetTenantNames_Handler,
		},
		{
			MethodName: "GetTenantDataIds",
			Handler:    _TenantAdmin_GetTenantDataIds_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _TenantAdmin_CreateTenant_Handler,
		},
		{
			MethodName: "ChangeTenantName",
			Handler:    _TenantAdmin_ChangeTenantName_Handler,
		},
		{
			MethodName: "DeleteTenantName",
			Handler:    _TenantAdmin_DeleteTenantName_Handler,
		},
		{
			MethodName: "RegisterCollectionZones",
			Handler:    _TenantAdmin_RegisterCollectionZones_Handler,
		},
		{
			MethodName: "DeleteCollectionZone",
			Handler:    _TenantAdmin_DeleteCollectionZone_Handler,
		},
		{
			MethodName: "SetAdminSettings",
			Handler:    _TenantAdmin_SetAdminSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/tenant.proto",
}

// TenantInternalServiceClient is the client API for TenantInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantInternalServiceClient interface {
	GetTenantId(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption) (*GetTenantIdResponse, error)
	GetTenantName(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption) (*GetTenantNameResponse, error)
	GetTenantDataId(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption) (*GetTenantDataIdResponse, error)
	GetTenantIds(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption) (*GetTenantIdsResponse, error)
	GetTenantNames(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption) (*GetTenantNamesResponse, error)
	GetTenantDataIds(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption) (*GetTenantDataIdsResponse, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	GetAllTenants(ctx context.Context, in *GetAllTenantsRequest, opts ...grpc.CallOption) (*GetAllTenantsResponse, error)
}

type tenantInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantInternalServiceClient(cc grpc.ClientConnInterface) TenantInternalServiceClient {
	return &tenantInternalServiceClient{cc}
}

func (c *tenantInternalServiceClient) GetTenantId(ctx context.Context, in *GetTenantIdRequest, opts ...grpc.CallOption) (*GetTenantIdResponse, error) {
	out := new(GetTenantIdResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetTenantId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) GetTenantName(ctx context.Context, in *GetTenantNameRequest, opts ...grpc.CallOption) (*GetTenantNameResponse, error) {
	out := new(GetTenantNameResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetTenantName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) GetTenantDataId(ctx context.Context, in *GetTenantDataIdRequest, opts ...grpc.CallOption) (*GetTenantDataIdResponse, error) {
	out := new(GetTenantDataIdResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetTenantDataId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) GetTenantIds(ctx context.Context, in *GetTenantIdsRequest, opts ...grpc.CallOption) (*GetTenantIdsResponse, error) {
	out := new(GetTenantIdsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetTenantIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) GetTenantNames(ctx context.Context, in *GetTenantNamesRequest, opts ...grpc.CallOption) (*GetTenantNamesResponse, error) {
	out := new(GetTenantNamesResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetTenantNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) GetTenantDataIds(ctx context.Context, in *GetTenantDataIdsRequest, opts ...grpc.CallOption) (*GetTenantDataIdsResponse, error) {
	out := new(GetTenantDataIdsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetTenantDataIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantInternalServiceClient) GetAllTenants(ctx context.Context, in *GetAllTenantsRequest, opts ...grpc.CallOption) (*GetAllTenantsResponse, error) {
	out := new(GetAllTenantsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.TenantInternalService/GetAllTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantInternalServiceServer is the server API for TenantInternalService service.
// All implementations must embed UnimplementedTenantInternalServiceServer
// for forward compatibility
type TenantInternalServiceServer interface {
	GetTenantId(context.Context, *GetTenantIdRequest) (*GetTenantIdResponse, error)
	GetTenantName(context.Context, *GetTenantNameRequest) (*GetTenantNameResponse, error)
	GetTenantDataId(context.Context, *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error)
	GetTenantIds(context.Context, *GetTenantIdsRequest) (*GetTenantIdsResponse, error)
	GetTenantNames(context.Context, *GetTenantNamesRequest) (*GetTenantNamesResponse, error)
	GetTenantDataIds(context.Context, *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	GetAllTenants(context.Context, *GetAllTenantsRequest) (*GetAllTenantsResponse, error)
	mustEmbedUnimplementedTenantInternalServiceServer()
}

// UnimplementedTenantInternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantInternalServiceServer struct {
}

func (UnimplementedTenantInternalServiceServer) GetTenantId(context.Context, *GetTenantIdRequest) (*GetTenantIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantId not implemented")
}
func (UnimplementedTenantInternalServiceServer) GetTenantName(context.Context, *GetTenantNameRequest) (*GetTenantNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantName not implemented")
}
func (UnimplementedTenantInternalServiceServer) GetTenantDataId(context.Context, *GetTenantDataIdRequest) (*GetTenantDataIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDataId not implemented")
}
func (UnimplementedTenantInternalServiceServer) GetTenantIds(context.Context, *GetTenantIdsRequest) (*GetTenantIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantIds not implemented")
}
func (UnimplementedTenantInternalServiceServer) GetTenantNames(context.Context, *GetTenantNamesRequest) (*GetTenantNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantNames not implemented")
}
func (UnimplementedTenantInternalServiceServer) GetTenantDataIds(context.Context, *GetTenantDataIdsRequest) (*GetTenantDataIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantDataIds not implemented")
}
func (UnimplementedTenantInternalServiceServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedTenantInternalServiceServer) GetAllTenants(context.Context, *GetAllTenantsRequest) (*GetAllTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTenants not implemented")
}
func (UnimplementedTenantInternalServiceServer) mustEmbedUnimplementedTenantInternalServiceServer() {}

// UnsafeTenantInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantInternalServiceServer will
// result in compilation errors.
type UnsafeTenantInternalServiceServer interface {
	mustEmbedUnimplementedTenantInternalServiceServer()
}

func RegisterTenantInternalServiceServer(s grpc.ServiceRegistrar, srv TenantInternalServiceServer) {
	s.RegisterService(&TenantInternalService_ServiceDesc, srv)
}

func _TenantInternalService_GetTenantId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetTenantId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetTenantId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetTenantId(ctx, req.(*GetTenantIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_GetTenantName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetTenantName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetTenantName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetTenantName(ctx, req.(*GetTenantNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_GetTenantDataId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantDataIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetTenantDataId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetTenantDataId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetTenantDataId(ctx, req.(*GetTenantDataIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_GetTenantIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetTenantIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetTenantIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetTenantIds(ctx, req.(*GetTenantIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_GetTenantNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetTenantNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetTenantNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetTenantNames(ctx, req.(*GetTenantNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_GetTenantDataIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantDataIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetTenantDataIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetTenantDataIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetTenantDataIds(ctx, req.(*GetTenantDataIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantInternalService_GetAllTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantInternalServiceServer).GetAllTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.TenantInternalService/GetAllTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantInternalServiceServer).GetAllTenants(ctx, req.(*GetAllTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantInternalService_ServiceDesc is the grpc.ServiceDesc for TenantInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.TenantInternalService",
	HandlerType: (*TenantInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantId",
			Handler:    _TenantInternalService_GetTenantId_Handler,
		},
		{
			MethodName: "GetTenantName",
			Handler:    _TenantInternalService_GetTenantName_Handler,
		},
		{
			MethodName: "GetTenantDataId",
			Handler:    _TenantInternalService_GetTenantDataId_Handler,
		},
		{
			MethodName: "GetTenantIds",
			Handler:    _TenantInternalService_GetTenantIds_Handler,
		},
		{
			MethodName: "GetTenantNames",
			Handler:    _TenantInternalService_GetTenantNames_Handler,
		},
		{
			MethodName: "GetTenantDataIds",
			Handler:    _TenantInternalService_GetTenantDataIds_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _TenantInternalService_ListTenants_Handler,
		},
		{
			MethodName: "GetAllTenants",
			Handler:    _TenantInternalService_GetAllTenants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/tenant.proto",
}
