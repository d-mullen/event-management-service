// Code generated by mockery v1.0.0. DO NOT EDIT.

package event_management

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventManagementServer is an autogenerated mock type for the EventManagementServer type
type MockEventManagementServer struct {
	mock.Mock
}

// Annotate provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) Annotate(_a0 context.Context, _a1 *EventAnnotationRequest) (*EventAnnotationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventAnnotationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventAnnotationRequest) *EventAnnotationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventAnnotationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventAnnotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllowedStates provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) GetAllowedStates(_a0 context.Context, _a1 *EventAllowedStatesRequest) (*EventAllowedStatesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventAllowedStatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventAllowedStatesRequest) *EventAllowedStatesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventAllowedStatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventAllowedStatesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAcknowledge provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) SetAcknowledge(_a0 context.Context, _a1 *EventAcknowledgeRequest) (*EventManagementResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventManagementResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventAcknowledgeRequest) *EventManagementResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventManagementResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventAcknowledgeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) SetStatus(_a0 context.Context, _a1 *EventStatusRequest) (*EventManagementResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventManagementResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventStatusRequest) *EventManagementResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventManagementResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
