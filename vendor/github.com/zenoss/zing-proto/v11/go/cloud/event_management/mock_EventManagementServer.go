// Code generated by mockery v2.12.2. DO NOT EDIT.

package event_management

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockEventManagementServer is an autogenerated mock type for the EventManagementServer type
type MockEventManagementServer struct {
	mock.Mock
}

type MockEventManagementServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventManagementServer) EXPECT() *MockEventManagementServer_Expecter {
	return &MockEventManagementServer_Expecter{mock: &_m.Mock}
}

// Annotate provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) Annotate(_a0 context.Context, _a1 *EventAnnotationRequest) (*EventAnnotationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventAnnotationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventAnnotationRequest) *EventAnnotationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventAnnotationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventAnnotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventManagementServer_Annotate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Annotate'
type MockEventManagementServer_Annotate_Call struct {
	*mock.Call
}

// Annotate is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventAnnotationRequest
func (_e *MockEventManagementServer_Expecter) Annotate(_a0 interface{}, _a1 interface{}) *MockEventManagementServer_Annotate_Call {
	return &MockEventManagementServer_Annotate_Call{Call: _e.mock.On("Annotate", _a0, _a1)}
}

func (_c *MockEventManagementServer_Annotate_Call) Run(run func(_a0 context.Context, _a1 *EventAnnotationRequest)) *MockEventManagementServer_Annotate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventAnnotationRequest))
	})
	return _c
}

func (_c *MockEventManagementServer_Annotate_Call) Return(_a0 *EventAnnotationResponse, _a1 error) *MockEventManagementServer_Annotate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteAnnotations provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) DeleteAnnotations(_a0 context.Context, _a1 *EventAnnotationRequest) (*EventAnnotationResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventAnnotationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventAnnotationRequest) *EventAnnotationResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventAnnotationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventAnnotationRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventManagementServer_DeleteAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnnotations'
type MockEventManagementServer_DeleteAnnotations_Call struct {
	*mock.Call
}

// DeleteAnnotations is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventAnnotationRequest
func (_e *MockEventManagementServer_Expecter) DeleteAnnotations(_a0 interface{}, _a1 interface{}) *MockEventManagementServer_DeleteAnnotations_Call {
	return &MockEventManagementServer_DeleteAnnotations_Call{Call: _e.mock.On("DeleteAnnotations", _a0, _a1)}
}

func (_c *MockEventManagementServer_DeleteAnnotations_Call) Run(run func(_a0 context.Context, _a1 *EventAnnotationRequest)) *MockEventManagementServer_DeleteAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventAnnotationRequest))
	})
	return _c
}

func (_c *MockEventManagementServer_DeleteAnnotations_Call) Return(_a0 *EventAnnotationResponse, _a1 error) *MockEventManagementServer_DeleteAnnotations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetStatus provides a mock function with given fields: _a0, _a1
func (_m *MockEventManagementServer) SetStatus(_a0 context.Context, _a1 *EventStatusRequest) (*EventStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *EventStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *EventStatusRequest) *EventStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*EventStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *EventStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventManagementServer_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type MockEventManagementServer_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *EventStatusRequest
func (_e *MockEventManagementServer_Expecter) SetStatus(_a0 interface{}, _a1 interface{}) *MockEventManagementServer_SetStatus_Call {
	return &MockEventManagementServer_SetStatus_Call{Call: _e.mock.On("SetStatus", _a0, _a1)}
}

func (_c *MockEventManagementServer_SetStatus_Call) Run(run func(_a0 context.Context, _a1 *EventStatusRequest)) *MockEventManagementServer_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*EventStatusRequest))
	})
	return _c
}

func (_c *MockEventManagementServer_SetStatus_Call) Return(_a0 *EventStatusResponse, _a1 error) *MockEventManagementServer_SetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockEventManagementServer creates a new instance of MockEventManagementServer. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventManagementServer(t testing.TB) *MockEventManagementServer {
	mock := &MockEventManagementServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
