// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zenoss/zing/proto/cloud/event_management_service.proto

package event_management

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	event_context "github.com/zenoss/zing-proto/v11/go/cloud/event_context"
	event "github.com/zenoss/zing-proto/v11/go/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventStatusRequest struct {
	Tenant               string                  `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	StatusList           map[string]event.Status `protobuf:"bytes,2,rep,name=statusList,proto3" json:"statusList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=events.Status"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EventStatusRequest) Reset()         { *m = EventStatusRequest{} }
func (m *EventStatusRequest) String() string { return proto.CompactTextString(m) }
func (*EventStatusRequest) ProtoMessage()    {}
func (*EventStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{0}
}

func (m *EventStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventStatusRequest.Unmarshal(m, b)
}
func (m *EventStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventStatusRequest.Marshal(b, m, deterministic)
}
func (m *EventStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStatusRequest.Merge(m, src)
}
func (m *EventStatusRequest) XXX_Size() int {
	return xxx_messageInfo_EventStatusRequest.Size(m)
}
func (m *EventStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventStatusRequest proto.InternalMessageInfo

func (m *EventStatusRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *EventStatusRequest) GetStatusList() map[string]event.Status {
	if m != nil {
		return m.StatusList
	}
	return nil
}

type EventManagementResponse struct {
	SuccessList          map[string]bool `protobuf:"bytes,2,rep,name=successList,proto3" json:"successList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventManagementResponse) Reset()         { *m = EventManagementResponse{} }
func (m *EventManagementResponse) String() string { return proto.CompactTextString(m) }
func (*EventManagementResponse) ProtoMessage()    {}
func (*EventManagementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{1}
}

func (m *EventManagementResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventManagementResponse.Unmarshal(m, b)
}
func (m *EventManagementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventManagementResponse.Marshal(b, m, deterministic)
}
func (m *EventManagementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventManagementResponse.Merge(m, src)
}
func (m *EventManagementResponse) XXX_Size() int {
	return xxx_messageInfo_EventManagementResponse.Size(m)
}
func (m *EventManagementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventManagementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventManagementResponse proto.InternalMessageInfo

func (m *EventManagementResponse) GetSuccessList() map[string]bool {
	if m != nil {
		return m.SuccessList
	}
	return nil
}

type EventAcknowledgeRequest struct {
	Tenant               string          `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	AcknowledgeList      map[string]bool `protobuf:"bytes,2,rep,name=acknowledgeList,proto3" json:"acknowledgeList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EventAcknowledgeRequest) Reset()         { *m = EventAcknowledgeRequest{} }
func (m *EventAcknowledgeRequest) String() string { return proto.CompactTextString(m) }
func (*EventAcknowledgeRequest) ProtoMessage()    {}
func (*EventAcknowledgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{2}
}

func (m *EventAcknowledgeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventAcknowledgeRequest.Unmarshal(m, b)
}
func (m *EventAcknowledgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventAcknowledgeRequest.Marshal(b, m, deterministic)
}
func (m *EventAcknowledgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAcknowledgeRequest.Merge(m, src)
}
func (m *EventAcknowledgeRequest) XXX_Size() int {
	return xxx_messageInfo_EventAcknowledgeRequest.Size(m)
}
func (m *EventAcknowledgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAcknowledgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventAcknowledgeRequest proto.InternalMessageInfo

func (m *EventAcknowledgeRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *EventAcknowledgeRequest) GetAcknowledgeList() map[string]bool {
	if m != nil {
		return m.AcknowledgeList
	}
	return nil
}

type EventAnnotationRequest struct {
	Tenant               string                        `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	EventId              string                        `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Notes                *event_context.OccurrenceNote `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *EventAnnotationRequest) Reset()         { *m = EventAnnotationRequest{} }
func (m *EventAnnotationRequest) String() string { return proto.CompactTextString(m) }
func (*EventAnnotationRequest) ProtoMessage()    {}
func (*EventAnnotationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{3}
}

func (m *EventAnnotationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventAnnotationRequest.Unmarshal(m, b)
}
func (m *EventAnnotationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventAnnotationRequest.Marshal(b, m, deterministic)
}
func (m *EventAnnotationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAnnotationRequest.Merge(m, src)
}
func (m *EventAnnotationRequest) XXX_Size() int {
	return xxx_messageInfo_EventAnnotationRequest.Size(m)
}
func (m *EventAnnotationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAnnotationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventAnnotationRequest proto.InternalMessageInfo

func (m *EventAnnotationRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *EventAnnotationRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventAnnotationRequest) GetNotes() *event_context.OccurrenceNote {
	if m != nil {
		return m.Notes
	}
	return nil
}

type EventAnnotationResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	NoteId               string   `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventAnnotationResponse) Reset()         { *m = EventAnnotationResponse{} }
func (m *EventAnnotationResponse) String() string { return proto.CompactTextString(m) }
func (*EventAnnotationResponse) ProtoMessage()    {}
func (*EventAnnotationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{4}
}

func (m *EventAnnotationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventAnnotationResponse.Unmarshal(m, b)
}
func (m *EventAnnotationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventAnnotationResponse.Marshal(b, m, deterministic)
}
func (m *EventAnnotationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAnnotationResponse.Merge(m, src)
}
func (m *EventAnnotationResponse) XXX_Size() int {
	return xxx_messageInfo_EventAnnotationResponse.Size(m)
}
func (m *EventAnnotationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAnnotationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventAnnotationResponse proto.InternalMessageInfo

func (m *EventAnnotationResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventAnnotationResponse) GetNoteId() string {
	if m != nil {
		return m.NoteId
	}
	return ""
}

type EventAllowedStatesRequest struct {
	Tenant               string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventAllowedStatesRequest) Reset()         { *m = EventAllowedStatesRequest{} }
func (m *EventAllowedStatesRequest) String() string { return proto.CompactTextString(m) }
func (*EventAllowedStatesRequest) ProtoMessage()    {}
func (*EventAllowedStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{5}
}

func (m *EventAllowedStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventAllowedStatesRequest.Unmarshal(m, b)
}
func (m *EventAllowedStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventAllowedStatesRequest.Marshal(b, m, deterministic)
}
func (m *EventAllowedStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAllowedStatesRequest.Merge(m, src)
}
func (m *EventAllowedStatesRequest) XXX_Size() int {
	return xxx_messageInfo_EventAllowedStatesRequest.Size(m)
}
func (m *EventAllowedStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAllowedStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventAllowedStatesRequest proto.InternalMessageInfo

func (m *EventAllowedStatesRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type EventAllowedStatesResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	States               []string `protobuf:"bytes,2,rep,name=states,proto3" json:"states,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventAllowedStatesResponse) Reset()         { *m = EventAllowedStatesResponse{} }
func (m *EventAllowedStatesResponse) String() string { return proto.CompactTextString(m) }
func (*EventAllowedStatesResponse) ProtoMessage()    {}
func (*EventAllowedStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e190cb14ee571f53, []int{6}
}

func (m *EventAllowedStatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventAllowedStatesResponse.Unmarshal(m, b)
}
func (m *EventAllowedStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventAllowedStatesResponse.Marshal(b, m, deterministic)
}
func (m *EventAllowedStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAllowedStatesResponse.Merge(m, src)
}
func (m *EventAllowedStatesResponse) XXX_Size() int {
	return xxx_messageInfo_EventAllowedStatesResponse.Size(m)
}
func (m *EventAllowedStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAllowedStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventAllowedStatesResponse proto.InternalMessageInfo

func (m *EventAllowedStatesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EventAllowedStatesResponse) GetStates() []string {
	if m != nil {
		return m.States
	}
	return nil
}

func init() {
	proto.RegisterType((*EventStatusRequest)(nil), "zenoss.cloud.EventStatusRequest")
	proto.RegisterMapType((map[string]event.Status)(nil), "zenoss.cloud.EventStatusRequest.StatusListEntry")
	proto.RegisterType((*EventManagementResponse)(nil), "zenoss.cloud.EventManagementResponse")
	proto.RegisterMapType((map[string]bool)(nil), "zenoss.cloud.EventManagementResponse.SuccessListEntry")
	proto.RegisterType((*EventAcknowledgeRequest)(nil), "zenoss.cloud.EventAcknowledgeRequest")
	proto.RegisterMapType((map[string]bool)(nil), "zenoss.cloud.EventAcknowledgeRequest.AcknowledgeListEntry")
	proto.RegisterType((*EventAnnotationRequest)(nil), "zenoss.cloud.EventAnnotationRequest")
	proto.RegisterType((*EventAnnotationResponse)(nil), "zenoss.cloud.EventAnnotationResponse")
	proto.RegisterType((*EventAllowedStatesRequest)(nil), "zenoss.cloud.EventAllowedStatesRequest")
	proto.RegisterType((*EventAllowedStatesResponse)(nil), "zenoss.cloud.EventAllowedStatesResponse")
}

func init() {
	proto.RegisterFile("zenoss/zing/proto/cloud/event_management_service.proto", fileDescriptor_e190cb14ee571f53)
}

var fileDescriptor_e190cb14ee571f53 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x6b, 0xdb, 0x30,
	0x14, 0xc5, 0x09, 0xcd, 0xc7, 0xcd, 0x48, 0x82, 0x28, 0x69, 0x6a, 0xf6, 0x10, 0xb2, 0x96, 0x05,
	0xca, 0xec, 0x35, 0x85, 0x32, 0xf2, 0x30, 0x68, 0xa1, 0x8c, 0x42, 0xdb, 0x15, 0x67, 0xb0, 0xb1,
	0x87, 0x0d, 0xd7, 0xbe, 0x78, 0x26, 0x89, 0xd4, 0x59, 0x72, 0xba, 0xf6, 0x65, 0x8f, 0xfb, 0x41,
	0xfb, 0x1d, 0xfb, 0x05, 0xfb, 0x33, 0xc3, 0x92, 0xd3, 0x38, 0x8e, 0x36, 0x67, 0x2f, 0xc1, 0x37,
	0x3e, 0xe7, 0xe8, 0x1c, 0xdd, 0x2b, 0x19, 0x8e, 0x1f, 0x90, 0x32, 0xce, 0xed, 0x87, 0x90, 0x06,
	0xf6, 0x6d, 0xc4, 0x04, 0xb3, 0xbd, 0x29, 0x8b, 0x7d, 0x1b, 0xe7, 0x48, 0xc5, 0xe7, 0x99, 0x4b,
	0xdd, 0x00, 0x67, 0xc9, 0x23, 0xc7, 0x68, 0x1e, 0x7a, 0x68, 0x49, 0x10, 0x79, 0xa2, 0x78, 0x96,
	0x04, 0x9b, 0xcf, 0xd6, 0x55, 0x24, 0x5f, 0xfd, 0x2a, 0x8a, 0x79, 0xf0, 0xef, 0xa5, 0x3c, 0x46,
	0x05, 0x7e, 0x4b, 0xc1, 0xfd, 0x5f, 0x06, 0x90, 0xb3, 0xe4, 0xff, 0xb1, 0x70, 0x45, 0xcc, 0x1d,
	0xfc, 0x1a, 0x23, 0x17, 0xa4, 0x03, 0x15, 0x81, 0xd4, 0xa5, 0xa2, 0x6b, 0xf4, 0x8c, 0x41, 0xdd,
	0x49, 0x2b, 0x72, 0x0d, 0xc0, 0x25, 0xf0, 0x22, 0xe4, 0xa2, 0x5b, 0xea, 0x95, 0x07, 0x8d, 0xe1,
	0x4b, 0x2b, 0xeb, 0xd1, 0x5a, 0x57, 0xb3, 0xc6, 0x8f, 0x94, 0x33, 0x2a, 0xa2, 0x7b, 0x27, 0xa3,
	0x61, 0x5e, 0x42, 0x2b, 0xf7, 0x9a, 0xb4, 0xa1, 0x3c, 0xc1, 0xfb, 0x74, 0xe5, 0xe4, 0x91, 0xec,
	0xc1, 0xd6, 0xdc, 0x9d, 0xc6, 0xd8, 0x2d, 0xf5, 0x8c, 0x41, 0x73, 0xd8, 0xb4, 0x64, 0x14, 0x9e,
	0x0a, 0x3b, 0xea, 0xe5, 0xa8, 0xf4, 0xca, 0xe8, 0xff, 0x34, 0x60, 0x47, 0x3a, 0xb8, 0x7c, 0xdc,
	0x51, 0x07, 0xf9, 0x2d, 0xa3, 0x1c, 0xc9, 0x07, 0x68, 0xf0, 0xd8, 0xf3, 0x90, 0x67, 0xdd, 0x1f,
	0x6b, 0xdc, 0xaf, 0x73, 0xad, 0xf1, 0x92, 0xa8, 0x32, 0x64, 0xa5, 0xcc, 0xd7, 0xd0, 0xce, 0x03,
	0x34, 0x29, 0xb6, 0xb3, 0x29, 0x6a, 0x59, 0xd7, 0xbf, 0x17, 0xae, 0x4f, 0xbc, 0x09, 0x65, 0x77,
	0x53, 0xf4, 0x03, 0x2c, 0x6a, 0x85, 0x0f, 0x2d, 0x77, 0x89, 0xce, 0x24, 0x1a, 0x69, 0x12, 0xad,
	0xeb, 0x5a, 0x27, 0xab, 0x64, 0x95, 0x2a, 0x2f, 0x69, 0x9e, 0xc2, 0xb6, 0x0e, 0xf8, 0x5f, 0xe9,
	0xbe, 0x43, 0x47, 0x99, 0xa0, 0x94, 0x09, 0x57, 0x84, 0x8c, 0x16, 0x65, 0xdb, 0x85, 0x9a, 0x1a,
	0xd6, 0xd0, 0x97, 0x72, 0x75, 0xa7, 0x2a, 0xeb, 0x73, 0x9f, 0x0c, 0x61, 0x8b, 0x32, 0x81, 0xbc,
	0x5b, 0xee, 0x19, 0x83, 0xc6, 0xf0, 0xe9, 0x6a, 0xd8, 0xb7, 0x9e, 0x17, 0x47, 0x11, 0x52, 0x0f,
	0xaf, 0x98, 0x40, 0x47, 0x41, 0xfb, 0x17, 0x8b, 0xdd, 0xcd, 0x18, 0x48, 0x67, 0xa2, 0x0b, 0xd5,
	0xb4, 0x91, 0xd2, 0x42, 0xcd, 0x59, 0x94, 0x64, 0x07, 0xaa, 0x09, 0x7b, 0x69, 0xa1, 0x92, 0x94,
	0xe7, 0x7e, 0xff, 0x08, 0x76, 0x95, 0xda, 0x74, 0xca, 0xee, 0xd0, 0x4f, 0x66, 0x10, 0x8b, 0x0e,
	0x4e, 0xff, 0x0a, 0x4c, 0x1d, 0xa9, 0xd0, 0x45, 0x07, 0x2a, 0x5c, 0x62, 0x65, 0x73, 0xeb, 0x4e,
	0x5a, 0x0d, 0x7f, 0x94, 0xa1, 0x95, 0x9b, 0x55, 0xf2, 0x0e, 0xea, 0x63, 0x4c, 0x8f, 0x1e, 0xe9,
	0x15, 0x9d, 0x4a, 0x73, 0x7f, 0xa3, 0xc9, 0x27, 0x9f, 0xa0, 0x39, 0xc6, 0xec, 0x00, 0x91, 0xfd,
	0x8d, 0x06, 0x6c, 0x53, 0xfd, 0xf7, 0x50, 0x4b, 0xfb, 0x82, 0x64, 0x4f, 0xa7, 0x9c, 0x9f, 0x1a,
	0xad, 0xb0, 0xa6, 0xb5, 0x08, 0xed, 0x37, 0xb8, 0xba, 0xe1, 0xe4, 0xb9, 0x8e, 0xaa, 0xe9, 0xa3,
	0x39, 0x28, 0x06, 0xaa, 0x65, 0x4e, 0x27, 0x70, 0xc0, 0xa2, 0x60, 0x01, 0x4f, 0x2e, 0x5d, 0x75,
	0xb5, 0xa6, 0x4c, 0x5c, 0x8d, 0x7d, 0x6d, 0x7c, 0x1c, 0x05, 0xa1, 0xf8, 0x12, 0xdf, 0x58, 0x1e,
	0x9b, 0xd9, 0x99, 0xab, 0xfa, 0x85, 0xba, 0xaa, 0xe7, 0x87, 0x87, 0x76, 0xf0, 0xb7, 0x8f, 0xc3,
	0x4d, 0x45, 0x82, 0x8e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08, 0xf0, 0x30, 0x18, 0x4f, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventManagementClient is the client API for EventManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventManagementClient interface {
	SetStatus(ctx context.Context, in *EventStatusRequest, opts ...grpc.CallOption) (*EventManagementResponse, error)
	SetAcknowledge(ctx context.Context, in *EventAcknowledgeRequest, opts ...grpc.CallOption) (*EventManagementResponse, error)
	Annotate(ctx context.Context, in *EventAnnotationRequest, opts ...grpc.CallOption) (*EventAnnotationResponse, error)
	GetAllowedStates(ctx context.Context, in *EventAllowedStatesRequest, opts ...grpc.CallOption) (*EventAllowedStatesResponse, error)
}

type eventManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEventManagementClient(cc grpc.ClientConnInterface) EventManagementClient {
	return &eventManagementClient{cc}
}

func (c *eventManagementClient) SetStatus(ctx context.Context, in *EventStatusRequest, opts ...grpc.CallOption) (*EventManagementResponse, error) {
	out := new(EventManagementResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagementClient) SetAcknowledge(ctx context.Context, in *EventAcknowledgeRequest, opts ...grpc.CallOption) (*EventManagementResponse, error) {
	out := new(EventManagementResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/SetAcknowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagementClient) Annotate(ctx context.Context, in *EventAnnotationRequest, opts ...grpc.CallOption) (*EventAnnotationResponse, error) {
	out := new(EventAnnotationResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/Annotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagementClient) GetAllowedStates(ctx context.Context, in *EventAllowedStatesRequest, opts ...grpc.CallOption) (*EventAllowedStatesResponse, error) {
	out := new(EventAllowedStatesResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/GetAllowedStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventManagementServer is the server API for EventManagement service.
type EventManagementServer interface {
	SetStatus(context.Context, *EventStatusRequest) (*EventManagementResponse, error)
	SetAcknowledge(context.Context, *EventAcknowledgeRequest) (*EventManagementResponse, error)
	Annotate(context.Context, *EventAnnotationRequest) (*EventAnnotationResponse, error)
	GetAllowedStates(context.Context, *EventAllowedStatesRequest) (*EventAllowedStatesResponse, error)
}

// UnimplementedEventManagementServer can be embedded to have forward compatible implementations.
type UnimplementedEventManagementServer struct {
}

func (*UnimplementedEventManagementServer) SetStatus(ctx context.Context, req *EventStatusRequest) (*EventManagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (*UnimplementedEventManagementServer) SetAcknowledge(ctx context.Context, req *EventAcknowledgeRequest) (*EventManagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAcknowledge not implemented")
}
func (*UnimplementedEventManagementServer) Annotate(ctx context.Context, req *EventAnnotationRequest) (*EventAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Annotate not implemented")
}
func (*UnimplementedEventManagementServer) GetAllowedStates(ctx context.Context, req *EventAllowedStatesRequest) (*EventAllowedStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedStates not implemented")
}

func RegisterEventManagementServer(s *grpc.Server, srv EventManagementServer) {
	s.RegisterService(&_EventManagement_serviceDesc, srv)
}

func _EventManagement_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).SetStatus(ctx, req.(*EventStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManagement_SetAcknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAcknowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).SetAcknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/SetAcknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).SetAcknowledge(ctx, req.(*EventAcknowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManagement_Annotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).Annotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/Annotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).Annotate(ctx, req.(*EventAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManagement_GetAllowedStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAllowedStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).GetAllowedStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/GetAllowedStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).GetAllowedStates(ctx, req.(*EventAllowedStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventManagement",
	HandlerType: (*EventManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _EventManagement_SetStatus_Handler,
		},
		{
			MethodName: "SetAcknowledge",
			Handler:    _EventManagement_SetAcknowledge_Handler,
		},
		{
			MethodName: "Annotate",
			Handler:    _EventManagement_Annotate_Handler,
		},
		{
			MethodName: "GetAllowedStates",
			Handler:    _EventManagement_GetAllowedStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/event_management_service.proto",
}
