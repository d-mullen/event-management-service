// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.5.1
// source: zenoss/zing/proto/cloud/event_management_service.proto

package event_management

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	event "github.com/zenoss/zing-proto/v11/go/event"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// holds details for one event
type EMEventStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                   // event id, must match an existing event
	OccurrenceId  string                 `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`    // occurrence id, must match an existing occurrence
	Acknowledged  *wrappers.BoolValue    `protobuf:"bytes,3,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`                        // true/false. Leave out if not updating
	StatusWrapper *EMEventStatus_Wrapper `protobuf:"bytes,4,opt,name=status_wrapper,json=statusWrapper,proto3" json:"status_wrapper,omitempty"` // wrapper for status. Leave out if not updating
}

func (x *EMEventStatus) Reset() {
	*x = EMEventStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMEventStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMEventStatus) ProtoMessage() {}

func (x *EMEventStatus) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMEventStatus.ProtoReflect.Descriptor instead.
func (*EMEventStatus) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{0}
}

func (x *EMEventStatus) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EMEventStatus) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

func (x *EMEventStatus) GetAcknowledged() *wrappers.BoolValue {
	if x != nil {
		return x.Acknowledged
	}
	return nil
}

func (x *EMEventStatus) GetStatusWrapper() *EMEventStatus_Wrapper {
	if x != nil {
		return x.StatusWrapper
	}
	return nil
}

// a request to update acknowledgement and state for one or more events
type EventStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*EMEventStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"` // array of EMEventStatus messages
}

func (x *EventStatusRequest) Reset() {
	*x = EventStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusRequest) ProtoMessage() {}

func (x *EventStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusRequest.ProtoReflect.Descriptor instead.
func (*EventStatusRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{1}
}

func (x *EventStatusRequest) GetStatuses() []*EMEventStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// a response for one of the events whose staus was updated
type EMEventStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // event id
	OccurrenceId string `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
	Success      bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"` // true/false
	Error        string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`      // details when success is false
}

func (x *EMEventStatusResponse) Reset() {
	*x = EMEventStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMEventStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMEventStatusResponse) ProtoMessage() {}

func (x *EMEventStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMEventStatusResponse.ProtoReflect.Descriptor instead.
func (*EMEventStatusResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{2}
}

func (x *EMEventStatusResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EMEventStatusResponse) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

func (x *EMEventStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EMEventStatusResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// response for all event(s) whose status was update
type EventStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusResponses []*EMEventStatusResponse `protobuf:"bytes,1,rep,name=status_responses,json=statusResponses,proto3" json:"status_responses,omitempty"` // array of responses
}

func (x *EventStatusResponse) Reset() {
	*x = EventStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusResponse) ProtoMessage() {}

func (x *EventStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusResponse.ProtoReflect.Descriptor instead.
func (*EventStatusResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{3}
}

func (x *EventStatusResponse) GetStatusResponses() []*EMEventStatusResponse {
	if x != nil {
		return x.StatusResponses
	}
	return nil
}

// An annotation for an event
type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`                // event id, must match an existing event
	OccurrenceId string `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"` // occurrence id, must match an existing occurrence
	AnnotationId string `protobuf:"bytes,3,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"` // leave out for new annotation,  must match an existing annotation for edits and deletes
	Annotation   string `protobuf:"bytes,4,opt,name=annotation,proto3" json:"annotation,omitempty"`                         // text to add or update. delete will ignore this.
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{4}
}

func (x *Annotation) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Annotation) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

func (x *Annotation) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *Annotation) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

// a request to add or edit annotation(s) for one or more events
type EventAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations []*Annotation `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty"` // array of Annotation messages
}

func (x *EventAnnotationRequest) Reset() {
	*x = EventAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationRequest) ProtoMessage() {}

func (x *EventAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationRequest.ProtoReflect.Descriptor instead.
func (*EventAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{5}
}

func (x *EventAnnotationRequest) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// response for one event whose annotation was added or edited
type AnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` // event id
	OccurrenceId string `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
	AnnotationId string `protobuf:"bytes,3,opt,name=annotation_id,json=annotationId,proto3" json:"annotation_id,omitempty"` // id returned for new annotation
	Success      bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`                              // true/false
	Error        string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                                   // details when success is false
}

func (x *AnnotationResponse) Reset() {
	*x = AnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationResponse) ProtoMessage() {}

func (x *AnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationResponse.ProtoReflect.Descriptor instead.
func (*AnnotationResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{6}
}

func (x *AnnotationResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AnnotationResponse) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

func (x *AnnotationResponse) GetAnnotationId() string {
	if x != nil {
		return x.AnnotationId
	}
	return ""
}

func (x *AnnotationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AnnotationResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// response for all event(s) whose annotations were edited or added
type EventAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationResponses []*AnnotationResponse `protobuf:"bytes,1,rep,name=annotation_responses,json=annotationResponses,proto3" json:"annotation_responses,omitempty"` // array of responses
}

func (x *EventAnnotationResponse) Reset() {
	*x = EventAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAnnotationResponse) ProtoMessage() {}

func (x *EventAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAnnotationResponse.ProtoReflect.Descriptor instead.
func (*EventAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{7}
}

func (x *EventAnnotationResponse) GetAnnotationResponses() []*AnnotationResponse {
	if x != nil {
		return x.AnnotationResponses
	}
	return nil
}

type EMEventStatus_Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status event.Status `protobuf:"varint,1,opt,name=status,proto3,enum=events.Status" json:"status,omitempty"` // enum string value
}

func (x *EMEventStatus_Wrapper) Reset() {
	*x = EMEventStatus_Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMEventStatus_Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMEventStatus_Wrapper) ProtoMessage() {}

func (x *EMEventStatus_Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMEventStatus_Wrapper.ProtoReflect.Descriptor instead.
func (*EMEventStatus_Wrapper) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EMEventStatus_Wrapper) GetStatus() event.Status {
	if x != nil {
		return x.Status
	}
	return event.Status_STATUS_DEFAULT
}

var File_zenoss_zing_proto_cloud_event_management_service_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_event_management_service_proto_rawDesc = []byte{
	0x0a, 0x36, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x23, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x0d, 0x45, 0x4d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x45, 0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x31, 0x0a, 0x07, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x12, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x45, 0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x45, 0x4d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x45, 0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54,
	0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x6e, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x32, 0xa6, 0x03, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x81,
	0x01, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x6b, 0x0a, 0x2b, 0x6f, 0x72, 0x67,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescData = file_zenoss_zing_proto_cloud_event_management_service_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_event_management_service_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zenoss_zing_proto_cloud_event_management_service_proto_goTypes = []interface{}{
	(*EMEventStatus)(nil),           // 0: zenoss.cloud.EMEventStatus
	(*EventStatusRequest)(nil),      // 1: zenoss.cloud.EventStatusRequest
	(*EMEventStatusResponse)(nil),   // 2: zenoss.cloud.EMEventStatusResponse
	(*EventStatusResponse)(nil),     // 3: zenoss.cloud.EventStatusResponse
	(*Annotation)(nil),              // 4: zenoss.cloud.Annotation
	(*EventAnnotationRequest)(nil),  // 5: zenoss.cloud.EventAnnotationRequest
	(*AnnotationResponse)(nil),      // 6: zenoss.cloud.AnnotationResponse
	(*EventAnnotationResponse)(nil), // 7: zenoss.cloud.EventAnnotationResponse
	(*EMEventStatus_Wrapper)(nil),   // 8: zenoss.cloud.EMEventStatus.Wrapper
	(*wrappers.BoolValue)(nil),      // 9: google.protobuf.BoolValue
	(event.Status)(0),               // 10: events.Status
}
var file_zenoss_zing_proto_cloud_event_management_service_proto_depIdxs = []int32{
	9,  // 0: zenoss.cloud.EMEventStatus.acknowledged:type_name -> google.protobuf.BoolValue
	8,  // 1: zenoss.cloud.EMEventStatus.status_wrapper:type_name -> zenoss.cloud.EMEventStatus.Wrapper
	0,  // 2: zenoss.cloud.EventStatusRequest.statuses:type_name -> zenoss.cloud.EMEventStatus
	2,  // 3: zenoss.cloud.EventStatusResponse.status_responses:type_name -> zenoss.cloud.EMEventStatusResponse
	4,  // 4: zenoss.cloud.EventAnnotationRequest.annotations:type_name -> zenoss.cloud.Annotation
	6,  // 5: zenoss.cloud.EventAnnotationResponse.annotation_responses:type_name -> zenoss.cloud.AnnotationResponse
	10, // 6: zenoss.cloud.EMEventStatus.Wrapper.status:type_name -> events.Status
	1,  // 7: zenoss.cloud.EventManagement.SetStatus:input_type -> zenoss.cloud.EventStatusRequest
	5,  // 8: zenoss.cloud.EventManagement.Annotate:input_type -> zenoss.cloud.EventAnnotationRequest
	5,  // 9: zenoss.cloud.EventManagement.DeleteAnnotations:input_type -> zenoss.cloud.EventAnnotationRequest
	3,  // 10: zenoss.cloud.EventManagement.SetStatus:output_type -> zenoss.cloud.EventStatusResponse
	7,  // 11: zenoss.cloud.EventManagement.Annotate:output_type -> zenoss.cloud.EventAnnotationResponse
	7,  // 12: zenoss.cloud.EventManagement.DeleteAnnotations:output_type -> zenoss.cloud.EventAnnotationResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_event_management_service_proto_init() }
func file_zenoss_zing_proto_cloud_event_management_service_proto_init() {
	if File_zenoss_zing_proto_cloud_event_management_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMEventStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMEventStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMEventStatus_Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_event_management_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_event_management_service_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_event_management_service_proto_depIdxs,
		MessageInfos:      file_zenoss_zing_proto_cloud_event_management_service_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_event_management_service_proto = out.File
	file_zenoss_zing_proto_cloud_event_management_service_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_event_management_service_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_event_management_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventManagementClient is the client API for EventManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventManagementClient interface {
	//
	//sets status for event(s). Acknowledge and/or status can be updated.
	SetStatus(ctx context.Context, in *EventStatusRequest, opts ...grpc.CallOption) (*EventStatusResponse, error)
	//
	//add or edit annotations for event(s).
	Annotate(ctx context.Context, in *EventAnnotationRequest, opts ...grpc.CallOption) (*EventAnnotationResponse, error)
	//
	//delete annotations for event(s).
	DeleteAnnotations(ctx context.Context, in *EventAnnotationRequest, opts ...grpc.CallOption) (*EventAnnotationResponse, error)
}

type eventManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEventManagementClient(cc grpc.ClientConnInterface) EventManagementClient {
	return &eventManagementClient{cc}
}

func (c *eventManagementClient) SetStatus(ctx context.Context, in *EventStatusRequest, opts ...grpc.CallOption) (*EventStatusResponse, error) {
	out := new(EventStatusResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagementClient) Annotate(ctx context.Context, in *EventAnnotationRequest, opts ...grpc.CallOption) (*EventAnnotationResponse, error) {
	out := new(EventAnnotationResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/Annotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventManagementClient) DeleteAnnotations(ctx context.Context, in *EventAnnotationRequest, opts ...grpc.CallOption) (*EventAnnotationResponse, error) {
	out := new(EventAnnotationResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventManagement/DeleteAnnotations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventManagementServer is the server API for EventManagement service.
type EventManagementServer interface {
	//
	//sets status for event(s). Acknowledge and/or status can be updated.
	SetStatus(context.Context, *EventStatusRequest) (*EventStatusResponse, error)
	//
	//add or edit annotations for event(s).
	Annotate(context.Context, *EventAnnotationRequest) (*EventAnnotationResponse, error)
	//
	//delete annotations for event(s).
	DeleteAnnotations(context.Context, *EventAnnotationRequest) (*EventAnnotationResponse, error)
}

// UnimplementedEventManagementServer can be embedded to have forward compatible implementations.
type UnimplementedEventManagementServer struct {
}

func (*UnimplementedEventManagementServer) SetStatus(context.Context, *EventStatusRequest) (*EventStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (*UnimplementedEventManagementServer) Annotate(context.Context, *EventAnnotationRequest) (*EventAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Annotate not implemented")
}
func (*UnimplementedEventManagementServer) DeleteAnnotations(context.Context, *EventAnnotationRequest) (*EventAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnotations not implemented")
}

func RegisterEventManagementServer(s *grpc.Server, srv EventManagementServer) {
	s.RegisterService(&_EventManagement_serviceDesc, srv)
}

func _EventManagement_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).SetStatus(ctx, req.(*EventStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManagement_Annotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).Annotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/Annotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).Annotate(ctx, req.(*EventAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventManagement_DeleteAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventManagementServer).DeleteAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventManagement/DeleteAnnotations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventManagementServer).DeleteAnnotations(ctx, req.(*EventAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventManagement",
	HandlerType: (*EventManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _EventManagement_SetStatus_Handler,
		},
		{
			MethodName: "Annotate",
			Handler:    _EventManagement_Annotate_Handler,
		},
		{
			MethodName: "DeleteAnnotations",
			Handler:    _EventManagement_DeleteAnnotations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/event_management_service.proto",
}
