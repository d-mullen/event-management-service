// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/event_query_v2_grpc.proto

package eventquery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventQueryClient is the client API for EventQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventQueryClient interface {
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error)
	SearchStream(ctx context.Context, in *SearchStreamRequest, opts ...grpc.CallOption) (EventQuery_SearchStreamClient, error)
	EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventQuery_EventsWithCountsStreamClient, error)
}

type eventQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventQueryClient(cc grpc.ClientConnInterface) EventQueryClient {
	return &eventQueryClient{cc}
}

func (c *eventQueryClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error) {
	out := new(FrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/Frequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) SearchStream(ctx context.Context, in *SearchStreamRequest, opts ...grpc.CallOption) (EventQuery_SearchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventQuery_ServiceDesc.Streams[0], "/zenoss.cloud.eventQuery.v2.EventQuery/SearchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventQuerySearchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventQuery_SearchStreamClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type eventQuerySearchStreamClient struct {
	grpc.ClientStream
}

func (x *eventQuerySearchStreamClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventQueryClient) EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventQuery_EventsWithCountsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventQuery_ServiceDesc.Streams[1], "/zenoss.cloud.eventQuery.v2.EventQuery/EventsWithCountsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventQueryEventsWithCountsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventQuery_EventsWithCountsStreamClient interface {
	Recv() (*EventsWithCountsResponse, error)
	grpc.ClientStream
}

type eventQueryEventsWithCountsStreamClient struct {
	grpc.ClientStream
}

func (x *eventQueryEventsWithCountsStreamClient) Recv() (*EventsWithCountsResponse, error) {
	m := new(EventsWithCountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventQueryServer is the server API for EventQuery service.
// All implementations must embed UnimplementedEventQueryServer
// for forward compatibility
type EventQueryServer interface {
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error)
	SearchStream(*SearchStreamRequest, EventQuery_SearchStreamServer) error
	EventsWithCountsStream(*EventsWithCountsRequest, EventQuery_EventsWithCountsStreamServer) error
	mustEmbedUnimplementedEventQueryServer()
}

// UnimplementedEventQueryServer must be embedded to have forward compatible implementations.
type UnimplementedEventQueryServer struct {
}

func (UnimplementedEventQueryServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedEventQueryServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedEventQueryServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedEventQueryServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedEventQueryServer) Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frequency not implemented")
}
func (UnimplementedEventQueryServer) SearchStream(*SearchStreamRequest, EventQuery_SearchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchStream not implemented")
}
func (UnimplementedEventQueryServer) EventsWithCountsStream(*EventsWithCountsRequest, EventQuery_EventsWithCountsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsWithCountsStream not implemented")
}
func (UnimplementedEventQueryServer) mustEmbedUnimplementedEventQueryServer() {}

// UnsafeEventQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventQueryServer will
// result in compilation errors.
type UnsafeEventQueryServer interface {
	mustEmbedUnimplementedEventQueryServer()
}

func RegisterEventQueryServer(s grpc.ServiceRegistrar, srv EventQueryServer) {
	s.RegisterService(&EventQuery_ServiceDesc, srv)
}

func _EventQuery_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Frequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Frequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/Frequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Frequency(ctx, req.(*FrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_SearchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventQueryServer).SearchStream(m, &eventQuerySearchStreamServer{stream})
}

type EventQuery_SearchStreamServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type eventQuerySearchStreamServer struct {
	grpc.ServerStream
}

func (x *eventQuerySearchStreamServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventQuery_EventsWithCountsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsWithCountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventQueryServer).EventsWithCountsStream(m, &eventQueryEventsWithCountsStreamServer{stream})
}

type EventQuery_EventsWithCountsStreamServer interface {
	Send(*EventsWithCountsResponse) error
	grpc.ServerStream
}

type eventQueryEventsWithCountsStreamServer struct {
	grpc.ServerStream
}

func (x *eventQueryEventsWithCountsStreamServer) Send(m *EventsWithCountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventQuery_ServiceDesc is the grpc.ServiceDesc for EventQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.eventQuery.v2.EventQuery",
	HandlerType: (*EventQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _EventQuery_GetEvent_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _EventQuery_GetEvents_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _EventQuery_Search_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _EventQuery_Count_Handler,
		},
		{
			MethodName: "Frequency",
			Handler:    _EventQuery_Frequency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchStream",
			Handler:       _EventQuery_SearchStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsWithCountsStream",
			Handler:       _EventQuery_EventsWithCountsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/event_query_v2_grpc.proto",
}
