// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zenoss/zing/proto/cloud/event_query_v2.proto

package eventquery

import (
	common "github.com/zenoss/zing-proto/v11/go/cloud/common"
	event_context "github.com/zenoss/zing-proto/v11/go/cloud/event_context"
	yamr "github.com/zenoss/zing-proto/v11/go/cloud/yamr"
	event "github.com/zenoss/zing-proto/v11/go/event"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Filter_Operator int32

const (
	Filter_EQUALS                 Filter_Operator = 0
	Filter_LESS_THAN              Filter_Operator = 1
	Filter_LESS_THEN_OR_EQUALS    Filter_Operator = 2
	Filter_GREATER_THAN           Filter_Operator = 3
	Filter_GREATER_THAN_OR_EQUALS Filter_Operator = 4
	Filter_REGEX                  Filter_Operator = 5
	Filter_PREFIX                 Filter_Operator = 6
)

// Enum value maps for Filter_Operator.
var (
	Filter_Operator_name = map[int32]string{
		0: "EQUALS",
		1: "LESS_THAN",
		2: "LESS_THEN_OR_EQUALS",
		3: "GREATER_THAN",
		4: "GREATER_THAN_OR_EQUALS",
		5: "REGEX",
		6: "PREFIX",
	}
	Filter_Operator_value = map[string]int32{
		"EQUALS":                 0,
		"LESS_THAN":              1,
		"LESS_THEN_OR_EQUALS":    2,
		"GREATER_THAN":           3,
		"GREATER_THAN_OR_EQUALS": 4,
		"REGEX":                  5,
		"PREFIX":                 6,
	}
)

func (x Filter_Operator) Enum() *Filter_Operator {
	p := new(Filter_Operator)
	*p = x
	return p
}

func (x Filter_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Filter_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_enumTypes[0].Descriptor()
}

func (Filter_Operator) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_event_query_v2_proto_enumTypes[0]
}

func (x Filter_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Filter_Operator.Descriptor instead.
func (Filter_Operator) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{0, 0}
}

type PageInput_Direction int32

const (
	PageInput_FORWARD  PageInput_Direction = 0
	PageInput_BACKWARD PageInput_Direction = 1
)

// Enum value maps for PageInput_Direction.
var (
	PageInput_Direction_name = map[int32]string{
		0: "FORWARD",
		1: "BACKWARD",
	}
	PageInput_Direction_value = map[string]int32{
		"FORWARD":  0,
		"BACKWARD": 1,
	}
)

func (x PageInput_Direction) Enum() *PageInput_Direction {
	p := new(PageInput_Direction)
	*p = x
	return p
}

func (x PageInput_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PageInput_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_enumTypes[1].Descriptor()
}

func (PageInput_Direction) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_event_query_v2_proto_enumTypes[1]
}

func (x PageInput_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PageInput_Direction.Descriptor instead.
func (PageInput_Direction) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{9, 0}
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string          `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Operator Filter_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=zenoss.cloud.eventQuery.v2.Filter_Operator" json:"operator,omitempty"`
	Value    *common.Scalar  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Filter) GetOperator() Filter_Operator {
	if x != nil {
		return x.Operator
	}
	return Filter_EQUALS
}

func (x *Filter) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type In struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string              `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Values *common.ScalarArray `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *In) Reset() {
	*x = In{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *In) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*In) ProtoMessage() {}

func (x *In) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use In.ProtoReflect.Descriptor instead.
func (*In) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{1}
}

func (x *In) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *In) GetValues() *common.ScalarArray {
	if x != nil {
		return x.Values
	}
	return nil
}

type WithScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scope:
	//	*WithScope_EntityScopeCursor
	//	*WithScope_EntityIds
	Scope isWithScope_Scope `protobuf_oneof:"scope"`
}

func (x *WithScope) Reset() {
	*x = WithScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithScope) ProtoMessage() {}

func (x *WithScope) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithScope.ProtoReflect.Descriptor instead.
func (*WithScope) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{2}
}

func (m *WithScope) GetScope() isWithScope_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *WithScope) GetEntityScopeCursor() string {
	if x, ok := x.GetScope().(*WithScope_EntityScopeCursor); ok {
		return x.EntityScopeCursor
	}
	return ""
}

func (x *WithScope) GetEntityIds() *WithScope_WithIds {
	if x, ok := x.GetScope().(*WithScope_EntityIds); ok {
		return x.EntityIds
	}
	return nil
}

type isWithScope_Scope interface {
	isWithScope_Scope()
}

type WithScope_EntityScopeCursor struct {
	EntityScopeCursor string `protobuf:"bytes,1,opt,name=entity_scope_cursor,json=entityScopeCursor,proto3,oneof"`
}

type WithScope_EntityIds struct {
	EntityIds *WithScope_WithIds `protobuf:"bytes,2,opt,name=entity_ids,json=entityIds,proto3,oneof"`
}

func (*WithScope_EntityScopeCursor) isWithScope_Scope() {}

func (*WithScope_EntityIds) isWithScope_Scope() {}

type Clause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Clause:
	//	*Clause_And_
	//	*Clause_Or_
	//	*Clause_Not_
	//	*Clause_Filter
	//	*Clause_In
	//	*Clause_WithScope
	Clause isClause_Clause `protobuf_oneof:"clause"`
}

func (x *Clause) Reset() {
	*x = Clause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause) ProtoMessage() {}

func (x *Clause) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause.ProtoReflect.Descriptor instead.
func (*Clause) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{3}
}

func (m *Clause) GetClause() isClause_Clause {
	if m != nil {
		return m.Clause
	}
	return nil
}

func (x *Clause) GetAnd() *Clause_And {
	if x, ok := x.GetClause().(*Clause_And_); ok {
		return x.And
	}
	return nil
}

func (x *Clause) GetOr() *Clause_Or {
	if x, ok := x.GetClause().(*Clause_Or_); ok {
		return x.Or
	}
	return nil
}

func (x *Clause) GetNot() *Clause_Not {
	if x, ok := x.GetClause().(*Clause_Not_); ok {
		return x.Not
	}
	return nil
}

func (x *Clause) GetFilter() *Filter {
	if x, ok := x.GetClause().(*Clause_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *Clause) GetIn() *In {
	if x, ok := x.GetClause().(*Clause_In); ok {
		return x.In
	}
	return nil
}

func (x *Clause) GetWithScope() *WithScope {
	if x, ok := x.GetClause().(*Clause_WithScope); ok {
		return x.WithScope
	}
	return nil
}

type isClause_Clause interface {
	isClause_Clause()
}

type Clause_And_ struct {
	And *Clause_And `protobuf:"bytes,3,opt,name=and,proto3,oneof"`
}

type Clause_Or_ struct {
	Or *Clause_Or `protobuf:"bytes,4,opt,name=or,proto3,oneof"`
}

type Clause_Not_ struct {
	Not *Clause_Not `protobuf:"bytes,5,opt,name=not,proto3,oneof"`
}

type Clause_Filter struct {
	Filter *Filter `protobuf:"bytes,6,opt,name=filter,proto3,oneof"`
}

type Clause_In struct {
	In *In `protobuf:"bytes,7,opt,name=in,proto3,oneof"`
}

type Clause_WithScope struct {
	WithScope *WithScope `protobuf:"bytes,8,opt,name=with_scope,json=withScope,proto3,oneof"`
}

func (*Clause_And_) isClause_Clause() {}

func (*Clause_Or_) isClause_Clause() {}

func (*Clause_Not_) isClause_Clause() {}

func (*Clause_Filter) isClause_Clause() {}

func (*Clause_In) isClause_Clause() {}

func (*Clause_WithScope) isClause_Clause() {}

// FieldInput specifies a field to be included in a query result.
type FieldInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *FieldInput) Reset() {
	*x = FieldInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldInput) ProtoMessage() {}

func (x *FieldInput) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldInput.ProtoReflect.Descriptor instead.
func (*FieldInput) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{4}
}

func (x *FieldInput) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants    []string          `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	TimeRange  *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Clause     *Clause           `protobuf:"bytes,3,opt,name=clause,proto3" json:"clause,omitempty"`
	Severities []event.Severity  `protobuf:"varint,4,rep,packed,name=severities,proto3,enum=events.Severity" json:"severities,omitempty"`
	Statuses   []event.Status    `protobuf:"varint,5,rep,packed,name=statuses,proto3,enum=events.Status" json:"statuses,omitempty"`
	// If set, limits the number of occurrence results returned by the service
	OccurrenceLimit int32                    `protobuf:"varint,6,opt,name=occurrence_limit,json=occurrenceLimit,proto3" json:"occurrence_limit,omitempty"`
	SortBy          []*common.SortBy         `protobuf:"bytes,7,rep,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	PageInput       *event_context.PageInput `protobuf:"bytes,8,opt,name=page_input,json=pageInput,proto3" json:"page_input,omitempty"`
	// If true, return only event ids
	EnableIds bool          `protobuf:"varint,9,opt,name=enable_ids,json=enableIds,proto3" json:"enable_ids,omitempty"`
	Fields    []*FieldInput `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{5}
}

func (x *Query) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *Query) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *Query) GetClause() *Clause {
	if x != nil {
		return x.Clause
	}
	return nil
}

func (x *Query) GetSeverities() []event.Severity {
	if x != nil {
		return x.Severities
	}
	return nil
}

func (x *Query) GetStatuses() []event.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Query) GetOccurrenceLimit() int32 {
	if x != nil {
		return x.OccurrenceLimit
	}
	return 0
}

func (x *Query) GetSortBy() []*common.SortBy {
	if x != nil {
		return x.SortBy
	}
	return nil
}

func (x *Query) GetPageInput() *event_context.PageInput {
	if x != nil {
		return x.PageInput
	}
	return nil
}

func (x *Query) GetEnableIds() bool {
	if x != nil {
		return x.EnableIds
	}
	return false
}

func (x *Query) GetFields() []*FieldInput {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedAt int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{6}
}

func (x *Note) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Note) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Note) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Note) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Note) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Note) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId       string                         `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TimeRange     *common.TimeRange              `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Severity      event.Severity                 `protobuf:"varint,4,opt,name=severity,proto3,enum=events.Severity" json:"severity,omitempty"`
	Status        event.Status                   `protobuf:"varint,5,opt,name=status,proto3,enum=events.Status" json:"status,omitempty"`
	Acknowledged  *wrapperspb.BoolValue          `protobuf:"bytes,6,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	InstanceCount uint64                         `protobuf:"varint,7,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	Notes         []*Note                        `protobuf:"bytes,8,rep,name=notes,proto3" json:"notes,omitempty"`
	Metadata      map[string]*common.ScalarArray `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Occurrence) Reset() {
	*x = Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occurrence) ProtoMessage() {}

func (x *Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occurrence.ProtoReflect.Descriptor instead.
func (*Occurrence) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{7}
}

func (x *Occurrence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Occurrence) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Occurrence) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *Occurrence) GetSeverity() event.Severity {
	if x != nil {
		return x.Severity
	}
	return event.Severity_SEVERITY_DEFAULT
}

func (x *Occurrence) GetStatus() event.Status {
	if x != nil {
		return x.Status
	}
	return event.Status_STATUS_DEFAULT
}

func (x *Occurrence) GetAcknowledged() *wrapperspb.BoolValue {
	if x != nil {
		return x.Acknowledged
	}
	return nil
}

func (x *Occurrence) GetInstanceCount() uint64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *Occurrence) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Occurrence) GetMetadata() map[string]*common.ScalarArray {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EventResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Entity      string                    `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	Name        string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Dimensions  map[string]*common.Scalar `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count       int64                     `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Occurrences []*Occurrence             `protobuf:"bytes,6,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
}

func (x *EventResult) Reset() {
	*x = EventResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResult) ProtoMessage() {}

func (x *EventResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResult.ProtoReflect.Descriptor instead.
func (*EventResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{8}
}

func (x *EventResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventResult) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *EventResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventResult) GetDimensions() map[string]*common.Scalar {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *EventResult) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EventResult) GetOccurrences() []*Occurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

type PageInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor    string              `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction PageInput_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=zenoss.cloud.eventQuery.v2.PageInput_Direction" json:"direction,omitempty"`
	Limit     int64               `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PageInput) Reset() {
	*x = PageInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInput) ProtoMessage() {}

func (x *PageInput) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInput.ProtoReflect.Descriptor instead.
func (*PageInput) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{9}
}

func (x *PageInput) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *PageInput) GetDirection() PageInput_Direction {
	if x != nil {
		return x.Direction
	}
	return PageInput_FORWARD
}

func (x *PageInput) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // TODO: explore replacing fields with fieldMask
}

func (x *GetEventRequest) Reset() {
	*x = GetEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventRequest) ProtoMessage() {}

func (x *GetEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventRequest.ProtoReflect.Descriptor instead.
func (*GetEventRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{10}
}

func (x *GetEventRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetEventRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *EventResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetEventResponse) Reset() {
	*x = GetEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventResponse) ProtoMessage() {}

func (x *GetEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventResponse.ProtoReflect.Descriptor instead.
func (*GetEventResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{11}
}

func (x *GetEventResponse) GetResult() *EventResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"` // TODO: explore replacing fields with fieldMask
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{12}
}

func (x *GetEventsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetEventsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*EventResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{13}
}

func (x *GetEventsResponse) GetResults() []*EventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *Query     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	PageInput *PageInput `protobuf:"bytes,2,opt,name=page_input,json=pageInput,proto3" json:"page_input,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{14}
}

func (x *SearchRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchRequest) GetPageInput() *PageInput {
	if x != nil {
		return x.PageInput
	}
	return nil
}

type SearchStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchStreamRequest) Reset() {
	*x = SearchStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStreamRequest) ProtoMessage() {}

func (x *SearchStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStreamRequest.ProtoReflect.Descriptor instead.
func (*SearchStreamRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{15}
}

func (x *SearchStreamRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results  []*EventResult   `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	PageInfo *common.PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{16}
}

func (x *SearchResponse) GetResults() []*EventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResponse) GetPageInfo() *common.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type CountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          *Query      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Fields         *yamr.Field `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	CountInstances bool        `protobuf:"varint,3,opt,name=count_instances,json=countInstances,proto3" json:"count_instances,omitempty"`
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{17}
}

func (x *CountRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CountRequest) GetFields() *yamr.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CountRequest) GetCountInstances() bool {
	if x != nil {
		return x.CountInstances
	}
	return false
}

type CountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Count uint64         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountResult) Reset() {
	*x = CountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResult) ProtoMessage() {}

func (x *CountResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResult.ProtoReflect.Descriptor instead.
func (*CountResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{18}
}

func (x *CountResult) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CountResult) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string         `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Counts []*CountResult `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{19}
}

func (x *CountResponse) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *CountResponse) GetCounts() []*CountResult {
	if x != nil {
		return x.Counts
	}
	return nil
}

type FrequencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          *Query        `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Fields         []*yamr.Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupBy        []*yamr.Field `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Downsample     int64         `protobuf:"varint,4,opt,name=downsample,proto3" json:"downsample,omitempty"`
	PersistCounts  bool          `protobuf:"varint,5,opt,name=persist_counts,json=persistCounts,proto3" json:"persist_counts,omitempty"`
	CountInstances bool          `protobuf:"varint,6,opt,name=count_instances,json=countInstances,proto3" json:"count_instances,omitempty"`
}

func (x *FrequencyRequest) Reset() {
	*x = FrequencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyRequest) ProtoMessage() {}

func (x *FrequencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyRequest.ProtoReflect.Descriptor instead.
func (*FrequencyRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{20}
}

func (x *FrequencyRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FrequencyRequest) GetFields() []*yamr.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FrequencyRequest) GetGroupBy() []*yamr.Field {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *FrequencyRequest) GetDownsample() int64 {
	if x != nil {
		return x.Downsample
	}
	return 0
}

func (x *FrequencyRequest) GetPersistCounts() bool {
	if x != nil {
		return x.PersistCounts
	}
	return false
}

func (x *FrequencyRequest) GetCountInstances() bool {
	if x != nil {
		return x.CountInstances
	}
	return false
}

type FrequencyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    map[string]*common.Scalar `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values []int64                   `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FrequencyResult) Reset() {
	*x = FrequencyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyResult) ProtoMessage() {}

func (x *FrequencyResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyResult.ProtoReflect.Descriptor instead.
func (*FrequencyResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{21}
}

func (x *FrequencyResult) GetKey() map[string]*common.Scalar {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FrequencyResult) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FrequencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []int64            `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Results    []*FrequencyResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FrequencyResponse) Reset() {
	*x = FrequencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyResponse) ProtoMessage() {}

func (x *FrequencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyResponse.ProtoReflect.Descriptor instead.
func (*FrequencyResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{22}
}

func (x *FrequencyResponse) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *FrequencyResponse) GetResults() []*FrequencyResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type EventsWithCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query           *Query                                     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	EventParams     *EventsWithCountsRequest_EventParams       `protobuf:"bytes,2,opt,name=event_params,json=eventParams,proto3" json:"event_params,omitempty"`
	CountsParams    *EventsWithCountsRequest_CountParams       `protobuf:"bytes,3,opt,name=counts_params,json=countsParams,proto3" json:"counts_params,omitempty"`
	FrequencyParams []*EventsWithCountsRequest_FrequencyParams `protobuf:"bytes,4,rep,name=frequency_params,json=frequencyParams,proto3" json:"frequency_params,omitempty"`
	Limit           uint64                                     `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *EventsWithCountsRequest) Reset() {
	*x = EventsWithCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest) ProtoMessage() {}

func (x *EventsWithCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{23}
}

func (x *EventsWithCountsRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *EventsWithCountsRequest) GetEventParams() *EventsWithCountsRequest_EventParams {
	if x != nil {
		return x.EventParams
	}
	return nil
}

func (x *EventsWithCountsRequest) GetCountsParams() *EventsWithCountsRequest_CountParams {
	if x != nil {
		return x.CountsParams
	}
	return nil
}

func (x *EventsWithCountsRequest) GetFrequencyParams() []*EventsWithCountsRequest_FrequencyParams {
	if x != nil {
		return x.FrequencyParams
	}
	return nil
}

func (x *EventsWithCountsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type EventsWithCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventResults     []*EventResult                              `protobuf:"bytes,1,rep,name=event_results,json=eventResults,proto3" json:"event_results,omitempty"`
	CountResults     *CountResponse                              `protobuf:"bytes,2,opt,name=count_results,json=countResults,proto3" json:"count_results,omitempty"`
	FrequencyResults []*EventsWithCountsResponse_FrequencyResult `protobuf:"bytes,3,rep,name=frequency_results,json=frequencyResults,proto3" json:"frequency_results,omitempty"`
}

func (x *EventsWithCountsResponse) Reset() {
	*x = EventsWithCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse) ProtoMessage() {}

func (x *EventsWithCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{24}
}

func (x *EventsWithCountsResponse) GetEventResults() []*EventResult {
	if x != nil {
		return x.EventResults
	}
	return nil
}

func (x *EventsWithCountsResponse) GetCountResults() *CountResponse {
	if x != nil {
		return x.CountResults
	}
	return nil
}

func (x *EventsWithCountsResponse) GetFrequencyResults() []*EventsWithCountsResponse_FrequencyResult {
	if x != nil {
		return x.FrequencyResults
	}
	return nil
}

type WithScope_WithIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *WithScope_WithIds) Reset() {
	*x = WithScope_WithIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithScope_WithIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithScope_WithIds) ProtoMessage() {}

func (x *WithScope_WithIds) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithScope_WithIds.ProtoReflect.Descriptor instead.
func (*WithScope_WithIds) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WithScope_WithIds) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Clause_And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clauses []*Clause `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`
}

func (x *Clause_And) Reset() {
	*x = Clause_And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clause_And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause_And) ProtoMessage() {}

func (x *Clause_And) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause_And.ProtoReflect.Descriptor instead.
func (*Clause_And) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Clause_And) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

type Clause_Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clauses []*Clause `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`
}

func (x *Clause_Or) Reset() {
	*x = Clause_Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clause_Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause_Or) ProtoMessage() {}

func (x *Clause_Or) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause_Or.ProtoReflect.Descriptor instead.
func (*Clause_Or) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Clause_Or) GetClauses() []*Clause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

type Clause_Not struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clause *Clause `protobuf:"bytes,1,opt,name=clause,proto3" json:"clause,omitempty"`
}

func (x *Clause_Not) Reset() {
	*x = Clause_Not{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clause_Not) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clause_Not) ProtoMessage() {}

func (x *Clause_Not) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clause_Not.ProtoReflect.Descriptor instead.
func (*Clause_Not) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Clause_Not) GetClause() *Clause {
	if x != nil {
		return x.Clause
	}
	return nil
}

type EventsWithCountsRequest_EventParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields we want in our result. If omitted, results will include predetermined information
	ResultFields []string `protobuf:"bytes,1,rep,name=result_fields,json=resultFields,proto3" json:"result_fields,omitempty"`
}

func (x *EventsWithCountsRequest_EventParams) Reset() {
	*x = EventsWithCountsRequest_EventParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest_EventParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest_EventParams) ProtoMessage() {}

func (x *EventsWithCountsRequest_EventParams) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest_EventParams.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest_EventParams) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{23, 0}
}

func (x *EventsWithCountsRequest_EventParams) GetResultFields() []string {
	if x != nil {
		return x.ResultFields
	}
	return nil
}

type EventsWithCountsRequest_CountParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *yamr.Field `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *EventsWithCountsRequest_CountParams) Reset() {
	*x = EventsWithCountsRequest_CountParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest_CountParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest_CountParams) ProtoMessage() {}

func (x *EventsWithCountsRequest_CountParams) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest_CountParams.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest_CountParams) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{23, 1}
}

func (x *EventsWithCountsRequest_CountParams) GetField() *yamr.Field {
	if x != nil {
		return x.Field
	}
	return nil
}

type EventsWithCountsRequest_FrequencyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields        []*yamr.Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	GroupBy       []*yamr.Field `protobuf:"bytes,2,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Downsample    int64         `protobuf:"varint,3,opt,name=downsample,proto3" json:"downsample,omitempty"`
	PersistCounts bool          `protobuf:"varint,4,opt,name=persist_counts,json=persistCounts,proto3" json:"persist_counts,omitempty"`
}

func (x *EventsWithCountsRequest_FrequencyParams) Reset() {
	*x = EventsWithCountsRequest_FrequencyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsRequest_FrequencyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsRequest_FrequencyParams) ProtoMessage() {}

func (x *EventsWithCountsRequest_FrequencyParams) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsRequest_FrequencyParams.ProtoReflect.Descriptor instead.
func (*EventsWithCountsRequest_FrequencyParams) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{23, 2}
}

func (x *EventsWithCountsRequest_FrequencyParams) GetFields() []*yamr.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *EventsWithCountsRequest_FrequencyParams) GetGroupBy() []*yamr.Field {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *EventsWithCountsRequest_FrequencyParams) GetDownsample() int64 {
	if x != nil {
		return x.Downsample
	}
	return 0
}

func (x *EventsWithCountsRequest_FrequencyParams) GetPersistCounts() bool {
	if x != nil {
		return x.PersistCounts
	}
	return false
}

type EventsWithCountsResponse_FrequencyKVs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    map[string]*common.Scalar `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Values []int64                   `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *EventsWithCountsResponse_FrequencyKVs) Reset() {
	*x = EventsWithCountsResponse_FrequencyKVs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse_FrequencyKVs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse_FrequencyKVs) ProtoMessage() {}

func (x *EventsWithCountsResponse_FrequencyKVs) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse_FrequencyKVs.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse_FrequencyKVs) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{24, 0}
}

func (x *EventsWithCountsResponse_FrequencyKVs) GetKey() map[string]*common.Scalar {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventsWithCountsResponse_FrequencyKVs) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type EventsWithCountsResponse_FrequencyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamps []int64                                  `protobuf:"varint,1,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Results    []*EventsWithCountsResponse_FrequencyKVs `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *EventsWithCountsResponse_FrequencyResult) Reset() {
	*x = EventsWithCountsResponse_FrequencyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsWithCountsResponse_FrequencyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsWithCountsResponse_FrequencyResult) ProtoMessage() {}

func (x *EventsWithCountsResponse_FrequencyResult) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsWithCountsResponse_FrequencyResult.ProtoReflect.Descriptor instead.
func (*EventsWithCountsResponse_FrequencyResult) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP(), []int{24, 1}
}

func (x *EventsWithCountsResponse_FrequencyResult) GetTimestamps() []int64 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *EventsWithCountsResponse_FrequencyResult) GetResults() []*EventsWithCountsResponse_FrequencyKVs {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_zenoss_zing_proto_cloud_event_query_v2_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79, 0x61, 0x6d, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x45, 0x4e, 0x5f, 0x4f, 0x52,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x06, 0x22, 0x4d,
	0x0a, 0x02, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb3, 0x01,
	0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x4e, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x1b, 0x0a,
	0x07, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0xd3, 0x04, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e,
	0x41, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x02, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x48, 0x00, 0x52,
	0x02, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x46, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x43, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12, 0x3c,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x02,
	0x4f, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x1a, 0x41, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x22, 0x0a, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xe4, 0x03,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x36, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x8e, 0x04, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x56, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x57, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0,
	0x01, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x26, 0x0a, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x22, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x98, 0x02, 0x0a,
	0x10, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x08, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x11, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x45,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc8, 0x05, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0c, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x64,
	0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x6e, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x32, 0x0a, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x38,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0x91, 0x05, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xd2,
	0x01, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x56, 0x73, 0x12,
	0x5c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x56, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x56, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x42, 0x60, 0x0a, 0x26, 0x6f, 0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x01,
	0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescData = file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_event_query_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_zenoss_zing_proto_cloud_event_query_v2_proto_goTypes = []interface{}{
	(Filter_Operator)(0),             // 0: zenoss.cloud.eventQuery.v2.Filter.Operator
	(PageInput_Direction)(0),         // 1: zenoss.cloud.eventQuery.v2.PageInput.Direction
	(*Filter)(nil),                   // 2: zenoss.cloud.eventQuery.v2.Filter
	(*In)(nil),                       // 3: zenoss.cloud.eventQuery.v2.In
	(*WithScope)(nil),                // 4: zenoss.cloud.eventQuery.v2.WithScope
	(*Clause)(nil),                   // 5: zenoss.cloud.eventQuery.v2.Clause
	(*FieldInput)(nil),               // 6: zenoss.cloud.eventQuery.v2.FieldInput
	(*Query)(nil),                    // 7: zenoss.cloud.eventQuery.v2.Query
	(*Note)(nil),                     // 8: zenoss.cloud.eventQuery.v2.Note
	(*Occurrence)(nil),               // 9: zenoss.cloud.eventQuery.v2.Occurrence
	(*EventResult)(nil),              // 10: zenoss.cloud.eventQuery.v2.EventResult
	(*PageInput)(nil),                // 11: zenoss.cloud.eventQuery.v2.PageInput
	(*GetEventRequest)(nil),          // 12: zenoss.cloud.eventQuery.v2.GetEventRequest
	(*GetEventResponse)(nil),         // 13: zenoss.cloud.eventQuery.v2.GetEventResponse
	(*GetEventsRequest)(nil),         // 14: zenoss.cloud.eventQuery.v2.GetEventsRequest
	(*GetEventsResponse)(nil),        // 15: zenoss.cloud.eventQuery.v2.GetEventsResponse
	(*SearchRequest)(nil),            // 16: zenoss.cloud.eventQuery.v2.SearchRequest
	(*SearchStreamRequest)(nil),      // 17: zenoss.cloud.eventQuery.v2.SearchStreamRequest
	(*SearchResponse)(nil),           // 18: zenoss.cloud.eventQuery.v2.SearchResponse
	(*CountRequest)(nil),             // 19: zenoss.cloud.eventQuery.v2.CountRequest
	(*CountResult)(nil),              // 20: zenoss.cloud.eventQuery.v2.CountResult
	(*CountResponse)(nil),            // 21: zenoss.cloud.eventQuery.v2.CountResponse
	(*FrequencyRequest)(nil),         // 22: zenoss.cloud.eventQuery.v2.FrequencyRequest
	(*FrequencyResult)(nil),          // 23: zenoss.cloud.eventQuery.v2.FrequencyResult
	(*FrequencyResponse)(nil),        // 24: zenoss.cloud.eventQuery.v2.FrequencyResponse
	(*EventsWithCountsRequest)(nil),  // 25: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest
	(*EventsWithCountsResponse)(nil), // 26: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse
	(*WithScope_WithIds)(nil),        // 27: zenoss.cloud.eventQuery.v2.WithScope.WithIds
	(*Clause_And)(nil),               // 28: zenoss.cloud.eventQuery.v2.Clause.And
	(*Clause_Or)(nil),                // 29: zenoss.cloud.eventQuery.v2.Clause.Or
	(*Clause_Not)(nil),               // 30: zenoss.cloud.eventQuery.v2.Clause.Not
	nil,                              // 31: zenoss.cloud.eventQuery.v2.Occurrence.MetadataEntry
	nil,                              // 32: zenoss.cloud.eventQuery.v2.EventResult.DimensionsEntry
	nil,                              // 33: zenoss.cloud.eventQuery.v2.FrequencyResult.KeyEntry
	(*EventsWithCountsRequest_EventParams)(nil),      // 34: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.EventParams
	(*EventsWithCountsRequest_CountParams)(nil),      // 35: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.CountParams
	(*EventsWithCountsRequest_FrequencyParams)(nil),  // 36: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.FrequencyParams
	(*EventsWithCountsResponse_FrequencyKVs)(nil),    // 37: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyKVs
	(*EventsWithCountsResponse_FrequencyResult)(nil), // 38: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyResult
	nil,                             // 39: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyKVs.KeyEntry
	(*common.Scalar)(nil),           // 40: zenoss.cloud.Scalar
	(*common.ScalarArray)(nil),      // 41: zenoss.cloud.ScalarArray
	(*common.TimeRange)(nil),        // 42: zenoss.cloud.TimeRange
	(event.Severity)(0),             // 43: events.Severity
	(event.Status)(0),               // 44: events.Status
	(*common.SortBy)(nil),           // 45: zenoss.cloud.SortBy
	(*event_context.PageInput)(nil), // 46: zenoss.cloud.PageInput
	(*wrapperspb.BoolValue)(nil),    // 47: google.protobuf.BoolValue
	(*common.PageInfo)(nil),         // 48: zenoss.cloud.PageInfo
	(*yamr.Field)(nil),              // 49: zenoss.cloud.Field
}
var file_zenoss_zing_proto_cloud_event_query_v2_proto_depIdxs = []int32{
	0,  // 0: zenoss.cloud.eventQuery.v2.Filter.operator:type_name -> zenoss.cloud.eventQuery.v2.Filter.Operator
	40, // 1: zenoss.cloud.eventQuery.v2.Filter.value:type_name -> zenoss.cloud.Scalar
	41, // 2: zenoss.cloud.eventQuery.v2.In.values:type_name -> zenoss.cloud.ScalarArray
	27, // 3: zenoss.cloud.eventQuery.v2.WithScope.entity_ids:type_name -> zenoss.cloud.eventQuery.v2.WithScope.WithIds
	28, // 4: zenoss.cloud.eventQuery.v2.Clause.and:type_name -> zenoss.cloud.eventQuery.v2.Clause.And
	29, // 5: zenoss.cloud.eventQuery.v2.Clause.or:type_name -> zenoss.cloud.eventQuery.v2.Clause.Or
	30, // 6: zenoss.cloud.eventQuery.v2.Clause.not:type_name -> zenoss.cloud.eventQuery.v2.Clause.Not
	2,  // 7: zenoss.cloud.eventQuery.v2.Clause.filter:type_name -> zenoss.cloud.eventQuery.v2.Filter
	3,  // 8: zenoss.cloud.eventQuery.v2.Clause.in:type_name -> zenoss.cloud.eventQuery.v2.In
	4,  // 9: zenoss.cloud.eventQuery.v2.Clause.with_scope:type_name -> zenoss.cloud.eventQuery.v2.WithScope
	42, // 10: zenoss.cloud.eventQuery.v2.Query.time_range:type_name -> zenoss.cloud.TimeRange
	5,  // 11: zenoss.cloud.eventQuery.v2.Query.clause:type_name -> zenoss.cloud.eventQuery.v2.Clause
	43, // 12: zenoss.cloud.eventQuery.v2.Query.severities:type_name -> events.Severity
	44, // 13: zenoss.cloud.eventQuery.v2.Query.statuses:type_name -> events.Status
	45, // 14: zenoss.cloud.eventQuery.v2.Query.sort_by:type_name -> zenoss.cloud.SortBy
	46, // 15: zenoss.cloud.eventQuery.v2.Query.page_input:type_name -> zenoss.cloud.PageInput
	6,  // 16: zenoss.cloud.eventQuery.v2.Query.fields:type_name -> zenoss.cloud.eventQuery.v2.FieldInput
	42, // 17: zenoss.cloud.eventQuery.v2.Occurrence.time_range:type_name -> zenoss.cloud.TimeRange
	43, // 18: zenoss.cloud.eventQuery.v2.Occurrence.severity:type_name -> events.Severity
	44, // 19: zenoss.cloud.eventQuery.v2.Occurrence.status:type_name -> events.Status
	47, // 20: zenoss.cloud.eventQuery.v2.Occurrence.acknowledged:type_name -> google.protobuf.BoolValue
	8,  // 21: zenoss.cloud.eventQuery.v2.Occurrence.notes:type_name -> zenoss.cloud.eventQuery.v2.Note
	31, // 22: zenoss.cloud.eventQuery.v2.Occurrence.metadata:type_name -> zenoss.cloud.eventQuery.v2.Occurrence.MetadataEntry
	32, // 23: zenoss.cloud.eventQuery.v2.EventResult.dimensions:type_name -> zenoss.cloud.eventQuery.v2.EventResult.DimensionsEntry
	9,  // 24: zenoss.cloud.eventQuery.v2.EventResult.occurrences:type_name -> zenoss.cloud.eventQuery.v2.Occurrence
	1,  // 25: zenoss.cloud.eventQuery.v2.PageInput.direction:type_name -> zenoss.cloud.eventQuery.v2.PageInput.Direction
	10, // 26: zenoss.cloud.eventQuery.v2.GetEventResponse.result:type_name -> zenoss.cloud.eventQuery.v2.EventResult
	10, // 27: zenoss.cloud.eventQuery.v2.GetEventsResponse.results:type_name -> zenoss.cloud.eventQuery.v2.EventResult
	7,  // 28: zenoss.cloud.eventQuery.v2.SearchRequest.query:type_name -> zenoss.cloud.eventQuery.v2.Query
	11, // 29: zenoss.cloud.eventQuery.v2.SearchRequest.page_input:type_name -> zenoss.cloud.eventQuery.v2.PageInput
	7,  // 30: zenoss.cloud.eventQuery.v2.SearchStreamRequest.query:type_name -> zenoss.cloud.eventQuery.v2.Query
	10, // 31: zenoss.cloud.eventQuery.v2.SearchResponse.results:type_name -> zenoss.cloud.eventQuery.v2.EventResult
	48, // 32: zenoss.cloud.eventQuery.v2.SearchResponse.page_info:type_name -> zenoss.cloud.PageInfo
	7,  // 33: zenoss.cloud.eventQuery.v2.CountRequest.query:type_name -> zenoss.cloud.eventQuery.v2.Query
	49, // 34: zenoss.cloud.eventQuery.v2.CountRequest.fields:type_name -> zenoss.cloud.Field
	40, // 35: zenoss.cloud.eventQuery.v2.CountResult.value:type_name -> zenoss.cloud.Scalar
	20, // 36: zenoss.cloud.eventQuery.v2.CountResponse.counts:type_name -> zenoss.cloud.eventQuery.v2.CountResult
	7,  // 37: zenoss.cloud.eventQuery.v2.FrequencyRequest.query:type_name -> zenoss.cloud.eventQuery.v2.Query
	49, // 38: zenoss.cloud.eventQuery.v2.FrequencyRequest.fields:type_name -> zenoss.cloud.Field
	49, // 39: zenoss.cloud.eventQuery.v2.FrequencyRequest.group_by:type_name -> zenoss.cloud.Field
	33, // 40: zenoss.cloud.eventQuery.v2.FrequencyResult.key:type_name -> zenoss.cloud.eventQuery.v2.FrequencyResult.KeyEntry
	23, // 41: zenoss.cloud.eventQuery.v2.FrequencyResponse.results:type_name -> zenoss.cloud.eventQuery.v2.FrequencyResult
	7,  // 42: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.query:type_name -> zenoss.cloud.eventQuery.v2.Query
	34, // 43: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.event_params:type_name -> zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.EventParams
	35, // 44: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.counts_params:type_name -> zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.CountParams
	36, // 45: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.frequency_params:type_name -> zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.FrequencyParams
	10, // 46: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.event_results:type_name -> zenoss.cloud.eventQuery.v2.EventResult
	21, // 47: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.count_results:type_name -> zenoss.cloud.eventQuery.v2.CountResponse
	38, // 48: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.frequency_results:type_name -> zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyResult
	5,  // 49: zenoss.cloud.eventQuery.v2.Clause.And.clauses:type_name -> zenoss.cloud.eventQuery.v2.Clause
	5,  // 50: zenoss.cloud.eventQuery.v2.Clause.Or.clauses:type_name -> zenoss.cloud.eventQuery.v2.Clause
	5,  // 51: zenoss.cloud.eventQuery.v2.Clause.Not.clause:type_name -> zenoss.cloud.eventQuery.v2.Clause
	41, // 52: zenoss.cloud.eventQuery.v2.Occurrence.MetadataEntry.value:type_name -> zenoss.cloud.ScalarArray
	40, // 53: zenoss.cloud.eventQuery.v2.EventResult.DimensionsEntry.value:type_name -> zenoss.cloud.Scalar
	40, // 54: zenoss.cloud.eventQuery.v2.FrequencyResult.KeyEntry.value:type_name -> zenoss.cloud.Scalar
	49, // 55: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.CountParams.field:type_name -> zenoss.cloud.Field
	49, // 56: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.FrequencyParams.fields:type_name -> zenoss.cloud.Field
	49, // 57: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest.FrequencyParams.group_by:type_name -> zenoss.cloud.Field
	39, // 58: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyKVs.key:type_name -> zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyKVs.KeyEntry
	37, // 59: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyResult.results:type_name -> zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyKVs
	40, // 60: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse.FrequencyKVs.KeyEntry.value:type_name -> zenoss.cloud.Scalar
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_event_query_v2_proto_init() }
func file_zenoss_zing_proto_cloud_event_query_v2_proto_init() {
	if File_zenoss_zing_proto_cloud_event_query_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*In); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithScope_WithIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clause_And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clause_Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clause_Not); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest_EventParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest_CountParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsRequest_FrequencyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse_FrequencyKVs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsWithCountsResponse_FrequencyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*WithScope_EntityScopeCursor)(nil),
		(*WithScope_EntityIds)(nil),
	}
	file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Clause_And_)(nil),
		(*Clause_Or_)(nil),
		(*Clause_Not_)(nil),
		(*Clause_Filter)(nil),
		(*Clause_In)(nil),
		(*Clause_WithScope)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_event_query_v2_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_event_query_v2_proto_depIdxs,
		EnumInfos:         file_zenoss_zing_proto_cloud_event_query_v2_proto_enumTypes,
		MessageInfos:      file_zenoss_zing_proto_cloud_event_query_v2_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_event_query_v2_proto = out.File
	file_zenoss_zing_proto_cloud_event_query_v2_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_event_query_v2_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_event_query_v2_proto_depIdxs = nil
}
