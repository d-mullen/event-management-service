// Code generated by mockery v2.13.1. DO NOT EDIT.

package eventquery

import mock "github.com/stretchr/testify/mock"

// mockIsWithScope_Scope is an autogenerated mock type for the isWithScope_Scope type
type mockIsWithScope_Scope struct {
	mock.Mock
}

type mockIsWithScope_Scope_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIsWithScope_Scope) EXPECT() *mockIsWithScope_Scope_Expecter {
	return &mockIsWithScope_Scope_Expecter{mock: &_m.Mock}
}

// isWithScope_Scope provides a mock function with given fields:
func (_m *mockIsWithScope_Scope) isWithScope_Scope() {
	_m.Called()
}

// mockIsWithScope_Scope_isWithScope_Scope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isWithScope_Scope'
type mockIsWithScope_Scope_isWithScope_Scope_Call struct {
	*mock.Call
}

// isWithScope_Scope is a helper method to define mock.On call
func (_e *mockIsWithScope_Scope_Expecter) isWithScope_Scope() *mockIsWithScope_Scope_isWithScope_Scope_Call {
	return &mockIsWithScope_Scope_isWithScope_Scope_Call{Call: _e.mock.On("isWithScope_Scope")}
}

func (_c *mockIsWithScope_Scope_isWithScope_Scope_Call) Run(run func()) *mockIsWithScope_Scope_isWithScope_Scope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockIsWithScope_Scope_isWithScope_Scope_Call) Return() *mockIsWithScope_Scope_isWithScope_Scope_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTnewMockIsWithScope_Scope interface {
	mock.TestingT
	Cleanup(func())
}

// newMockIsWithScope_Scope creates a new instance of mockIsWithScope_Scope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIsWithScope_Scope(t mockConstructorTestingTnewMockIsWithScope_Scope) *mockIsWithScope_Scope {
	mock := &mockIsWithScope_Scope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
