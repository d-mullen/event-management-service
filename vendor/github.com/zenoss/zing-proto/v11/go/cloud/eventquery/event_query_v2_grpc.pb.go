// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: zenoss/zing/proto/cloud/event_query_v2_grpc.proto

package eventquery

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_zenoss_zing_proto_cloud_event_query_v2_grpc_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_rawDesc = []byte{
	0x0a, 0x31, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x32, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a,
	0x2c, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x8a, 0x07, 0x0a, 0x0a,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x7e, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7f, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x06, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x3a, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01,
	0x2a, 0x12, 0x6d, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x2f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x85, 0x01, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x60, 0x0a, 0x26, 0x6f, 0x72, 0x67, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_goTypes = []interface{}{
	(*GetEventRequest)(nil),          // 0: zenoss.cloud.eventQuery.v2.GetEventRequest
	(*GetEventsRequest)(nil),         // 1: zenoss.cloud.eventQuery.v2.GetEventsRequest
	(*SearchRequest)(nil),            // 2: zenoss.cloud.eventQuery.v2.SearchRequest
	(*CountRequest)(nil),             // 3: zenoss.cloud.eventQuery.v2.CountRequest
	(*FrequencyRequest)(nil),         // 4: zenoss.cloud.eventQuery.v2.FrequencyRequest
	(*SearchStreamRequest)(nil),      // 5: zenoss.cloud.eventQuery.v2.SearchStreamRequest
	(*EventsWithCountsRequest)(nil),  // 6: zenoss.cloud.eventQuery.v2.EventsWithCountsRequest
	(*GetEventResponse)(nil),         // 7: zenoss.cloud.eventQuery.v2.GetEventResponse
	(*GetEventsResponse)(nil),        // 8: zenoss.cloud.eventQuery.v2.GetEventsResponse
	(*SearchResponse)(nil),           // 9: zenoss.cloud.eventQuery.v2.SearchResponse
	(*CountResponse)(nil),            // 10: zenoss.cloud.eventQuery.v2.CountResponse
	(*FrequencyResponse)(nil),        // 11: zenoss.cloud.eventQuery.v2.FrequencyResponse
	(*EventsWithCountsResponse)(nil), // 12: zenoss.cloud.eventQuery.v2.EventsWithCountsResponse
}
var file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_depIdxs = []int32{
	0,  // 0: zenoss.cloud.eventQuery.v2.EventQuery.GetEvent:input_type -> zenoss.cloud.eventQuery.v2.GetEventRequest
	1,  // 1: zenoss.cloud.eventQuery.v2.EventQuery.GetEvents:input_type -> zenoss.cloud.eventQuery.v2.GetEventsRequest
	2,  // 2: zenoss.cloud.eventQuery.v2.EventQuery.Search:input_type -> zenoss.cloud.eventQuery.v2.SearchRequest
	3,  // 3: zenoss.cloud.eventQuery.v2.EventQuery.Count:input_type -> zenoss.cloud.eventQuery.v2.CountRequest
	4,  // 4: zenoss.cloud.eventQuery.v2.EventQuery.Frequency:input_type -> zenoss.cloud.eventQuery.v2.FrequencyRequest
	5,  // 5: zenoss.cloud.eventQuery.v2.EventQuery.SearchStream:input_type -> zenoss.cloud.eventQuery.v2.SearchStreamRequest
	6,  // 6: zenoss.cloud.eventQuery.v2.EventQuery.EventsWithCountsStream:input_type -> zenoss.cloud.eventQuery.v2.EventsWithCountsRequest
	7,  // 7: zenoss.cloud.eventQuery.v2.EventQuery.GetEvent:output_type -> zenoss.cloud.eventQuery.v2.GetEventResponse
	8,  // 8: zenoss.cloud.eventQuery.v2.EventQuery.GetEvents:output_type -> zenoss.cloud.eventQuery.v2.GetEventsResponse
	9,  // 9: zenoss.cloud.eventQuery.v2.EventQuery.Search:output_type -> zenoss.cloud.eventQuery.v2.SearchResponse
	10, // 10: zenoss.cloud.eventQuery.v2.EventQuery.Count:output_type -> zenoss.cloud.eventQuery.v2.CountResponse
	11, // 11: zenoss.cloud.eventQuery.v2.EventQuery.Frequency:output_type -> zenoss.cloud.eventQuery.v2.FrequencyResponse
	9,  // 12: zenoss.cloud.eventQuery.v2.EventQuery.SearchStream:output_type -> zenoss.cloud.eventQuery.v2.SearchResponse
	12, // 13: zenoss.cloud.eventQuery.v2.EventQuery.EventsWithCountsStream:output_type -> zenoss.cloud.eventQuery.v2.EventsWithCountsResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_init() }
func file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_init() {
	if File_zenoss_zing_proto_cloud_event_query_v2_grpc_proto != nil {
		return
	}
	file_zenoss_zing_proto_cloud_event_query_v2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_depIdxs,
	}.Build()
	File_zenoss_zing_proto_cloud_event_query_v2_grpc_proto = out.File
	file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_event_query_v2_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventQueryClient is the client API for EventQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventQueryClient interface {
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error)
	SearchStream(ctx context.Context, in *SearchStreamRequest, opts ...grpc.CallOption) (EventQuery_SearchStreamClient, error)
	EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventQuery_EventsWithCountsStreamClient, error)
}

type eventQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventQueryClient(cc grpc.ClientConnInterface) EventQueryClient {
	return &eventQueryClient{cc}
}

func (c *eventQueryClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) Frequency(ctx context.Context, in *FrequencyRequest, opts ...grpc.CallOption) (*FrequencyResponse, error) {
	out := new(FrequencyResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.eventQuery.v2.EventQuery/Frequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventQueryClient) SearchStream(ctx context.Context, in *SearchStreamRequest, opts ...grpc.CallOption) (EventQuery_SearchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventQuery_serviceDesc.Streams[0], "/zenoss.cloud.eventQuery.v2.EventQuery/SearchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventQuerySearchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventQuery_SearchStreamClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type eventQuerySearchStreamClient struct {
	grpc.ClientStream
}

func (x *eventQuerySearchStreamClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventQueryClient) EventsWithCountsStream(ctx context.Context, in *EventsWithCountsRequest, opts ...grpc.CallOption) (EventQuery_EventsWithCountsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventQuery_serviceDesc.Streams[1], "/zenoss.cloud.eventQuery.v2.EventQuery/EventsWithCountsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventQueryEventsWithCountsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventQuery_EventsWithCountsStreamClient interface {
	Recv() (*EventsWithCountsResponse, error)
	grpc.ClientStream
}

type eventQueryEventsWithCountsStreamClient struct {
	grpc.ClientStream
}

func (x *eventQueryEventsWithCountsStreamClient) Recv() (*EventsWithCountsResponse, error) {
	m := new(EventsWithCountsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventQueryServer is the server API for EventQuery service.
type EventQueryServer interface {
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error)
	SearchStream(*SearchStreamRequest, EventQuery_SearchStreamServer) error
	EventsWithCountsStream(*EventsWithCountsRequest, EventQuery_EventsWithCountsStreamServer) error
}

// UnimplementedEventQueryServer can be embedded to have forward compatible implementations.
type UnimplementedEventQueryServer struct {
}

func (*UnimplementedEventQueryServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (*UnimplementedEventQueryServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (*UnimplementedEventQueryServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedEventQueryServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedEventQueryServer) Frequency(context.Context, *FrequencyRequest) (*FrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Frequency not implemented")
}
func (*UnimplementedEventQueryServer) SearchStream(*SearchStreamRequest, EventQuery_SearchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchStream not implemented")
}
func (*UnimplementedEventQueryServer) EventsWithCountsStream(*EventsWithCountsRequest, EventQuery_EventsWithCountsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsWithCountsStream not implemented")
}

func RegisterEventQueryServer(s *grpc.Server, srv EventQueryServer) {
	s.RegisterService(&_EventQuery_serviceDesc, srv)
}

func _EventQuery_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_Frequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventQueryServer).Frequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.eventQuery.v2.EventQuery/Frequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventQueryServer).Frequency(ctx, req.(*FrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventQuery_SearchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventQueryServer).SearchStream(m, &eventQuerySearchStreamServer{stream})
}

type EventQuery_SearchStreamServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type eventQuerySearchStreamServer struct {
	grpc.ServerStream
}

func (x *eventQuerySearchStreamServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventQuery_EventsWithCountsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsWithCountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventQueryServer).EventsWithCountsStream(m, &eventQueryEventsWithCountsStreamServer{stream})
}

type EventQuery_EventsWithCountsStreamServer interface {
	Send(*EventsWithCountsResponse) error
	grpc.ServerStream
}

type eventQueryEventsWithCountsStreamServer struct {
	grpc.ServerStream
}

func (x *eventQueryEventsWithCountsStreamServer) Send(m *EventsWithCountsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.eventQuery.v2.EventQuery",
	HandlerType: (*EventQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _EventQuery_GetEvent_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _EventQuery_GetEvents_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _EventQuery_Search_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _EventQuery_Count_Handler,
		},
		{
			MethodName: "Frequency",
			Handler:    _EventQuery_Frequency_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchStream",
			Handler:       _EventQuery_SearchStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsWithCountsStream",
			Handler:       _EventQuery_EventsWithCountsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/event_query_v2_grpc.proto",
}
