// Code generated by mockery v2.12.2. DO NOT EDIT.

package event_context

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// mockIsFilter_Op is an autogenerated mock type for the isFilter_Op type
type mockIsFilter_Op struct {
	mock.Mock
}

type mockIsFilter_Op_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIsFilter_Op) EXPECT() *mockIsFilter_Op_Expecter {
	return &mockIsFilter_Op_Expecter{mock: &_m.Mock}
}

// isFilter_Op provides a mock function with given fields:
func (_m *mockIsFilter_Op) isFilter_Op() {
	_m.Called()
}

// mockIsFilter_Op_isFilter_Op_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isFilter_Op'
type mockIsFilter_Op_isFilter_Op_Call struct {
	*mock.Call
}

// isFilter_Op is a helper method to define mock.On call
func (_e *mockIsFilter_Op_Expecter) isFilter_Op() *mockIsFilter_Op_isFilter_Op_Call {
	return &mockIsFilter_Op_isFilter_Op_Call{Call: _e.mock.On("isFilter_Op")}
}

func (_c *mockIsFilter_Op_isFilter_Op_Call) Run(run func()) *mockIsFilter_Op_isFilter_Op_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockIsFilter_Op_isFilter_Op_Call) Return() *mockIsFilter_Op_isFilter_Op_Call {
	_c.Call.Return()
	return _c
}

// newMockIsFilter_Op creates a new instance of mockIsFilter_Op. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func newMockIsFilter_Op(t testing.TB) *mockIsFilter_Op {
	mock := &mockIsFilter_Op{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
