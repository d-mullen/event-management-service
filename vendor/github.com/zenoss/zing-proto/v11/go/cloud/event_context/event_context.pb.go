// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.5.1
// source: zenoss/zing/proto/cloud/event_context.proto

package event_context

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "github.com/zenoss/zing-proto/v11/go/cloud/common"
	event "github.com/zenoss/zing-proto/v11/go/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageInput_Direction int32

const (
	PageInput_FORWARD  PageInput_Direction = 0
	PageInput_BACKWARD PageInput_Direction = 1
)

// Enum value maps for PageInput_Direction.
var (
	PageInput_Direction_name = map[int32]string{
		0: "FORWARD",
		1: "BACKWARD",
	}
	PageInput_Direction_value = map[string]int32{
		"FORWARD":  0,
		"BACKWARD": 1,
	}
)

func (x PageInput_Direction) Enum() *PageInput_Direction {
	p := new(PageInput_Direction)
	*p = x
	return p
}

func (x PageInput_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PageInput_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_zenoss_zing_proto_cloud_event_context_proto_enumTypes[0].Descriptor()
}

func (PageInput_Direction) Type() protoreflect.EnumType {
	return &file_zenoss_zing_proto_cloud_event_context_proto_enumTypes[0]
}

func (x PageInput_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PageInput_Direction.Descriptor instead.
func (PageInput_Direction) EnumDescriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{16, 0}
}

// An EventOccurrenceSeries is a collection of contextual data for
// quickly accessing event time series data.
type EventOccurrenceSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant      string                              `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Entity      string                              `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
	Dimensions  map[string]*common.Scalar           `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Occurrences []*EventOccurrenceSeries_Occurrence `protobuf:"bytes,5,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
}

func (x *EventOccurrenceSeries) Reset() {
	*x = EventOccurrenceSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventOccurrenceSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOccurrenceSeries) ProtoMessage() {}

func (x *EventOccurrenceSeries) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOccurrenceSeries.ProtoReflect.Descriptor instead.
func (*EventOccurrenceSeries) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{0}
}

func (x *EventOccurrenceSeries) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventOccurrenceSeries) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *EventOccurrenceSeries) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *EventOccurrenceSeries) GetDimensions() map[string]*common.Scalar {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *EventOccurrenceSeries) GetOccurrences() []*EventOccurrenceSeries_Occurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

type OccurrenceNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreatedBy string `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy string `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedAt int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *OccurrenceNote) Reset() {
	*x = OccurrenceNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OccurrenceNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccurrenceNote) ProtoMessage() {}

func (x *OccurrenceNote) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OccurrenceNote.ProtoReflect.Descriptor instead.
func (*OccurrenceNote) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{1}
}

func (x *OccurrenceNote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OccurrenceNote) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OccurrenceNote) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *OccurrenceNote) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *OccurrenceNote) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OccurrenceNote) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PutEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *event.Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *PutEventRequest) Reset() {
	*x = PutEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventRequest) ProtoMessage() {}

func (x *PutEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventRequest.ProtoReflect.Descriptor instead.
func (*PutEventRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{2}
}

func (x *PutEventRequest) GetEvent() *event.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type PutEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutEventResponse) Reset() {
	*x = PutEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventResponse) ProtoMessage() {}

func (x *PutEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventResponse.ProtoReflect.Descriptor instead.
func (*PutEventResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{3}
}

type PutEventBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*event.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *PutEventBulkRequest) Reset() {
	*x = PutEventBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventBulkRequest) ProtoMessage() {}

func (x *PutEventBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventBulkRequest.ProtoReflect.Descriptor instead.
func (*PutEventBulkRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{4}
}

func (x *PutEventBulkRequest) GetEvents() []*event.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type PutEventBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutEventBulkResponse) Reset() {
	*x = PutEventBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutEventBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutEventBulkResponse) ProtoMessage() {}

func (x *PutEventBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutEventBulkResponse.ProtoReflect.Descriptor instead.
func (*PutEventBulkResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{5}
}

type UpdateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string                      `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OccurrenceId  string                      `protobuf:"bytes,2,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
	StatusWrapper *UpdateEventRequest_Wrapper `protobuf:"bytes,3,opt,name=status_wrapper,json=statusWrapper,proto3" json:"status_wrapper,omitempty"`
	Acknowledged  *wrappers.BoolValue         `protobuf:"bytes,4,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	NoteId        string                      `protobuf:"bytes,5,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Note          string                      `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *UpdateEventRequest) Reset() {
	*x = UpdateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRequest) ProtoMessage() {}

func (x *UpdateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UpdateEventRequest) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

func (x *UpdateEventRequest) GetStatusWrapper() *UpdateEventRequest_Wrapper {
	if x != nil {
		return x.StatusWrapper
	}
	return nil
}

func (x *UpdateEventRequest) GetAcknowledged() *wrappers.BoolValue {
	if x != nil {
		return x.Acknowledged
	}
	return nil
}

func (x *UpdateEventRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *UpdateEventRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type UpdateEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	NoteId string `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
}

func (x *UpdateEventResponse) Reset() {
	*x = UpdateEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventResponse) ProtoMessage() {}

func (x *UpdateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateEventResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UpdateEventResponse) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Op:
	//	*Filter_Equals_
	//	*Filter_LessThan_
	//	*Filter_LessThanOrEquals_
	//	*Filter_GreaterThan_
	//	*Filter_GreaterThanOrEquals_
	//	*Filter_In_
	//	*Filter_NotEquals_
	//	*Filter_NotIn_
	Op isFilter_Op `protobuf_oneof:"op"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8}
}

func (x *Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *Filter) GetOp() isFilter_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *Filter) GetEquals() *Filter_Equals {
	if x, ok := x.GetOp().(*Filter_Equals_); ok {
		return x.Equals
	}
	return nil
}

func (x *Filter) GetLessThan() *Filter_LessThan {
	if x, ok := x.GetOp().(*Filter_LessThan_); ok {
		return x.LessThan
	}
	return nil
}

func (x *Filter) GetLessThanOrEquals() *Filter_LessThanOrEquals {
	if x, ok := x.GetOp().(*Filter_LessThanOrEquals_); ok {
		return x.LessThanOrEquals
	}
	return nil
}

func (x *Filter) GetGreaterThan() *Filter_GreaterThan {
	if x, ok := x.GetOp().(*Filter_GreaterThan_); ok {
		return x.GreaterThan
	}
	return nil
}

func (x *Filter) GetGreaterThanOrEquals() *Filter_GreaterThanOrEquals {
	if x, ok := x.GetOp().(*Filter_GreaterThanOrEquals_); ok {
		return x.GreaterThanOrEquals
	}
	return nil
}

func (x *Filter) GetIn() *Filter_In {
	if x, ok := x.GetOp().(*Filter_In_); ok {
		return x.In
	}
	return nil
}

func (x *Filter) GetNotEquals() *Filter_NotEquals {
	if x, ok := x.GetOp().(*Filter_NotEquals_); ok {
		return x.NotEquals
	}
	return nil
}

func (x *Filter) GetNotIn() *Filter_NotIn {
	if x, ok := x.GetOp().(*Filter_NotIn_); ok {
		return x.NotIn
	}
	return nil
}

type isFilter_Op interface {
	isFilter_Op()
}

type Filter_Equals_ struct {
	Equals *Filter_Equals `protobuf:"bytes,2,opt,name=equals,proto3,oneof"`
}

type Filter_LessThan_ struct {
	LessThan *Filter_LessThan `protobuf:"bytes,3,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type Filter_LessThanOrEquals_ struct {
	LessThanOrEquals *Filter_LessThanOrEquals `protobuf:"bytes,4,opt,name=less_than_or_equals,json=lessThanOrEquals,proto3,oneof"`
}

type Filter_GreaterThan_ struct {
	GreaterThan *Filter_GreaterThan `protobuf:"bytes,5,opt,name=greater_than,json=greaterThan,proto3,oneof"`
}

type Filter_GreaterThanOrEquals_ struct {
	GreaterThanOrEquals *Filter_GreaterThanOrEquals `protobuf:"bytes,6,opt,name=greater_than_or_equals,json=greaterThanOrEquals,proto3,oneof"`
}

type Filter_In_ struct {
	In *Filter_In `protobuf:"bytes,7,opt,name=in,proto3,oneof"`
}

type Filter_NotEquals_ struct {
	NotEquals *Filter_NotEquals `protobuf:"bytes,8,opt,name=not_equals,json=notEquals,proto3,oneof"`
}

type Filter_NotIn_ struct {
	NotIn *Filter_NotIn `protobuf:"bytes,9,opt,name=not_in,json=notIn,proto3,oneof"`
}

func (*Filter_Equals_) isFilter_Op() {}

func (*Filter_LessThan_) isFilter_Op() {}

func (*Filter_LessThanOrEquals_) isFilter_Op() {}

func (*Filter_GreaterThan_) isFilter_Op() {}

func (*Filter_GreaterThanOrEquals_) isFilter_Op() {}

func (*Filter_In_) isFilter_Op() {}

func (*Filter_NotEquals_) isFilter_Op() {}

func (*Filter_NotIn_) isFilter_Op() {}

type ECSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants   []string          `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Event context search results can be further specified by providing one or more filters.
	// If multiple filters are provided they will be AND'ed.
	// To construct a query with an `OR` clause, you can use the `In` type filter with a
	// limit of ten values.
	Filters    []*Filter        `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	Severities []event.Severity `protobuf:"varint,4,rep,packed,name=severities,proto3,enum=events.Severity" json:"severities,omitempty"`
	Statuses   []event.Status   `protobuf:"varint,5,rep,packed,name=statuses,proto3,enum=events.Status" json:"statuses,omitempty"`
	PageInput  *PageInput       `protobuf:"bytes,6,opt,name=page_input,json=pageInput,proto3" json:"page_input,omitempty"`
	// If true, return only event ids
	EnableIds bool `protobuf:"varint,7,opt,name=enable_ids,json=enableIds,proto3" json:"enable_ids,omitempty"`
}

func (x *ECSearchRequest) Reset() {
	*x = ECSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSearchRequest) ProtoMessage() {}

func (x *ECSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSearchRequest.ProtoReflect.Descriptor instead.
func (*ECSearchRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{9}
}

func (x *ECSearchRequest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *ECSearchRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ECSearchRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ECSearchRequest) GetSeverities() []event.Severity {
	if x != nil {
		return x.Severities
	}
	return nil
}

func (x *ECSearchRequest) GetStatuses() []event.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ECSearchRequest) GetPageInput() *PageInput {
	if x != nil {
		return x.PageInput
	}
	return nil
}

func (x *ECSearchRequest) GetEnableIds() bool {
	if x != nil {
		return x.EnableIds
	}
	return false
}

type ECStreamingSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants   []string          `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Event context search results can be further specified by providing one or more filters.
	// If multiple filters are provided they will be AND'ed.
	// To construct a query with an `OR` clause, you can use the `In` type filter with a
	// limit of ten values.
	Filters    []*Filter        `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	Severities []event.Severity `protobuf:"varint,4,rep,packed,name=severities,proto3,enum=events.Severity" json:"severities,omitempty"`
	Statuses   []event.Status   `protobuf:"varint,5,rep,packed,name=statuses,proto3,enum=events.Status" json:"statuses,omitempty"`
	// If set, limits the number of occurrence results returned by the service
	OccurrenceLimit int32 `protobuf:"varint,6,opt,name=occurrence_limit,json=occurrenceLimit,proto3" json:"occurrence_limit,omitempty"`
	// If true, return only event ids
	EnableIds bool `protobuf:"varint,7,opt,name=enable_ids,json=enableIds,proto3" json:"enable_ids,omitempty"`
}

func (x *ECStreamingSearchRequest) Reset() {
	*x = ECStreamingSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECStreamingSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECStreamingSearchRequest) ProtoMessage() {}

func (x *ECStreamingSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECStreamingSearchRequest.ProtoReflect.Descriptor instead.
func (*ECStreamingSearchRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{10}
}

func (x *ECStreamingSearchRequest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *ECStreamingSearchRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ECStreamingSearchRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ECStreamingSearchRequest) GetSeverities() []event.Severity {
	if x != nil {
		return x.Severities
	}
	return nil
}

func (x *ECStreamingSearchRequest) GetStatuses() []event.Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ECStreamingSearchRequest) GetOccurrenceLimit() int32 {
	if x != nil {
		return x.OccurrenceLimit
	}
	return 0
}

func (x *ECStreamingSearchRequest) GetEnableIds() bool {
	if x != nil {
		return x.EnableIds
	}
	return false
}

type ECSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series   []*EventOccurrenceSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	PageInfo *common.PageInfo         `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	EventIds []string                 `protobuf:"bytes,3,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
}

func (x *ECSearchResponse) Reset() {
	*x = ECSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECSearchResponse) ProtoMessage() {}

func (x *ECSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECSearchResponse.ProtoReflect.Descriptor instead.
func (*ECSearchResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{11}
}

func (x *ECSearchResponse) GetSeries() []*EventOccurrenceSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *ECSearchResponse) GetPageInfo() *common.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *ECSearchResponse) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

type ECGetBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant    string            `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Ids       []string          `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	TimeRange *common.TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Fields    []string          `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	PageInput *PageInput        `protobuf:"bytes,5,opt,name=page_input,json=pageInput,proto3" json:"page_input,omitempty"`
}

func (x *ECGetBulkRequest) Reset() {
	*x = ECGetBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECGetBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECGetBulkRequest) ProtoMessage() {}

func (x *ECGetBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECGetBulkRequest.ProtoReflect.Descriptor instead.
func (*ECGetBulkRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{12}
}

func (x *ECGetBulkRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ECGetBulkRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ECGetBulkRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ECGetBulkRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ECGetBulkRequest) GetPageInput() *PageInput {
	if x != nil {
		return x.PageInput
	}
	return nil
}

type ECGetBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series   []*EventOccurrenceSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	PageInfo *common.PageInfo         `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *ECGetBulkResponse) Reset() {
	*x = ECGetBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECGetBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECGetBulkResponse) ProtoMessage() {}

func (x *ECGetBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECGetBulkResponse.ProtoReflect.Descriptor instead.
func (*ECGetBulkResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{13}
}

func (x *ECGetBulkResponse) GetSeries() []*EventOccurrenceSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *ECGetBulkResponse) GetPageInfo() *common.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type ECGetActiveEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant     string            `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	EntityIds  []string          `protobuf:"bytes,2,rep,name=entity_ids,json=entityIds,proto3" json:"entity_ids,omitempty"`
	TimeRange  *common.TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	PageInput  *PageInput        `protobuf:"bytes,4,opt,name=page_input,json=pageInput,proto3" json:"page_input,omitempty"`
	Severities []event.Severity  `protobuf:"varint,5,rep,packed,name=severities,proto3,enum=events.Severity" json:"severities,omitempty"`
}

func (x *ECGetActiveEventsRequest) Reset() {
	*x = ECGetActiveEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECGetActiveEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECGetActiveEventsRequest) ProtoMessage() {}

func (x *ECGetActiveEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECGetActiveEventsRequest.ProtoReflect.Descriptor instead.
func (*ECGetActiveEventsRequest) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{14}
}

func (x *ECGetActiveEventsRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ECGetActiveEventsRequest) GetEntityIds() []string {
	if x != nil {
		return x.EntityIds
	}
	return nil
}

func (x *ECGetActiveEventsRequest) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *ECGetActiveEventsRequest) GetPageInput() *PageInput {
	if x != nil {
		return x.PageInput
	}
	return nil
}

func (x *ECGetActiveEventsRequest) GetSeverities() []event.Severity {
	if x != nil {
		return x.Severities
	}
	return nil
}

type ECGetActiveEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityActiveEvents map[string]*ECGetActiveEventsResponse_IdList `protobuf:"bytes,1,rep,name=entity_active_events,json=entityActiveEvents,proto3" json:"entity_active_events,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageInfo           *common.PageInfo                             `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *ECGetActiveEventsResponse) Reset() {
	*x = ECGetActiveEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECGetActiveEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECGetActiveEventsResponse) ProtoMessage() {}

func (x *ECGetActiveEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECGetActiveEventsResponse.ProtoReflect.Descriptor instead.
func (*ECGetActiveEventsResponse) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{15}
}

func (x *ECGetActiveEventsResponse) GetEntityActiveEvents() map[string]*ECGetActiveEventsResponse_IdList {
	if x != nil {
		return x.EntityActiveEvents
	}
	return nil
}

func (x *ECGetActiveEventsResponse) GetPageInfo() *common.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type PageInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor    string              `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Direction PageInput_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=zenoss.cloud.PageInput_Direction" json:"direction,omitempty"`
	// used to denote max number of events or event ids requested
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// used to denote max number of occurrences to be returned
	OccurrenceLimit int64 `protobuf:"varint,4,opt,name=occurrence_limit,json=occurrenceLimit,proto3" json:"occurrence_limit,omitempty"`
}

func (x *PageInput) Reset() {
	*x = PageInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInput) ProtoMessage() {}

func (x *PageInput) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInput.ProtoReflect.Descriptor instead.
func (*PageInput) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{16}
}

func (x *PageInput) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *PageInput) GetDirection() PageInput_Direction {
	if x != nil {
		return x.Direction
	}
	return PageInput_FORWARD
}

func (x *PageInput) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PageInput) GetOccurrenceLimit() int64 {
	if x != nil {
		return x.OccurrenceLimit
	}
	return 0
}

// An Occurrence captures the duration in which several event instances
// were observed to have taken place. An occurrence provides a snapshot
// of often queried attributes within an event time-series.
type EventOccurrenceSeries_Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeRange     *common.TimeRange   `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	IsActive      bool                `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Severity      event.Severity      `protobuf:"varint,4,opt,name=severity,proto3,enum=events.Severity" json:"severity,omitempty"`
	Notes         []*OccurrenceNote   `protobuf:"bytes,5,rep,name=notes,proto3" json:"notes,omitempty"`
	Status        event.Status        `protobuf:"varint,6,opt,name=status,proto3,enum=events.Status" json:"status,omitempty"`
	Acknowledged  *wrappers.BoolValue `protobuf:"bytes,7,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	InstanceCount int64               `protobuf:"varint,8,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
}

func (x *EventOccurrenceSeries_Occurrence) Reset() {
	*x = EventOccurrenceSeries_Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventOccurrenceSeries_Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOccurrenceSeries_Occurrence) ProtoMessage() {}

func (x *EventOccurrenceSeries_Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOccurrenceSeries_Occurrence.ProtoReflect.Descriptor instead.
func (*EventOccurrenceSeries_Occurrence) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EventOccurrenceSeries_Occurrence) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventOccurrenceSeries_Occurrence) GetTimeRange() *common.TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventOccurrenceSeries_Occurrence) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *EventOccurrenceSeries_Occurrence) GetSeverity() event.Severity {
	if x != nil {
		return x.Severity
	}
	return event.Severity_SEVERITY_DEFAULT
}

func (x *EventOccurrenceSeries_Occurrence) GetNotes() []*OccurrenceNote {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *EventOccurrenceSeries_Occurrence) GetStatus() event.Status {
	if x != nil {
		return x.Status
	}
	return event.Status_STATUS_DEFAULT
}

func (x *EventOccurrenceSeries_Occurrence) GetAcknowledged() *wrappers.BoolValue {
	if x != nil {
		return x.Acknowledged
	}
	return nil
}

func (x *EventOccurrenceSeries_Occurrence) GetInstanceCount() int64 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

type UpdateEventRequest_Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status event.Status `protobuf:"varint,1,opt,name=status,proto3,enum=events.Status" json:"status,omitempty"`
}

func (x *UpdateEventRequest_Wrapper) Reset() {
	*x = UpdateEventRequest_Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventRequest_Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventRequest_Wrapper) ProtoMessage() {}

func (x *UpdateEventRequest_Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventRequest_Wrapper.ProtoReflect.Descriptor instead.
func (*UpdateEventRequest_Wrapper) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{6, 0}
}

func (x *UpdateEventRequest_Wrapper) GetStatus() event.Status {
	if x != nil {
		return x.Status
	}
	return event.Status_STATUS_DEFAULT
}

type Filter_LessThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter_LessThan) Reset() {
	*x = Filter_LessThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_LessThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_LessThan) ProtoMessage() {}

func (x *Filter_LessThan) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_LessThan.ProtoReflect.Descriptor instead.
func (*Filter_LessThan) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Filter_LessThan) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter_LessThanOrEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter_LessThanOrEquals) Reset() {
	*x = Filter_LessThanOrEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_LessThanOrEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_LessThanOrEquals) ProtoMessage() {}

func (x *Filter_LessThanOrEquals) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_LessThanOrEquals.ProtoReflect.Descriptor instead.
func (*Filter_LessThanOrEquals) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Filter_LessThanOrEquals) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter_Equals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter_Equals) Reset() {
	*x = Filter_Equals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_Equals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_Equals) ProtoMessage() {}

func (x *Filter_Equals) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_Equals.ProtoReflect.Descriptor instead.
func (*Filter_Equals) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Filter_Equals) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter_GreaterThan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter_GreaterThan) Reset() {
	*x = Filter_GreaterThan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_GreaterThan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_GreaterThan) ProtoMessage() {}

func (x *Filter_GreaterThan) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_GreaterThan.ProtoReflect.Descriptor instead.
func (*Filter_GreaterThan) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 3}
}

func (x *Filter_GreaterThan) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter_GreaterThanOrEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter_GreaterThanOrEquals) Reset() {
	*x = Filter_GreaterThanOrEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_GreaterThanOrEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_GreaterThanOrEquals) ProtoMessage() {}

func (x *Filter_GreaterThanOrEquals) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_GreaterThanOrEquals.ProtoReflect.Descriptor instead.
func (*Filter_GreaterThanOrEquals) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 4}
}

func (x *Filter_GreaterThanOrEquals) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter_In struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values *common.ScalarArray `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *Filter_In) Reset() {
	*x = Filter_In{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_In) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_In) ProtoMessage() {}

func (x *Filter_In) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_In.ProtoReflect.Descriptor instead.
func (*Filter_In) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 5}
}

func (x *Filter_In) GetValues() *common.ScalarArray {
	if x != nil {
		return x.Values
	}
	return nil
}

type Filter_NotEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *common.Scalar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter_NotEquals) Reset() {
	*x = Filter_NotEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_NotEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_NotEquals) ProtoMessage() {}

func (x *Filter_NotEquals) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_NotEquals.ProtoReflect.Descriptor instead.
func (*Filter_NotEquals) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 6}
}

func (x *Filter_NotEquals) GetValue() *common.Scalar {
	if x != nil {
		return x.Value
	}
	return nil
}

type Filter_NotIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values *common.ScalarArray `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *Filter_NotIn) Reset() {
	*x = Filter_NotIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter_NotIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter_NotIn) ProtoMessage() {}

func (x *Filter_NotIn) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter_NotIn.ProtoReflect.Descriptor instead.
func (*Filter_NotIn) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{8, 7}
}

func (x *Filter_NotIn) GetValues() *common.ScalarArray {
	if x != nil {
		return x.Values
	}
	return nil
}

type ECGetActiveEventsResponse_IdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ECGetActiveEventsResponse_IdList) Reset() {
	*x = ECGetActiveEventsResponse_IdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECGetActiveEventsResponse_IdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECGetActiveEventsResponse_IdList) ProtoMessage() {}

func (x *ECGetActiveEventsResponse_IdList) ProtoReflect() protoreflect.Message {
	mi := &file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECGetActiveEventsResponse_IdList.ProtoReflect.Descriptor instead.
func (*ECGetActiveEventsResponse_IdList) Descriptor() ([]byte, []int) {
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ECGetActiveEventsResponse_IdList) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_zenoss_zing_proto_cloud_event_context_proto protoreflect.FileDescriptor

var file_zenoss_zing_proto_cloud_event_context_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb8, 0x05, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x50, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe2, 0x02, 0x0a, 0x0a, 0x4f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x01,
	0x0a, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x36, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x12,
	0x0a, 0x10, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75,
	0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x16, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x6c, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x31, 0x0a,
	0x07, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x46, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x22, 0x94, 0x08, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x6e, 0x6f,
	0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73,
	0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x56,
	0x0a, 0x13, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x0b, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x5f, 0x0a,
	0x16, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4f,
	0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x67, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x1a,
	0x36, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x4c, 0x65, 0x73, 0x73, 0x54,
	0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x34, 0x0a, 0x06, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x39, 0x0a,
	0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x47, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x37, 0x0a, 0x02, 0x49,
	0x6e, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3a, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22,
	0xc8, 0x02, 0x0a, 0x0f, 0x45, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x45,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x45, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x45, 0x43, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x85, 0x01, 0x0a,
	0x11, 0x45, 0x43, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x45, 0x43, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0a,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd6, 0x02, 0x0a, 0x19, 0x45,
	0x43, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x43, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x1a, 0x0a, 0x06, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x75, 0x0a, 0x17,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x43, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a,
	0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x26, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x32, 0x8a, 0x02, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x50, 0x75,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x21, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x75, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xe9, 0x02, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1d, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45,
	0x43, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x26, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x45, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x7a, 0x65, 0x6e,
	0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x43, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1e, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x43, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x43, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x7a, 0x65,
	0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x43, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x45, 0x43, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x0a, 0x28,
	0x6f, 0x72, 0x67, 0x2e, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2e, 0x7a, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x6e, 0x6f, 0x73, 0x73, 0x2f, 0x7a, 0x69,
	0x6e, 0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x31, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zenoss_zing_proto_cloud_event_context_proto_rawDescOnce sync.Once
	file_zenoss_zing_proto_cloud_event_context_proto_rawDescData = file_zenoss_zing_proto_cloud_event_context_proto_rawDesc
)

func file_zenoss_zing_proto_cloud_event_context_proto_rawDescGZIP() []byte {
	file_zenoss_zing_proto_cloud_event_context_proto_rawDescOnce.Do(func() {
		file_zenoss_zing_proto_cloud_event_context_proto_rawDescData = protoimpl.X.CompressGZIP(file_zenoss_zing_proto_cloud_event_context_proto_rawDescData)
	})
	return file_zenoss_zing_proto_cloud_event_context_proto_rawDescData
}

var file_zenoss_zing_proto_cloud_event_context_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zenoss_zing_proto_cloud_event_context_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_zenoss_zing_proto_cloud_event_context_proto_goTypes = []interface{}{
	(PageInput_Direction)(0),                 // 0: zenoss.cloud.PageInput.Direction
	(*EventOccurrenceSeries)(nil),            // 1: zenoss.cloud.EventOccurrenceSeries
	(*OccurrenceNote)(nil),                   // 2: zenoss.cloud.OccurrenceNote
	(*PutEventRequest)(nil),                  // 3: zenoss.cloud.PutEventRequest
	(*PutEventResponse)(nil),                 // 4: zenoss.cloud.PutEventResponse
	(*PutEventBulkRequest)(nil),              // 5: zenoss.cloud.PutEventBulkRequest
	(*PutEventBulkResponse)(nil),             // 6: zenoss.cloud.PutEventBulkResponse
	(*UpdateEventRequest)(nil),               // 7: zenoss.cloud.UpdateEventRequest
	(*UpdateEventResponse)(nil),              // 8: zenoss.cloud.UpdateEventResponse
	(*Filter)(nil),                           // 9: zenoss.cloud.Filter
	(*ECSearchRequest)(nil),                  // 10: zenoss.cloud.ECSearchRequest
	(*ECStreamingSearchRequest)(nil),         // 11: zenoss.cloud.ECStreamingSearchRequest
	(*ECSearchResponse)(nil),                 // 12: zenoss.cloud.ECSearchResponse
	(*ECGetBulkRequest)(nil),                 // 13: zenoss.cloud.ECGetBulkRequest
	(*ECGetBulkResponse)(nil),                // 14: zenoss.cloud.ECGetBulkResponse
	(*ECGetActiveEventsRequest)(nil),         // 15: zenoss.cloud.ECGetActiveEventsRequest
	(*ECGetActiveEventsResponse)(nil),        // 16: zenoss.cloud.ECGetActiveEventsResponse
	(*PageInput)(nil),                        // 17: zenoss.cloud.PageInput
	nil,                                      // 18: zenoss.cloud.EventOccurrenceSeries.DimensionsEntry
	(*EventOccurrenceSeries_Occurrence)(nil), // 19: zenoss.cloud.EventOccurrenceSeries.Occurrence
	(*UpdateEventRequest_Wrapper)(nil),       // 20: zenoss.cloud.UpdateEventRequest.Wrapper
	(*Filter_LessThan)(nil),                  // 21: zenoss.cloud.Filter.LessThan
	(*Filter_LessThanOrEquals)(nil),          // 22: zenoss.cloud.Filter.LessThanOrEquals
	(*Filter_Equals)(nil),                    // 23: zenoss.cloud.Filter.Equals
	(*Filter_GreaterThan)(nil),               // 24: zenoss.cloud.Filter.GreaterThan
	(*Filter_GreaterThanOrEquals)(nil),       // 25: zenoss.cloud.Filter.GreaterThanOrEquals
	(*Filter_In)(nil),                        // 26: zenoss.cloud.Filter.In
	(*Filter_NotEquals)(nil),                 // 27: zenoss.cloud.Filter.NotEquals
	(*Filter_NotIn)(nil),                     // 28: zenoss.cloud.Filter.NotIn
	(*ECGetActiveEventsResponse_IdList)(nil), // 29: zenoss.cloud.ECGetActiveEventsResponse.IdList
	nil,                                      // 30: zenoss.cloud.ECGetActiveEventsResponse.EntityActiveEventsEntry
	(*event.Event)(nil),                      // 31: events.Event
	(*wrappers.BoolValue)(nil),               // 32: google.protobuf.BoolValue
	(*common.TimeRange)(nil),                 // 33: zenoss.cloud.TimeRange
	(event.Severity)(0),                      // 34: events.Severity
	(event.Status)(0),                        // 35: events.Status
	(*common.PageInfo)(nil),                  // 36: zenoss.cloud.PageInfo
	(*common.Scalar)(nil),                    // 37: zenoss.cloud.Scalar
	(*common.ScalarArray)(nil),               // 38: zenoss.cloud.ScalarArray
}
var file_zenoss_zing_proto_cloud_event_context_proto_depIdxs = []int32{
	18, // 0: zenoss.cloud.EventOccurrenceSeries.dimensions:type_name -> zenoss.cloud.EventOccurrenceSeries.DimensionsEntry
	19, // 1: zenoss.cloud.EventOccurrenceSeries.occurrences:type_name -> zenoss.cloud.EventOccurrenceSeries.Occurrence
	31, // 2: zenoss.cloud.PutEventRequest.event:type_name -> events.Event
	31, // 3: zenoss.cloud.PutEventBulkRequest.events:type_name -> events.Event
	20, // 4: zenoss.cloud.UpdateEventRequest.status_wrapper:type_name -> zenoss.cloud.UpdateEventRequest.Wrapper
	32, // 5: zenoss.cloud.UpdateEventRequest.acknowledged:type_name -> google.protobuf.BoolValue
	23, // 6: zenoss.cloud.Filter.equals:type_name -> zenoss.cloud.Filter.Equals
	21, // 7: zenoss.cloud.Filter.less_than:type_name -> zenoss.cloud.Filter.LessThan
	22, // 8: zenoss.cloud.Filter.less_than_or_equals:type_name -> zenoss.cloud.Filter.LessThanOrEquals
	24, // 9: zenoss.cloud.Filter.greater_than:type_name -> zenoss.cloud.Filter.GreaterThan
	25, // 10: zenoss.cloud.Filter.greater_than_or_equals:type_name -> zenoss.cloud.Filter.GreaterThanOrEquals
	26, // 11: zenoss.cloud.Filter.in:type_name -> zenoss.cloud.Filter.In
	27, // 12: zenoss.cloud.Filter.not_equals:type_name -> zenoss.cloud.Filter.NotEquals
	28, // 13: zenoss.cloud.Filter.not_in:type_name -> zenoss.cloud.Filter.NotIn
	33, // 14: zenoss.cloud.ECSearchRequest.time_range:type_name -> zenoss.cloud.TimeRange
	9,  // 15: zenoss.cloud.ECSearchRequest.filters:type_name -> zenoss.cloud.Filter
	34, // 16: zenoss.cloud.ECSearchRequest.severities:type_name -> events.Severity
	35, // 17: zenoss.cloud.ECSearchRequest.statuses:type_name -> events.Status
	17, // 18: zenoss.cloud.ECSearchRequest.page_input:type_name -> zenoss.cloud.PageInput
	33, // 19: zenoss.cloud.ECStreamingSearchRequest.time_range:type_name -> zenoss.cloud.TimeRange
	9,  // 20: zenoss.cloud.ECStreamingSearchRequest.filters:type_name -> zenoss.cloud.Filter
	34, // 21: zenoss.cloud.ECStreamingSearchRequest.severities:type_name -> events.Severity
	35, // 22: zenoss.cloud.ECStreamingSearchRequest.statuses:type_name -> events.Status
	1,  // 23: zenoss.cloud.ECSearchResponse.series:type_name -> zenoss.cloud.EventOccurrenceSeries
	36, // 24: zenoss.cloud.ECSearchResponse.page_info:type_name -> zenoss.cloud.PageInfo
	33, // 25: zenoss.cloud.ECGetBulkRequest.time_range:type_name -> zenoss.cloud.TimeRange
	17, // 26: zenoss.cloud.ECGetBulkRequest.page_input:type_name -> zenoss.cloud.PageInput
	1,  // 27: zenoss.cloud.ECGetBulkResponse.series:type_name -> zenoss.cloud.EventOccurrenceSeries
	36, // 28: zenoss.cloud.ECGetBulkResponse.page_info:type_name -> zenoss.cloud.PageInfo
	33, // 29: zenoss.cloud.ECGetActiveEventsRequest.time_range:type_name -> zenoss.cloud.TimeRange
	17, // 30: zenoss.cloud.ECGetActiveEventsRequest.page_input:type_name -> zenoss.cloud.PageInput
	34, // 31: zenoss.cloud.ECGetActiveEventsRequest.severities:type_name -> events.Severity
	30, // 32: zenoss.cloud.ECGetActiveEventsResponse.entity_active_events:type_name -> zenoss.cloud.ECGetActiveEventsResponse.EntityActiveEventsEntry
	36, // 33: zenoss.cloud.ECGetActiveEventsResponse.page_info:type_name -> zenoss.cloud.PageInfo
	0,  // 34: zenoss.cloud.PageInput.direction:type_name -> zenoss.cloud.PageInput.Direction
	37, // 35: zenoss.cloud.EventOccurrenceSeries.DimensionsEntry.value:type_name -> zenoss.cloud.Scalar
	33, // 36: zenoss.cloud.EventOccurrenceSeries.Occurrence.time_range:type_name -> zenoss.cloud.TimeRange
	34, // 37: zenoss.cloud.EventOccurrenceSeries.Occurrence.severity:type_name -> events.Severity
	2,  // 38: zenoss.cloud.EventOccurrenceSeries.Occurrence.notes:type_name -> zenoss.cloud.OccurrenceNote
	35, // 39: zenoss.cloud.EventOccurrenceSeries.Occurrence.status:type_name -> events.Status
	32, // 40: zenoss.cloud.EventOccurrenceSeries.Occurrence.acknowledged:type_name -> google.protobuf.BoolValue
	35, // 41: zenoss.cloud.UpdateEventRequest.Wrapper.status:type_name -> events.Status
	37, // 42: zenoss.cloud.Filter.LessThan.value:type_name -> zenoss.cloud.Scalar
	37, // 43: zenoss.cloud.Filter.LessThanOrEquals.value:type_name -> zenoss.cloud.Scalar
	37, // 44: zenoss.cloud.Filter.Equals.value:type_name -> zenoss.cloud.Scalar
	37, // 45: zenoss.cloud.Filter.GreaterThan.value:type_name -> zenoss.cloud.Scalar
	37, // 46: zenoss.cloud.Filter.GreaterThanOrEquals.value:type_name -> zenoss.cloud.Scalar
	38, // 47: zenoss.cloud.Filter.In.values:type_name -> zenoss.cloud.ScalarArray
	37, // 48: zenoss.cloud.Filter.NotEquals.value:type_name -> zenoss.cloud.Scalar
	38, // 49: zenoss.cloud.Filter.NotIn.values:type_name -> zenoss.cloud.ScalarArray
	29, // 50: zenoss.cloud.ECGetActiveEventsResponse.EntityActiveEventsEntry.value:type_name -> zenoss.cloud.ECGetActiveEventsResponse.IdList
	3,  // 51: zenoss.cloud.EventContextIngest.PutEvent:input_type -> zenoss.cloud.PutEventRequest
	5,  // 52: zenoss.cloud.EventContextIngest.PutEventBulk:input_type -> zenoss.cloud.PutEventBulkRequest
	7,  // 53: zenoss.cloud.EventContextIngest.UpdateEvent:input_type -> zenoss.cloud.UpdateEventRequest
	10, // 54: zenoss.cloud.EventContextQuery.Search:input_type -> zenoss.cloud.ECSearchRequest
	11, // 55: zenoss.cloud.EventContextQuery.StreamingSearch:input_type -> zenoss.cloud.ECStreamingSearchRequest
	13, // 56: zenoss.cloud.EventContextQuery.GetBulk:input_type -> zenoss.cloud.ECGetBulkRequest
	15, // 57: zenoss.cloud.EventContextQuery.GetActiveEvents:input_type -> zenoss.cloud.ECGetActiveEventsRequest
	4,  // 58: zenoss.cloud.EventContextIngest.PutEvent:output_type -> zenoss.cloud.PutEventResponse
	6,  // 59: zenoss.cloud.EventContextIngest.PutEventBulk:output_type -> zenoss.cloud.PutEventBulkResponse
	8,  // 60: zenoss.cloud.EventContextIngest.UpdateEvent:output_type -> zenoss.cloud.UpdateEventResponse
	12, // 61: zenoss.cloud.EventContextQuery.Search:output_type -> zenoss.cloud.ECSearchResponse
	12, // 62: zenoss.cloud.EventContextQuery.StreamingSearch:output_type -> zenoss.cloud.ECSearchResponse
	14, // 63: zenoss.cloud.EventContextQuery.GetBulk:output_type -> zenoss.cloud.ECGetBulkResponse
	16, // 64: zenoss.cloud.EventContextQuery.GetActiveEvents:output_type -> zenoss.cloud.ECGetActiveEventsResponse
	58, // [58:65] is the sub-list for method output_type
	51, // [51:58] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_zenoss_zing_proto_cloud_event_context_proto_init() }
func file_zenoss_zing_proto_cloud_event_context_proto_init() {
	if File_zenoss_zing_proto_cloud_event_context_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventOccurrenceSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OccurrenceNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutEventBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECStreamingSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECGetBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECGetBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECGetActiveEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECGetActiveEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventOccurrenceSeries_Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventRequest_Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_LessThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_LessThanOrEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_Equals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_GreaterThan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_GreaterThanOrEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_In); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_NotEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter_NotIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECGetActiveEventsResponse_IdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zenoss_zing_proto_cloud_event_context_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Filter_Equals_)(nil),
		(*Filter_LessThan_)(nil),
		(*Filter_LessThanOrEquals_)(nil),
		(*Filter_GreaterThan_)(nil),
		(*Filter_GreaterThanOrEquals_)(nil),
		(*Filter_In_)(nil),
		(*Filter_NotEquals_)(nil),
		(*Filter_NotIn_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zenoss_zing_proto_cloud_event_context_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_zenoss_zing_proto_cloud_event_context_proto_goTypes,
		DependencyIndexes: file_zenoss_zing_proto_cloud_event_context_proto_depIdxs,
		EnumInfos:         file_zenoss_zing_proto_cloud_event_context_proto_enumTypes,
		MessageInfos:      file_zenoss_zing_proto_cloud_event_context_proto_msgTypes,
	}.Build()
	File_zenoss_zing_proto_cloud_event_context_proto = out.File
	file_zenoss_zing_proto_cloud_event_context_proto_rawDesc = nil
	file_zenoss_zing_proto_cloud_event_context_proto_goTypes = nil
	file_zenoss_zing_proto_cloud_event_context_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventContextIngestClient is the client API for EventContextIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventContextIngestClient interface {
	PutEvent(ctx context.Context, in *PutEventRequest, opts ...grpc.CallOption) (*PutEventResponse, error)
	PutEventBulk(ctx context.Context, in *PutEventBulkRequest, opts ...grpc.CallOption) (*PutEventBulkResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error)
}

type eventContextIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewEventContextIngestClient(cc grpc.ClientConnInterface) EventContextIngestClient {
	return &eventContextIngestClient{cc}
}

func (c *eventContextIngestClient) PutEvent(ctx context.Context, in *PutEventRequest, opts ...grpc.CallOption) (*PutEventResponse, error) {
	out := new(PutEventResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/PutEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextIngestClient) PutEventBulk(ctx context.Context, in *PutEventBulkRequest, opts ...grpc.CallOption) (*PutEventBulkResponse, error) {
	out := new(PutEventBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/PutEventBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextIngestClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error) {
	out := new(UpdateEventResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventContextIngestServer is the server API for EventContextIngest service.
type EventContextIngestServer interface {
	PutEvent(context.Context, *PutEventRequest) (*PutEventResponse, error)
	PutEventBulk(context.Context, *PutEventBulkRequest) (*PutEventBulkResponse, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error)
}

// UnimplementedEventContextIngestServer can be embedded to have forward compatible implementations.
type UnimplementedEventContextIngestServer struct {
}

func (*UnimplementedEventContextIngestServer) PutEvent(context.Context, *PutEventRequest) (*PutEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEvent not implemented")
}
func (*UnimplementedEventContextIngestServer) PutEventBulk(context.Context, *PutEventBulkRequest) (*PutEventBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEventBulk not implemented")
}
func (*UnimplementedEventContextIngestServer) UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}

func RegisterEventContextIngestServer(s *grpc.Server, srv EventContextIngestServer) {
	s.RegisterService(&_EventContextIngest_serviceDesc, srv)
}

func _EventContextIngest_PutEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).PutEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/PutEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).PutEvent(ctx, req.(*PutEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextIngest_PutEventBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEventBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).PutEventBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/PutEventBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).PutEventBulk(ctx, req.(*PutEventBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextIngest_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventContextIngest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventContextIngest",
	HandlerType: (*EventContextIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutEvent",
			Handler:    _EventContextIngest_PutEvent_Handler,
		},
		{
			MethodName: "PutEventBulk",
			Handler:    _EventContextIngest_PutEventBulk_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventContextIngest_UpdateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/event_context.proto",
}

// EventContextQueryClient is the client API for EventContextQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventContextQueryClient interface {
	Search(ctx context.Context, in *ECSearchRequest, opts ...grpc.CallOption) (*ECSearchResponse, error)
	StreamingSearch(ctx context.Context, in *ECStreamingSearchRequest, opts ...grpc.CallOption) (EventContextQuery_StreamingSearchClient, error)
	GetBulk(ctx context.Context, in *ECGetBulkRequest, opts ...grpc.CallOption) (*ECGetBulkResponse, error)
	GetActiveEvents(ctx context.Context, in *ECGetActiveEventsRequest, opts ...grpc.CallOption) (*ECGetActiveEventsResponse, error)
}

type eventContextQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventContextQueryClient(cc grpc.ClientConnInterface) EventContextQueryClient {
	return &eventContextQueryClient{cc}
}

func (c *eventContextQueryClient) Search(ctx context.Context, in *ECSearchRequest, opts ...grpc.CallOption) (*ECSearchResponse, error) {
	out := new(ECSearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextQueryClient) StreamingSearch(ctx context.Context, in *ECStreamingSearchRequest, opts ...grpc.CallOption) (EventContextQuery_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventContextQuery_serviceDesc.Streams[0], "/zenoss.cloud.EventContextQuery/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventContextQueryStreamingSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventContextQuery_StreamingSearchClient interface {
	Recv() (*ECSearchResponse, error)
	grpc.ClientStream
}

type eventContextQueryStreamingSearchClient struct {
	grpc.ClientStream
}

func (x *eventContextQueryStreamingSearchClient) Recv() (*ECSearchResponse, error) {
	m := new(ECSearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventContextQueryClient) GetBulk(ctx context.Context, in *ECGetBulkRequest, opts ...grpc.CallOption) (*ECGetBulkResponse, error) {
	out := new(ECGetBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextQuery/GetBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextQueryClient) GetActiveEvents(ctx context.Context, in *ECGetActiveEventsRequest, opts ...grpc.CallOption) (*ECGetActiveEventsResponse, error) {
	out := new(ECGetActiveEventsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextQuery/GetActiveEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventContextQueryServer is the server API for EventContextQuery service.
type EventContextQueryServer interface {
	Search(context.Context, *ECSearchRequest) (*ECSearchResponse, error)
	StreamingSearch(*ECStreamingSearchRequest, EventContextQuery_StreamingSearchServer) error
	GetBulk(context.Context, *ECGetBulkRequest) (*ECGetBulkResponse, error)
	GetActiveEvents(context.Context, *ECGetActiveEventsRequest) (*ECGetActiveEventsResponse, error)
}

// UnimplementedEventContextQueryServer can be embedded to have forward compatible implementations.
type UnimplementedEventContextQueryServer struct {
}

func (*UnimplementedEventContextQueryServer) Search(context.Context, *ECSearchRequest) (*ECSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedEventContextQueryServer) StreamingSearch(*ECStreamingSearchRequest, EventContextQuery_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}
func (*UnimplementedEventContextQueryServer) GetBulk(context.Context, *ECGetBulkRequest) (*ECGetBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (*UnimplementedEventContextQueryServer) GetActiveEvents(context.Context, *ECGetActiveEventsRequest) (*ECGetActiveEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveEvents not implemented")
}

func RegisterEventContextQueryServer(s *grpc.Server, srv EventContextQueryServer) {
	s.RegisterService(&_EventContextQuery_serviceDesc, srv)
}

func _EventContextQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextQueryServer).Search(ctx, req.(*ECSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextQuery_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ECStreamingSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventContextQueryServer).StreamingSearch(m, &eventContextQueryStreamingSearchServer{stream})
}

type EventContextQuery_StreamingSearchServer interface {
	Send(*ECSearchResponse) error
	grpc.ServerStream
}

type eventContextQueryStreamingSearchServer struct {
	grpc.ServerStream
}

func (x *eventContextQueryStreamingSearchServer) Send(m *ECSearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventContextQuery_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECGetBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextQueryServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextQuery/GetBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextQueryServer).GetBulk(ctx, req.(*ECGetBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextQuery_GetActiveEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECGetActiveEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextQueryServer).GetActiveEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextQuery/GetActiveEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextQueryServer).GetActiveEvents(ctx, req.(*ECGetActiveEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventContextQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventContextQuery",
	HandlerType: (*EventContextQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _EventContextQuery_Search_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _EventContextQuery_GetBulk_Handler,
		},
		{
			MethodName: "GetActiveEvents",
			Handler:    _EventContextQuery_GetActiveEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _EventContextQuery_StreamingSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/event_context.proto",
}
