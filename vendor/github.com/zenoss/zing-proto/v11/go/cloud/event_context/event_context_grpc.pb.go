// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: zenoss/zing/proto/cloud/event_context.proto

package event_context

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventContextIngestClient is the client API for EventContextIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventContextIngestClient interface {
	PutEvent(ctx context.Context, in *PutEventRequest, opts ...grpc.CallOption) (*PutEventResponse, error)
	PutEventBulk(ctx context.Context, in *PutEventBulkRequest, opts ...grpc.CallOption) (*PutEventBulkResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error)
	DeleteTenantData(ctx context.Context, in *DeleteTenantDataRequest, opts ...grpc.CallOption) (*DeleteTenantDataResponse, error)
}

type eventContextIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewEventContextIngestClient(cc grpc.ClientConnInterface) EventContextIngestClient {
	return &eventContextIngestClient{cc}
}

func (c *eventContextIngestClient) PutEvent(ctx context.Context, in *PutEventRequest, opts ...grpc.CallOption) (*PutEventResponse, error) {
	out := new(PutEventResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/PutEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextIngestClient) PutEventBulk(ctx context.Context, in *PutEventBulkRequest, opts ...grpc.CallOption) (*PutEventBulkResponse, error) {
	out := new(PutEventBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/PutEventBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextIngestClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error) {
	out := new(UpdateEventResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextIngestClient) DeleteTenantData(ctx context.Context, in *DeleteTenantDataRequest, opts ...grpc.CallOption) (*DeleteTenantDataResponse, error) {
	out := new(DeleteTenantDataResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextIngest/DeleteTenantData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventContextIngestServer is the server API for EventContextIngest service.
// All implementations must embed UnimplementedEventContextIngestServer
// for forward compatibility
type EventContextIngestServer interface {
	PutEvent(context.Context, *PutEventRequest) (*PutEventResponse, error)
	PutEventBulk(context.Context, *PutEventBulkRequest) (*PutEventBulkResponse, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error)
	DeleteTenantData(context.Context, *DeleteTenantDataRequest) (*DeleteTenantDataResponse, error)
	mustEmbedUnimplementedEventContextIngestServer()
}

// UnimplementedEventContextIngestServer must be embedded to have forward compatible implementations.
type UnimplementedEventContextIngestServer struct {
}

func (UnimplementedEventContextIngestServer) PutEvent(context.Context, *PutEventRequest) (*PutEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEvent not implemented")
}
func (UnimplementedEventContextIngestServer) PutEventBulk(context.Context, *PutEventBulkRequest) (*PutEventBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEventBulk not implemented")
}
func (UnimplementedEventContextIngestServer) UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventContextIngestServer) DeleteTenantData(context.Context, *DeleteTenantDataRequest) (*DeleteTenantDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantData not implemented")
}
func (UnimplementedEventContextIngestServer) mustEmbedUnimplementedEventContextIngestServer() {}

// UnsafeEventContextIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventContextIngestServer will
// result in compilation errors.
type UnsafeEventContextIngestServer interface {
	mustEmbedUnimplementedEventContextIngestServer()
}

func RegisterEventContextIngestServer(s grpc.ServiceRegistrar, srv EventContextIngestServer) {
	s.RegisterService(&EventContextIngest_ServiceDesc, srv)
}

func _EventContextIngest_PutEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).PutEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/PutEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).PutEvent(ctx, req.(*PutEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextIngest_PutEventBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEventBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).PutEventBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/PutEventBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).PutEventBulk(ctx, req.(*PutEventBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextIngest_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextIngest_DeleteTenantData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextIngestServer).DeleteTenantData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextIngest/DeleteTenantData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextIngestServer).DeleteTenantData(ctx, req.(*DeleteTenantDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventContextIngest_ServiceDesc is the grpc.ServiceDesc for EventContextIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventContextIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventContextIngest",
	HandlerType: (*EventContextIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutEvent",
			Handler:    _EventContextIngest_PutEvent_Handler,
		},
		{
			MethodName: "PutEventBulk",
			Handler:    _EventContextIngest_PutEventBulk_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventContextIngest_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteTenantData",
			Handler:    _EventContextIngest_DeleteTenantData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zenoss/zing/proto/cloud/event_context.proto",
}

// EventContextQueryClient is the client API for EventContextQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventContextQueryClient interface {
	Search(ctx context.Context, in *ECSearchRequest, opts ...grpc.CallOption) (*ECSearchResponse, error)
	StreamingSearch(ctx context.Context, in *ECStreamingSearchRequest, opts ...grpc.CallOption) (EventContextQuery_StreamingSearchClient, error)
	GetBulk(ctx context.Context, in *ECGetBulkRequest, opts ...grpc.CallOption) (*ECGetBulkResponse, error)
	GetActiveEvents(ctx context.Context, in *ECGetActiveEventsRequest, opts ...grpc.CallOption) (*ECGetActiveEventsResponse, error)
}

type eventContextQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewEventContextQueryClient(cc grpc.ClientConnInterface) EventContextQueryClient {
	return &eventContextQueryClient{cc}
}

func (c *eventContextQueryClient) Search(ctx context.Context, in *ECSearchRequest, opts ...grpc.CallOption) (*ECSearchResponse, error) {
	out := new(ECSearchResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextQuery/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextQueryClient) StreamingSearch(ctx context.Context, in *ECStreamingSearchRequest, opts ...grpc.CallOption) (EventContextQuery_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventContextQuery_ServiceDesc.Streams[0], "/zenoss.cloud.EventContextQuery/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventContextQueryStreamingSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventContextQuery_StreamingSearchClient interface {
	Recv() (*ECSearchResponse, error)
	grpc.ClientStream
}

type eventContextQueryStreamingSearchClient struct {
	grpc.ClientStream
}

func (x *eventContextQueryStreamingSearchClient) Recv() (*ECSearchResponse, error) {
	m := new(ECSearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventContextQueryClient) GetBulk(ctx context.Context, in *ECGetBulkRequest, opts ...grpc.CallOption) (*ECGetBulkResponse, error) {
	out := new(ECGetBulkResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextQuery/GetBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventContextQueryClient) GetActiveEvents(ctx context.Context, in *ECGetActiveEventsRequest, opts ...grpc.CallOption) (*ECGetActiveEventsResponse, error) {
	out := new(ECGetActiveEventsResponse)
	err := c.cc.Invoke(ctx, "/zenoss.cloud.EventContextQuery/GetActiveEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventContextQueryServer is the server API for EventContextQuery service.
// All implementations must embed UnimplementedEventContextQueryServer
// for forward compatibility
type EventContextQueryServer interface {
	Search(context.Context, *ECSearchRequest) (*ECSearchResponse, error)
	StreamingSearch(*ECStreamingSearchRequest, EventContextQuery_StreamingSearchServer) error
	GetBulk(context.Context, *ECGetBulkRequest) (*ECGetBulkResponse, error)
	GetActiveEvents(context.Context, *ECGetActiveEventsRequest) (*ECGetActiveEventsResponse, error)
	mustEmbedUnimplementedEventContextQueryServer()
}

// UnimplementedEventContextQueryServer must be embedded to have forward compatible implementations.
type UnimplementedEventContextQueryServer struct {
}

func (UnimplementedEventContextQueryServer) Search(context.Context, *ECSearchRequest) (*ECSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedEventContextQueryServer) StreamingSearch(*ECStreamingSearchRequest, EventContextQuery_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}
func (UnimplementedEventContextQueryServer) GetBulk(context.Context, *ECGetBulkRequest) (*ECGetBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (UnimplementedEventContextQueryServer) GetActiveEvents(context.Context, *ECGetActiveEventsRequest) (*ECGetActiveEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveEvents not implemented")
}
func (UnimplementedEventContextQueryServer) mustEmbedUnimplementedEventContextQueryServer() {}

// UnsafeEventContextQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventContextQueryServer will
// result in compilation errors.
type UnsafeEventContextQueryServer interface {
	mustEmbedUnimplementedEventContextQueryServer()
}

func RegisterEventContextQueryServer(s grpc.ServiceRegistrar, srv EventContextQueryServer) {
	s.RegisterService(&EventContextQuery_ServiceDesc, srv)
}

func _EventContextQuery_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextQueryServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextQuery/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextQueryServer).Search(ctx, req.(*ECSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextQuery_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ECStreamingSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventContextQueryServer).StreamingSearch(m, &eventContextQueryStreamingSearchServer{stream})
}

type EventContextQuery_StreamingSearchServer interface {
	Send(*ECSearchResponse) error
	grpc.ServerStream
}

type eventContextQueryStreamingSearchServer struct {
	grpc.ServerStream
}

func (x *eventContextQueryStreamingSearchServer) Send(m *ECSearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventContextQuery_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECGetBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextQueryServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextQuery/GetBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextQueryServer).GetBulk(ctx, req.(*ECGetBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventContextQuery_GetActiveEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECGetActiveEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventContextQueryServer).GetActiveEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zenoss.cloud.EventContextQuery/GetActiveEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventContextQueryServer).GetActiveEvents(ctx, req.(*ECGetActiveEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventContextQuery_ServiceDesc is the grpc.ServiceDesc for EventContextQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventContextQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zenoss.cloud.EventContextQuery",
	HandlerType: (*EventContextQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _EventContextQuery_Search_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _EventContextQuery_GetBulk_Handler,
		},
		{
			MethodName: "GetActiveEvents",
			Handler:    _EventContextQuery_GetActiveEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _EventContextQuery_StreamingSearch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zenoss/zing/proto/cloud/event_context.proto",
}
