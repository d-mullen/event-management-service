// Code generated by mockery v2.13.1. DO NOT EDIT.

package event_context

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventContextQueryServer is an autogenerated mock type for the EventContextQueryServer type
type MockEventContextQueryServer struct {
	mock.Mock
}

type MockEventContextQueryServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventContextQueryServer) EXPECT() *MockEventContextQueryServer_Expecter {
	return &MockEventContextQueryServer_Expecter{mock: &_m.Mock}
}

// GetActiveEvents provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) GetActiveEvents(_a0 context.Context, _a1 *ECGetActiveEventsRequest) (*ECGetActiveEventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ECGetActiveEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ECGetActiveEventsRequest) *ECGetActiveEventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECGetActiveEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ECGetActiveEventsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventContextQueryServer_GetActiveEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveEvents'
type MockEventContextQueryServer_GetActiveEvents_Call struct {
	*mock.Call
}

// GetActiveEvents is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ECGetActiveEventsRequest
func (_e *MockEventContextQueryServer_Expecter) GetActiveEvents(_a0 interface{}, _a1 interface{}) *MockEventContextQueryServer_GetActiveEvents_Call {
	return &MockEventContextQueryServer_GetActiveEvents_Call{Call: _e.mock.On("GetActiveEvents", _a0, _a1)}
}

func (_c *MockEventContextQueryServer_GetActiveEvents_Call) Run(run func(_a0 context.Context, _a1 *ECGetActiveEventsRequest)) *MockEventContextQueryServer_GetActiveEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ECGetActiveEventsRequest))
	})
	return _c
}

func (_c *MockEventContextQueryServer_GetActiveEvents_Call) Return(_a0 *ECGetActiveEventsResponse, _a1 error) *MockEventContextQueryServer_GetActiveEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBulk provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) GetBulk(_a0 context.Context, _a1 *ECGetBulkRequest) (*ECGetBulkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ECGetBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ECGetBulkRequest) *ECGetBulkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECGetBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ECGetBulkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventContextQueryServer_GetBulk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBulk'
type MockEventContextQueryServer_GetBulk_Call struct {
	*mock.Call
}

// GetBulk is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ECGetBulkRequest
func (_e *MockEventContextQueryServer_Expecter) GetBulk(_a0 interface{}, _a1 interface{}) *MockEventContextQueryServer_GetBulk_Call {
	return &MockEventContextQueryServer_GetBulk_Call{Call: _e.mock.On("GetBulk", _a0, _a1)}
}

func (_c *MockEventContextQueryServer_GetBulk_Call) Run(run func(_a0 context.Context, _a1 *ECGetBulkRequest)) *MockEventContextQueryServer_GetBulk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ECGetBulkRequest))
	})
	return _c
}

func (_c *MockEventContextQueryServer_GetBulk_Call) Return(_a0 *ECGetBulkResponse, _a1 error) *MockEventContextQueryServer_GetBulk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) Search(_a0 context.Context, _a1 *ECSearchRequest) (*ECSearchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ECSearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ECSearchRequest) *ECSearchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECSearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ECSearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventContextQueryServer_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockEventContextQueryServer_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *ECSearchRequest
func (_e *MockEventContextQueryServer_Expecter) Search(_a0 interface{}, _a1 interface{}) *MockEventContextQueryServer_Search_Call {
	return &MockEventContextQueryServer_Search_Call{Call: _e.mock.On("Search", _a0, _a1)}
}

func (_c *MockEventContextQueryServer_Search_Call) Run(run func(_a0 context.Context, _a1 *ECSearchRequest)) *MockEventContextQueryServer_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ECSearchRequest))
	})
	return _c
}

func (_c *MockEventContextQueryServer_Search_Call) Return(_a0 *ECSearchResponse, _a1 error) *MockEventContextQueryServer_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// StreamingSearch provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) StreamingSearch(_a0 *ECStreamingSearchRequest, _a1 EventContextQuery_StreamingSearchServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ECStreamingSearchRequest, EventContextQuery_StreamingSearchServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEventContextQueryServer_StreamingSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamingSearch'
type MockEventContextQueryServer_StreamingSearch_Call struct {
	*mock.Call
}

// StreamingSearch is a helper method to define mock.On call
//  - _a0 *ECStreamingSearchRequest
//  - _a1 EventContextQuery_StreamingSearchServer
func (_e *MockEventContextQueryServer_Expecter) StreamingSearch(_a0 interface{}, _a1 interface{}) *MockEventContextQueryServer_StreamingSearch_Call {
	return &MockEventContextQueryServer_StreamingSearch_Call{Call: _e.mock.On("StreamingSearch", _a0, _a1)}
}

func (_c *MockEventContextQueryServer_StreamingSearch_Call) Run(run func(_a0 *ECStreamingSearchRequest, _a1 EventContextQuery_StreamingSearchServer)) *MockEventContextQueryServer_StreamingSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ECStreamingSearchRequest), args[1].(EventContextQuery_StreamingSearchServer))
	})
	return _c
}

func (_c *MockEventContextQueryServer_StreamingSearch_Call) Return(_a0 error) *MockEventContextQueryServer_StreamingSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

// mustEmbedUnimplementedEventContextQueryServer provides a mock function with given fields:
func (_m *MockEventContextQueryServer) mustEmbedUnimplementedEventContextQueryServer() {
	_m.Called()
}

// MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedEventContextQueryServer'
type MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedEventContextQueryServer is a helper method to define mock.On call
func (_e *MockEventContextQueryServer_Expecter) mustEmbedUnimplementedEventContextQueryServer() *MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call {
	return &MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call{Call: _e.mock.On("mustEmbedUnimplementedEventContextQueryServer")}
}

func (_c *MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call) Run(run func()) *MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call) Return() *MockEventContextQueryServer_mustEmbedUnimplementedEventContextQueryServer_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewMockEventContextQueryServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventContextQueryServer creates a new instance of MockEventContextQueryServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventContextQueryServer(t mockConstructorTestingTNewMockEventContextQueryServer) *MockEventContextQueryServer {
	mock := &MockEventContextQueryServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
