// Code generated by mockery v1.0.0. DO NOT EDIT.

package event_context

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEventContextQueryServer is an autogenerated mock type for the EventContextQueryServer type
type MockEventContextQueryServer struct {
	mock.Mock
}

// GetActiveEvents provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) GetActiveEvents(_a0 context.Context, _a1 *ECGetActiveEventsRequest) (*ECGetActiveEventsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ECGetActiveEventsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ECGetActiveEventsRequest) *ECGetActiveEventsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECGetActiveEventsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ECGetActiveEventsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBulk provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) GetBulk(_a0 context.Context, _a1 *ECGetBulkRequest) (*ECGetBulkResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ECGetBulkResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ECGetBulkRequest) *ECGetBulkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECGetBulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ECGetBulkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *MockEventContextQueryServer) Search(_a0 context.Context, _a1 *ECSearchRequest) (*ECSearchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ECSearchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ECSearchRequest) *ECSearchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ECSearchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ECSearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
