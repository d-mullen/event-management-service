// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import oauth2 "golang.org/x/oauth2"

// BackendTokenSource is an autogenerated mock type for the BackendTokenSource type
type BackendTokenSource struct {
	mock.Mock
}

// Token provides a mock function with given fields: ctx, tenant
func (_b *BackendTokenSource) Token(ctx context.Context, tenant string) (*oauth2.Token, error) {
	ret := _b.Called(ctx, tenant)

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauth2.Token); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenSource is an autogenerated mock type for the TokenSource type
type TokenSource struct {
	mock.Mock
}

// Token provides a mock function with given fields:
func (_m *TokenSource) Token() (*oauth2.Token, error) {
	ret := _m.Called()

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func() *oauth2.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
