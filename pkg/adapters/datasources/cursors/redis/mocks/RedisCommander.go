// Code generated by mockery v2.13.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/go-redis/redis/v8"

	time "time"
)

// RedisCommander is an autogenerated mock type for the RedisCommander type
type RedisCommander struct {
	mock.Mock
}

// GetEx provides a mock function with given fields: ctx, key, expiration
func (_m *RedisCommander) GetEx(ctx context.Context, key string, expiration time.Duration) *redis.StringCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.StringCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *RedisCommander) Set(ctx context.Context, key string, value any, expiration time.Duration) *redis.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *redis.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) *redis.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StatusCmd)
		}
	}

	return r0
}

type NewRedisCommanderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisCommander creates a new instance of RedisCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisCommander(t NewRedisCommanderT) *RedisCommander {
	mock := &RedisCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
