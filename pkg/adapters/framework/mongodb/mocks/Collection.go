// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongodb "github.com/zenoss/event-management-service/pkg/adapters/framework/mongodb"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, pipeline, opts
func (_m *Collection) Aggregate(ctx context.Context, pipeline any, opts ...*options.AggregateOptions) (mongodb.Cursor, error) {
	_va := make([]any, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongodb.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, any, ...*options.AggregateOptions) mongodb.Cursor); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, any, ...*options.AggregateOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filter, opts
func (_m *Collection) Find(ctx context.Context, filter any, opts ...*options.FindOptions) (mongodb.Cursor, error) {
	_va := make([]any, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongodb.Cursor
	if rf, ok := ret.Get(0).(func(context.Context, any, ...*options.FindOptions) mongodb.Cursor); ok {
		r0 = rf(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, any, ...*options.FindOptions) error); ok {
		r1 = rf(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewCollectionT interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollection creates a new instance of Collection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollection(t NewCollectionT) *Collection {
	mock := &Collection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
