// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongodb "github.com/zenoss/event-management-service/pkg/adapters/framework/mongodb"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Collection provides a mock function with given fields: name, opts
func (_m *Database) Collection(name string, opts ...*options.CollectionOptions) mongodb.Collection {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 mongodb.Collection
	if rf, ok := ret.Get(0).(func(string, ...*options.CollectionOptions) mongodb.Collection); ok {
		r0 = rf(name, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Collection)
		}
	}

	return r0
}

type NewDatabaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t NewDatabaseT) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
